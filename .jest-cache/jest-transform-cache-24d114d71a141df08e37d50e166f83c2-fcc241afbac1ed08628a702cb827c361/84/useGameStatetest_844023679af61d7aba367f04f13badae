dc8ce36a4ba33b73b5024f8c9d10e69b
"use strict";

var _react = require("@testing-library/react");
var _useGameState = require("../hooks/useGameState");
describe('useGameState', () => {
  it('should initialize with default values', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useGameState.useGameState)());
    expect(result.current.gameStarted).toBe(false);
    expect(result.current.gameCompleted).toBe(false);
    expect(result.current.showCelebration).toBe(false);
    expect(result.current.score).toBe(0);
    expect(result.current.lives).toBe(3);
    expect(result.current.combo).toBe(0);
    expect(result.current.maxCombo).toBe(0);
  });
  it('should update game state correctly', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useGameState.useGameState)());
    (0, _react.act)(() => {
      result.current.setGameStarted(true);
    });
    expect(result.current.gameStarted).toBe(true);
    (0, _react.act)(() => {
      result.current.setScore(100);
    });
    expect(result.current.score).toBe(100);
  });
  it('should reset game state correctly', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useGameState.useGameState)());

    // Set some state
    (0, _react.act)(() => {
      result.current.setGameStarted(true);
      result.current.setScore(100);
      result.current.setLives(1);
      result.current.setCombo(5);
    });

    // Reset game
    (0, _react.act)(() => {
      result.current.resetGame();
    });
    expect(result.current.gameStarted).toBe(false);
    expect(result.current.score).toBe(0);
    expect(result.current.lives).toBe(3);
    expect(result.current.combo).toBe(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3VzZUdhbWVTdGF0ZSIsImRlc2NyaWJlIiwiaXQiLCJyZXN1bHQiLCJyZW5kZXJIb29rIiwidXNlR2FtZVN0YXRlIiwiZXhwZWN0IiwiY3VycmVudCIsImdhbWVTdGFydGVkIiwidG9CZSIsImdhbWVDb21wbGV0ZWQiLCJzaG93Q2VsZWJyYXRpb24iLCJzY29yZSIsImxpdmVzIiwiY29tYm8iLCJtYXhDb21ibyIsImFjdCIsInNldEdhbWVTdGFydGVkIiwic2V0U2NvcmUiLCJzZXRMaXZlcyIsInNldENvbWJvIiwicmVzZXRHYW1lIl0sInNvdXJjZXMiOlsidXNlR2FtZVN0YXRlLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IHVzZUdhbWVTdGF0ZSB9IGZyb20gJy4uL2hvb2tzL3VzZUdhbWVTdGF0ZSc7XHJcblxyXG5kZXNjcmliZSgndXNlR2FtZVN0YXRlJywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgdmFsdWVzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlR2FtZVN0YXRlKCkpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5nYW1lU3RhcnRlZCkudG9CZShmYWxzZSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZ2FtZUNvbXBsZXRlZCkudG9CZShmYWxzZSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2hvd0NlbGVicmF0aW9uKS50b0JlKGZhbHNlKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zY29yZSkudG9CZSgwKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5saXZlcykudG9CZSgzKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jb21ibykudG9CZSgwKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5tYXhDb21ibykudG9CZSgwKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB1cGRhdGUgZ2FtZSBzdGF0ZSBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VHYW1lU3RhdGUoKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0R2FtZVN0YXJ0ZWQodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZ2FtZVN0YXJ0ZWQpLnRvQmUodHJ1ZSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0U2NvcmUoMTAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zY29yZSkudG9CZSgxMDApO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJlc2V0IGdhbWUgc3RhdGUgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlR2FtZVN0YXRlKCkpO1xyXG5cclxuICAgIC8vIFNldCBzb21lIHN0YXRlXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5zZXRHYW1lU3RhcnRlZCh0cnVlKTtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0U2NvcmUoMTAwKTtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0TGl2ZXMoMSk7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldENvbWJvKDUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVzZXQgZ2FtZVxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQucmVzZXRHYW1lKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZ2FtZVN0YXJ0ZWQpLnRvQmUoZmFsc2UpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNjb3JlKS50b0JlKDApO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmxpdmVzKS50b0JlKDMpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNvbWJvKS50b0JlKDApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUVBRSxRQUFRLENBQUMsY0FBYyxFQUFFLE1BQU07RUFDN0JDLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxNQUFNO0lBQ2hELE1BQU07TUFBRUM7SUFBTyxDQUFDLEdBQUcsSUFBQUMsaUJBQVUsRUFBQyxNQUFNLElBQUFDLDBCQUFZLEVBQUMsQ0FBQyxDQUFDO0lBRW5EQyxNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDQyxXQUFXLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM5Q0gsTUFBTSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0csYUFBYSxDQUFDLENBQUNELElBQUksQ0FBQyxLQUFLLENBQUM7SUFDaERILE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLENBQUNJLGVBQWUsQ0FBQyxDQUFDRixJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ2xESCxNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDSyxLQUFLLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwQ0gsTUFBTSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ00sS0FBSyxDQUFDLENBQUNKLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcENILE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLENBQUNPLEtBQUssQ0FBQyxDQUFDTCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BDSCxNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDUSxRQUFRLENBQUMsQ0FBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN6QyxDQUFDLENBQUM7RUFFRlAsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLE1BQU07SUFDN0MsTUFBTTtNQUFFQztJQUFPLENBQUMsR0FBRyxJQUFBQyxpQkFBVSxFQUFDLE1BQU0sSUFBQUMsMEJBQVksRUFBQyxDQUFDLENBQUM7SUFFbkQsSUFBQVcsVUFBRyxFQUFDLE1BQU07TUFDUmIsTUFBTSxDQUFDSSxPQUFPLENBQUNVLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDckMsQ0FBQyxDQUFDO0lBRUZYLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLENBQUNDLFdBQVcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBRTdDLElBQUFPLFVBQUcsRUFBQyxNQUFNO01BQ1JiLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDVyxRQUFRLENBQUMsR0FBRyxDQUFDO0lBQzlCLENBQUMsQ0FBQztJQUVGWixNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDSyxLQUFLLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUN4QyxDQUFDLENBQUM7RUFFRlAsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLE1BQU07SUFDNUMsTUFBTTtNQUFFQztJQUFPLENBQUMsR0FBRyxJQUFBQyxpQkFBVSxFQUFDLE1BQU0sSUFBQUMsMEJBQVksRUFBQyxDQUFDLENBQUM7O0lBRW5EO0lBQ0EsSUFBQVcsVUFBRyxFQUFDLE1BQU07TUFDUmIsTUFBTSxDQUFDSSxPQUFPLENBQUNVLGNBQWMsQ0FBQyxJQUFJLENBQUM7TUFDbkNkLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDVyxRQUFRLENBQUMsR0FBRyxDQUFDO01BQzVCZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksUUFBUSxDQUFDLENBQUMsQ0FBQztNQUMxQmhCLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDYSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQzs7SUFFRjtJQUNBLElBQUFKLFVBQUcsRUFBQyxNQUFNO01BQ1JiLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDYyxTQUFTLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRmYsTUFBTSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUNDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUNILE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLENBQUNLLEtBQUssQ0FBQyxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BDSCxNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDTSxLQUFLLENBQUMsQ0FBQ0osSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwQ0gsTUFBTSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ08sS0FBSyxDQUFDLENBQUNMLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119