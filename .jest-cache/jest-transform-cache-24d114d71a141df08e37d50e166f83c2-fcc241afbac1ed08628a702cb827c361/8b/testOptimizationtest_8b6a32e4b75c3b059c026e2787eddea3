2a5a61e8663ef96dd67484a0545ec9a1
"use strict";

var _react = require("@testing-library/react");
var _App = _interopRequireDefault(require("../../App"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Performance-focused tests
describe('Performance Optimization Tests', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });
  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('should render initial screen quickly', () => {
    const startTime = performance.now();
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
    const endTime = performance.now();
    expect(endTime - startTime).toBeLessThan(100); // Should render in under 100ms
    expect(_react.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();
  });
  it('should handle multiple rapid clicks without performance degradation', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
    const startButton = _react.screen.getByText('ðŸŽµ Start Playing');
    const startTime = performance.now();

    // Simulate rapid clicking
    for (let i = 0; i < 10; i++) {
      _react.fireEvent.click(startButton);
    }
    const endTime = performance.now();
    expect(endTime - startTime).toBeLessThan(50); // Should handle rapid clicks efficiently
  });
  it('should not create memory leaks with timers', () => {
    const {
      unmount
    } = (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

    // Start game to create timers
    const startButton = _react.screen.getByText('ðŸŽµ Start Playing');
    _react.fireEvent.click(startButton);

    // Advance timers
    jest.advanceTimersByTime(1000);

    // Unmount should clean up without errors
    expect(() => unmount()).not.toThrow();
  });
  it('should efficiently handle media loading', async () => {
    const startTime = performance.now();
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

    // Media loading should not block initial render
    expect(_react.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();
    const endTime = performance.now();
    expect(endTime - startTime).toBeLessThan(100);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX0FwcCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImplc3QiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwicnVuT25seVBlbmRpbmdUaW1lcnMiLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJzdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJlbmRlciIsImpzeCIsImVuZFRpbWUiLCJleHBlY3QiLCJ0b0JlTGVzc1RoYW4iLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInN0YXJ0QnV0dG9uIiwiaSIsImZpcmVFdmVudCIsImNsaWNrIiwidW5tb3VudCIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsidGVzdE9wdGltaXphdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBCaXJ0aGRheVBpYW5vU3VycHJpc2UgZnJvbSAnLi4vLi4vQXBwJztcblxuLy8gUGVyZm9ybWFuY2UtZm9jdXNlZCB0ZXN0c1xuZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIE9wdGltaXphdGlvbiBUZXN0cycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5ydW5Pbmx5UGVuZGluZ1RpbWVycygpO1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIHNjcmVlbiBxdWlja2x5JywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJlbmRlcig8QmlydGhkYXlQaWFub1N1cnByaXNlIC8+KTtcbiAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgXG4gICAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigxMDApOyAvLyBTaG91bGQgcmVuZGVyIGluIHVuZGVyIDEwMG1zXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ/CfjokgSEFQUFkgQklSVEhEQVkhIPCfjoknKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbXVsdGlwbGUgcmFwaWQgY2xpY2tzIHdpdGhvdXQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24nLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxCaXJ0aGRheVBpYW5vU3VycHJpc2UgLz4pO1xuICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgn8J+OtSBTdGFydCBQbGF5aW5nJyk7XG4gICAgXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgXG4gICAgLy8gU2ltdWxhdGUgcmFwaWQgY2xpY2tpbmdcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzdGFydEJ1dHRvbik7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBleHBlY3QoZW5kVGltZSAtIHN0YXJ0VGltZSkudG9CZUxlc3NUaGFuKDUwKTsgLy8gU2hvdWxkIGhhbmRsZSByYXBpZCBjbGlja3MgZWZmaWNpZW50bHlcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgY3JlYXRlIG1lbW9yeSBsZWFrcyB3aXRoIHRpbWVycycsICgpID0+IHtcbiAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlcig8QmlydGhkYXlQaWFub1N1cnByaXNlIC8+KTtcbiAgICBcbiAgICAvLyBTdGFydCBnYW1lIHRvIGNyZWF0ZSB0aW1lcnNcbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ/CfjrUgU3RhcnQgUGxheWluZycpO1xuICAgIGZpcmVFdmVudC5jbGljayhzdGFydEJ1dHRvbik7XG4gICAgXG4gICAgLy8gQWR2YW5jZSB0aW1lcnNcbiAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMCk7XG4gICAgXG4gICAgLy8gVW5tb3VudCBzaG91bGQgY2xlYW4gdXAgd2l0aG91dCBlcnJvcnNcbiAgICBleHBlY3QoKCkgPT4gdW5tb3VudCgpKS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVmZmljaWVudGx5IGhhbmRsZSBtZWRpYSBsb2FkaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJlbmRlcig8QmlydGhkYXlQaWFub1N1cnByaXNlIC8+KTtcbiAgICBcbiAgICAvLyBNZWRpYSBsb2FkaW5nIHNob3VsZCBub3QgYmxvY2sgaW5pdGlhbCByZW5kZXJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn8J+OiSBIQVBQWSBCSVJUSERBWSEg8J+OiScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIFxuICAgIGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBleHBlY3QoZW5kVGltZSAtIHN0YXJ0VGltZSkudG9CZUxlc3NUaGFuKDEwMCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsSUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQThDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFBLFNBQUFFLHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEs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