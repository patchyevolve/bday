e642512bc238bb128bf7b9f97c62bd3f
"use strict";

var _reactHooks = require("@testing-library/react-hooks");
var _useGameLoop = require("../hooks/useGameLoop");
var _gameData = require("../constants/gameData");
describe('useGameLoop', () => {
  beforeEach(() => {
    jest.useFakeTimers();
    jest.spyOn(window, 'requestAnimationFrame').mockImplementation(cb => setTimeout(cb, 16));
  });
  afterEach(() => {
    jest.useRealTimers();
    window.requestAnimationFrame.mockRestore();
  });
  const mockProps = {
    gameStarted: true,
    gameOver: false,
    gameCompleted: false,
    tilesSpawned: 0,
    endlessMode: false,
    activePowerUps: {
      slowMotion: {
        active: false
      },
      invincible: {
        active: false
      }
    },
    happyBirthdayNotes: ['C4', 'D4', 'E4'],
    onSpawnTile: jest.fn(),
    onUpdateTiles: jest.fn(),
    onUpdatePowerUps: jest.fn(),
    onSpawnPowerUp: jest.fn(),
    onLoseLife: jest.fn(),
    onGameOver: jest.fn()
  };
  it('should start game loop when game starts', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useGameLoop.useGameLoop)(mockProps));
    (0, _reactHooks.act)(() => {
      result.current.startGameLoop();
      jest.advanceTimersByTime(_gameData.GAME_CONFIG.BASE_SPAWN_INTERVAL);
    });
    expect(mockProps.onSpawnTile).toHaveBeenCalled();
    expect(mockProps.onUpdateTiles).toHaveBeenCalled();
  });
  it('should handle power-ups correctly', () => {
    const propsWithPowerUps = {
      ...mockProps,
      activePowerUps: {
        slowMotion: {
          active: true
        },
        invincible: {
          active: true
        }
      }
    };
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useGameLoop.useGameLoop)(propsWithPowerUps));
    (0, _reactHooks.act)(() => {
      result.current.startGameLoop();
      jest.advanceTimersByTime(2500); // Slow motion interval
    });
    expect(mockProps.onSpawnTile).toHaveBeenCalled();
    const spawnedTile = mockProps.onSpawnTile.mock.calls[0][0];
    expect(spawnedTile.speed).toBeLessThan(_gameData.GAME_CONFIG.BASE_TILE_SPEED);
  });
  it('should stop game loop on cleanup', () => {
    const {
      result,
      unmount
    } = (0, _reactHooks.renderHook)(() => (0, _useGameLoop.useGameLoop)(mockProps));
    (0, _reactHooks.act)(() => {
      result.current.startGameLoop();
    });
    unmount();
    expect(window.requestAnimationFrame).not.toHaveBeenCalled();
  });
  it('should handle endless mode correctly', () => {
    const endlessModeProps = {
      ...mockProps,
      endlessMode: true,
      tilesSpawned: 5
    };
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useGameLoop.useGameLoop)(endlessModeProps));
    (0, _reactHooks.act)(() => {
      result.current.startGameLoop();
      jest.advanceTimersByTime(_gameData.GAME_CONFIG.BASE_SPAWN_INTERVAL);
    });
    expect(mockProps.onSpawnTile).toHaveBeenCalled();
    const spawnedTile = mockProps.onSpawnTile.mock.calls[0][0];
    expect(spawnedTile.noteIndex).toBe(5 % mockProps.happyBirthdayNotes.length);
  });
  it('should handle game over', () => {
    const gameOverProps = {
      ...mockProps,
      gameOver: true
    };
    (0, _reactHooks.renderHook)(() => (0, _useGameLoop.useGameLoop)(gameOverProps));
    expect(mockProps.onGameOver).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,