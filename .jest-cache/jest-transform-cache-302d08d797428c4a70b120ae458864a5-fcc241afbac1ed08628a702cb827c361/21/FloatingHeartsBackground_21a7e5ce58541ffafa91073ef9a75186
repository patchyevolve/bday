ac76bbccbb0348b7dd26d2afa3b20be5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lucideReact = require("lucide-react");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const FloatingHeartsBackground = ({
  heartCount = 12,
  opacity = 0.2,
  animationDuration = 8,
  pulseDuration = 10,
  size = 'w-5 h-5',
  color = 'text-pink-200'
}) => {
  // Generate stable heart positions that don't change on re-render
  const heartPositions = (0, _react.useMemo)(() => [...Array(heartCount)].map(() => ({
    left: Math.random() * 100,
    top: Math.random() * 100,
    animationDelay: Math.random() * animationDuration,
    pulseDelay: Math.random() * pulseDuration
  })), [heartCount, animationDuration, pulseDuration]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: heartPositions.map((heart, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "absolute pointer-events-none",
      style: {
        left: `${heart.left}%`,
        top: `${heart.top}%`,
        opacity: opacity,
        animation: `heartFloat ${animationDuration}s ease-in-out infinite`,
        animationDelay: `${heart.animationDelay}s`
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
        className: `${size} ${color} floating-heart`,
        style: {
          animation: `heartPulse ${pulseDuration}s ease-in-out infinite`,
          animationDelay: `${heart.pulseDelay}s`
        }
      })
    }, i))
  });
};
var _default = exports.default = FloatingHeartsBackground;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfbHVjaWRlUmVhY3QiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkZsb2F0aW5nSGVhcnRzQmFja2dyb3VuZCIsImhlYXJ0Q291bnQiLCJvcGFjaXR5IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJwdWxzZUR1cmF0aW9uIiwic2l6ZSIsImNvbG9yIiwiaGVhcnRQb3NpdGlvbnMiLCJ1c2VNZW1vIiwiQXJyYXkiLCJtYXAiLCJsZWZ0IiwiTWF0aCIsInJhbmRvbSIsInRvcCIsImFuaW1hdGlvbkRlbGF5IiwicHVsc2VEZWxheSIsImpzeCIsIkZyYWdtZW50IiwiY2hpbGRyZW4iLCJoZWFydCIsImNsYXNzTmFtZSIsInN0eWxlIiwiYW5pbWF0aW9uIiwiSGVhcnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJGbG9hdGluZ0hlYXJ0c0JhY2tncm91bmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEhlYXJ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcclxuXHJcbmNvbnN0IEZsb2F0aW5nSGVhcnRzQmFja2dyb3VuZCA9ICh7IFxyXG4gIGhlYXJ0Q291bnQgPSAxMiwgXHJcbiAgb3BhY2l0eSA9IDAuMiwgXHJcbiAgYW5pbWF0aW9uRHVyYXRpb24gPSA4LFxyXG4gIHB1bHNlRHVyYXRpb24gPSAxMCxcclxuICBzaXplID0gJ3ctNSBoLTUnLFxyXG4gIGNvbG9yID0gJ3RleHQtcGluay0yMDAnXHJcbn0pID0+IHtcclxuICAvLyBHZW5lcmF0ZSBzdGFibGUgaGVhcnQgcG9zaXRpb25zIHRoYXQgZG9uJ3QgY2hhbmdlIG9uIHJlLXJlbmRlclxyXG4gIGNvbnN0IGhlYXJ0UG9zaXRpb25zID0gdXNlTWVtbygoKSA9PiBcclxuICAgIFsuLi5BcnJheShoZWFydENvdW50KV0ubWFwKCgpID0+ICh7XHJcbiAgICAgIGxlZnQ6IE1hdGgucmFuZG9tKCkgKiAxMDAsXHJcbiAgICAgIHRvcDogTWF0aC5yYW5kb20oKSAqIDEwMCxcclxuICAgICAgYW5pbWF0aW9uRGVsYXk6IE1hdGgucmFuZG9tKCkgKiBhbmltYXRpb25EdXJhdGlvbixcclxuICAgICAgcHVsc2VEZWxheTogTWF0aC5yYW5kb20oKSAqIHB1bHNlRHVyYXRpb25cclxuICAgIH0pKSwgW2hlYXJ0Q291bnQsIGFuaW1hdGlvbkR1cmF0aW9uLCBwdWxzZUR1cmF0aW9uXVxyXG4gICk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICB7aGVhcnRQb3NpdGlvbnMubWFwKChoZWFydCwgaSkgPT4gKFxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGtleT17aX1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxyXG4gICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgbGVmdDogYCR7aGVhcnQubGVmdH0lYCxcclxuICAgICAgICAgICAgdG9wOiBgJHtoZWFydC50b3B9JWAsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHksXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbjogYGhlYXJ0RmxvYXQgJHthbmltYXRpb25EdXJhdGlvbn1zIGVhc2UtaW4tb3V0IGluZmluaXRlYCxcclxuICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2hlYXJ0LmFuaW1hdGlvbkRlbGF5fXNgXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxIZWFydCBcclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzaXplfSAke2NvbG9yfSBmbG9hdGluZy1oZWFydGB9XHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uOiBgaGVhcnRQdWxzZSAke3B1bHNlRHVyYXRpb259cyBlYXNlLWluLW91dCBpbmZpbml0ZWAsXHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2hlYXJ0LnB1bHNlRGVsYXl9c2BcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICkpfVxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZsb2F0aW5nSGVhcnRzQmFja2dyb3VuZDtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFBcUMsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQUEsU0FBQUQsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFOLHVCQUFBLFlBQUFBLENBQUFJLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEs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