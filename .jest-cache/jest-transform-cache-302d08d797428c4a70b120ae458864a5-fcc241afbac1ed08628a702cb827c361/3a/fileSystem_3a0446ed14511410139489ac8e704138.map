{"version":3,"names":["cov_2be4mjf9yw","actualCoverage","v4","uuidv4","getImageDimensions","getVideoDimensions","generateVideoThumbnail","isValidImageFile","isValidVideoFile","BASE_URL","s","process","env","PUBLIC_URL","scanMediaDirectory","type","f","response","fetch","data","json","b","files","error","console","uploadMedia","file","formData","FormData","append","method","body","Error","deleteMedia","filename","headers","JSON","stringify","processMediaFile","id","url","URL","createObjectURL","dimensions","thumbnail","name","size","lastModified"],"sources":["fileSystem.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  getImageDimensions,\r\n  getVideoDimensions,\r\n  generateVideoThumbnail,\r\n  isValidImageFile,\r\n  isValidVideoFile\r\n} from './mediaUtils';\r\n\r\nconst BASE_URL = process.env.PUBLIC_URL;\r\n\r\nexport const scanMediaDirectory = async (type) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/scan-media?type=${type}`);\r\n    const data = await response.json();\r\n    return data.files || [];\r\n  } catch (error) {\r\n    console.error('Error scanning media directory:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const uploadMedia = async (file, type) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('type', type);\r\n\r\n    const response = await fetch(`${BASE_URL}/api/upload-media`, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error uploading media:', error);\r\n    throw new Error('Failed to upload media');\r\n  }\r\n};\r\n\r\nexport const deleteMedia = async (filename, type) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/delete-media`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ filename, type }),\r\n    });\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error deleting media:', error);\r\n    throw new Error('Failed to delete media');\r\n  }\r\n};\r\n\r\nexport const processMediaFile = async (file, type) => {\r\n  const id = uuidv4();\r\n  const url = URL.createObjectURL(file);\r\n  \r\n  let dimensions;\r\n  let thumbnail;\r\n  \r\n  if (type === 'pictures' && isValidImageFile(file)) {\r\n    dimensions = await getImageDimensions(file);\r\n    thumbnail = url;\r\n  } else if (type === 'videos' && isValidVideoFile(file)) {\r\n    dimensions = await getVideoDimensions(file);\r\n    thumbnail = await generateVideoThumbnail(file);\r\n  } else {\r\n    throw new Error('Invalid file type');\r\n  }\r\n\r\n  return {\r\n    id,\r\n    url,\r\n    thumbnail,\r\n    name: file.name,\r\n    type,\r\n    size: file.size,\r\n    lastModified: file.lastModified,\r\n    ...dimensions,\r\n  };\r\n};\r\n"],"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","ignoreList":[]}