21503d863946b94871357395bb944567
"use strict";

var _mediaLoader = require("../../utils/mediaLoader");
// Mock fetch for testing
global.fetch = jest.fn();
describe('Media Loader', () => {
  beforeEach(() => {
    fetch.mockClear();
  });
  describe('loadMediaFiles', () => {
    it('should load all media files successfully', async () => {
      const result = await (0, _mediaLoader.loadMediaFiles)();
      expect(result).toHaveProperty('pictures');
      expect(result).toHaveProperty('videos');
      expect(Array.isArray(result.pictures)).toBe(true);
      expect(Array.isArray(result.videos)).toBe(true);
    });
    it('should return correct number of pictures', async () => {
      const result = await (0, _mediaLoader.loadMediaFiles)();

      // Should have 40 pictures based on the current implementation
      expect(result.pictures).toHaveLength(40);
    });
    it('should return correct number of videos', async () => {
      const result = await (0, _mediaLoader.loadMediaFiles)();

      // Should have 1 video based on the current implementation
      expect(result.videos).toHaveLength(1);
    });
    it('should have correct picture structure', async () => {
      const result = await (0, _mediaLoader.loadMediaFiles)();
      result.pictures.forEach((picture, index) => {
        expect(picture).toHaveProperty('id');
        expect(picture).toHaveProperty('url');
        expect(picture).toHaveProperty('alt');
        expect(picture).toHaveProperty('filename');
        expect(picture.id).toBe(index + 1);
        expect(picture.url).toMatch(/^\/media\/pictures\//);
        expect(picture.alt).toMatch(/^Memory \d+$/);
        expect(typeof picture.filename).toBe('string');
      });
    });
    it('should have correct video structure', async () => {
      const result = await (0, _mediaLoader.loadMediaFiles)();
      result.videos.forEach(video => {
        expect(video).toHaveProperty('id');
        expect(video).toHaveProperty('url');
        expect(video).toHaveProperty('alt');
        expect(video).toHaveProperty('filename');
        expect(video.url).toMatch(/^\/media\/videos\//);
        expect(typeof video.alt).toBe('string');
        expect(typeof video.filename).toBe('string');
      });
    });
    it('should handle errors gracefully', async () => {
      // Mock console.error to avoid noise in test output
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();

      // Force an error by mocking a failing operation
      const originalConsoleLog = console.log;
      console.log = jest.fn(() => {
        throw new Error('Test error');
      });
      const result = await (0, _mediaLoader.loadMediaFiles)();

      // Should still return the expected structure even with errors
      expect(result).toHaveProperty('pictures');
      expect(result).toHaveProperty('videos');

      // Restore original console methods
      console.log = originalConsoleLog;
      consoleSpy.mockRestore();
    });
    it('should include various image formats', async () => {
      const result = await (0, _mediaLoader.loadMediaFiles)();
      const extensions = result.pictures.map(pic => pic.filename.split('.').pop().toLowerCase());

      // Should include jpg, webp, and JPG formats
      expect(extensions).toContain('jpg');
      expect(extensions).toContain('webp');
    });
  });
  describe('addNewMediaFile', () => {
    it('should create new media file object correctly', () => {
      const result = (0, _mediaLoader.addNewMediaFile)('pictures', 'test.jpg', 'Test Image');
      expect(result).toHaveProperty('id');
      expect(result).toHaveProperty('url');
      expect(result).toHaveProperty('alt');
      expect(result).toHaveProperty('filename');
      expect(result.url).toBe('/media/pictures/test.jpg');
      expect(result.alt).toBe('Test Image');
      expect(result.filename).toBe('test.jpg');
      expect(typeof result.id).toBe('number');
    });
    it('should use filename as alt when alt is not provided', () => {
      const result = (0, _mediaLoader.addNewMediaFile)('videos', 'test.mp4');
      expect(result.alt).toBe('test.mp4');
    });
    it('should generate unique IDs', () => {
      const file1 = (0, _mediaLoader.addNewMediaFile)('pictures', 'test1.jpg');
      const file2 = (0, _mediaLoader.addNewMediaFile)('pictures', 'test2.jpg');
      expect(file1.id).not.toBe(file2.id);
    });
    it('should handle different media types', () => {
      const picture = (0, _mediaLoader.addNewMediaFile)('pictures', 'test.jpg');
      const video = (0, _mediaLoader.addNewMediaFile)('videos', 'test.mp4');
      expect(picture.url).toBe('/media/pictures/test.jpg');
      expect(video.url).toBe('/media/videos/test.mp4');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,