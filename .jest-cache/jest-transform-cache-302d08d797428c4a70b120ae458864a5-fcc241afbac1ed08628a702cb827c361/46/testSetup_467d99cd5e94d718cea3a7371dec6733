b57dab7fb24260fd240d3012c642af4d
"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
// Enhanced test setup with better mocks and utilities

// Configure testing library
(0, _react.configure)({
  testIdAttribute: 'data-testid',
  asyncUtilTimeout: 5000,
  computedStyleSupportsPseudoElements: true
});

// Mock Web Audio API
global.AudioContext = jest.fn(() => ({
  createOscillator: jest.fn(() => ({
    connect: jest.fn(),
    start: jest.fn(),
    stop: jest.fn(),
    frequency: {
      setValueAtTime: jest.fn(),
      exponentialRampToValueAtTime: jest.fn()
    },
    type: 'sine'
  })),
  createGain: jest.fn(() => ({
    connect: jest.fn(),
    gain: {
      setValueAtTime: jest.fn(),
      exponentialRampToValueAtTime: jest.fn()
    }
  })),
  destination: {},
  currentTime: 0,
  state: 'running',
  resume: jest.fn(() => Promise.resolve()),
  suspend: jest.fn(() => Promise.resolve()),
  close: jest.fn(() => Promise.resolve())
}));

// Mock matchMedia for responsive tests
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// Mock IntersectionObserver
global.IntersectionObserver = jest.fn(() => ({
  observe: jest.fn(),
  disconnect: jest.fn(),
  unobserve: jest.fn()
}));

// Mock ResizeObserver
global.ResizeObserver = jest.fn(() => ({
  observe: jest.fn(),
  disconnect: jest.fn(),
  unobserve: jest.fn()
}));

// Mock requestAnimationFrame
global.requestAnimationFrame = jest.fn(cb => setTimeout(cb, 16));
global.cancelAnimationFrame = jest.fn(id => clearTimeout(id));

// Mock HTMLCanvasElement for performance tests
HTMLCanvasElement.prototype.getContext = jest.fn(() => ({
  getParameter: jest.fn(() => 'WebGL 2.0'),
  getSupportedExtensions: jest.fn(() => ['WEBGL_debug_renderer_info'])
}));

// Suppress console warnings in tests unless explicitly testing them
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;
beforeEach(() => {
  console.warn = jest.fn();
  console.error = jest.fn();
});
afterEach(() => {
  console.warn = originalConsoleWarn;
  console.error = originalConsoleError;
  jest.clearAllTimers();
});

// Global test utilities
global.testUtils = {
  // Wait for async operations
  waitFor: (ms = 100) => new Promise(resolve => setTimeout(resolve, ms)),
  // Mock fetch responses
  mockFetch: response => {
    global.fetch = jest.fn(() => Promise.resolve({
      ok: true,
      status: 200,
      json: () => Promise.resolve(response),
      text: () => Promise.resolve(JSON.stringify(response)),
      headers: new Headers()
    }));
  },
  // Create mock media files
  createMockMediaFiles: () => ({
    pictures: [{
      id: 1,
      url: '/media/pictures/test1.jpg',
      alt: 'Test 1',
      filename: 'test1.jpg'
    }, {
      id: 2,
      url: '/media/pictures/test2.jpg',
      alt: 'Test 2',
      filename: 'test2.jpg'
    }],
    videos: [{
      id: 1,
      url: '/media/videos/test.mp4',
      alt: 'Test Video',
      filename: 'test.mp4'
    }]
  }),
  // Mock game state
  createMockGameState: () => ({
    gameStarted: false,
    gameCompleted: false,
    showCelebration: false,
    score: 0,
    lives: 3,
    combo: 0,
    maxCombo: 0,
    tilesHit: 0,
    tilesSpawned: 0
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,