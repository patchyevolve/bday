52533d095e700e1e3e1255f92e8c7dc7
"use strict";

var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _FloatingHeartsBackground = _interopRequireDefault(require("../../components/FloatingHeartsBackground"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('FloatingHeartsBackground', () => {
  it('renders the correct number of hearts', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
      heartCount: 5
    }));

    // Check that hearts are rendered (they should be in the DOM)
    const hearts = document.querySelectorAll('.floating-heart');
    expect(hearts).toHaveLength(5);
  });
  it('applies custom props correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
      heartCount: 3,
      opacity: 0.5,
      size: "w-8 h-8",
      color: "text-blue-300"
    }));
    const hearts = document.querySelectorAll('.floating-heart');
    expect(hearts).toHaveLength(3);

    // Check that custom classes are applied
    hearts.forEach(heart => {
      expect(heart).toHaveClass('w-8', 'h-8', 'text-blue-300');
    });
  });
  it('uses default props when not provided', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {}));
    const hearts = document.querySelectorAll('.floating-heart');
    expect(hearts).toHaveLength(12); // Default heartCount

    // Check default classes
    hearts.forEach(heart => {
      expect(heart).toHaveClass('w-5', 'h-5', 'text-pink-200');
    });
  });
  it('generates stable positions on re-render', () => {
    const {
      rerender
    } = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
      heartCount: 2
    }));
    const firstRenderContainers = document.querySelectorAll('.absolute.pointer-events-none');
    const firstPositions = Array.from(firstRenderContainers).map(container => ({
      left: container.style.left,
      top: container.style.top
    }));

    // Re-render with same props
    rerender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
      heartCount: 2
    }));
    const secondRenderContainers = document.querySelectorAll('.absolute.pointer-events-none');
    const secondPositions = Array.from(secondRenderContainers).map(container => ({
      left: container.style.left,
      top: container.style.top
    }));

    // Positions should be the same (stable)
    expect(firstPositions).toEqual(secondPositions);
  });
  it('applies animation styles correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
      heartCount: 1,
      animationDuration: 6,
      pulseDuration: 8
    }));
    const heartContainer = document.querySelector('.absolute.pointer-events-none');
    expect(heartContainer.style.animation).toContain('heartFloat');
    expect(heartContainer.style.animation).toContain('6s');
    expect(heartContainer.style.animation).toContain('ease-in-out');
    expect(heartContainer.style.animation).toContain('infinite');
    const heart = document.querySelector('.floating-heart');
    expect(heart.style.animation).toContain('heartPulse');
    expect(heart.style.animation).toContain('8s');
    expect(heart.style.animation).toContain('ease-in-out');
    expect(heart.style.animation).toContain('infinite');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,