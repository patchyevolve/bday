342116a4c46e51935f9e5fecee04dfa2
"use strict";

var _performance = require("../../utils/performance");
describe('Performance Utils', () => {
  describe('debounce', () => {
    it('should debounce function calls', done => {
      let callCount = 0;
      const debouncedFn = (0, _performance.debounce)(() => {
        callCount++;
      }, 100);

      // Call multiple times quickly
      debouncedFn();
      debouncedFn();
      debouncedFn();

      // Should only be called once after delay
      setTimeout(() => {
        expect(callCount).toBe(1);
        done();
      }, 150);
    });
  });
  describe('throttle', () => {
    it('should throttle function calls', done => {
      let callCount = 0;
      const throttledFn = (0, _performance.throttle)(() => {
        callCount++;
      }, 100);

      // Call multiple times quickly
      throttledFn();
      throttledFn();
      throttledFn();

      // Should be called immediately
      expect(callCount).toBe(1);

      // Should be called again after throttle period
      setTimeout(() => {
        throttledFn();
        expect(callCount).toBe(2);
        done();
      }, 150);
    });
  });
  describe('memoize', () => {
    it('should memoize function results', () => {
      let callCount = 0;
      const expensiveFunction = n => {
        callCount++;
        return n * 2;
      };
      const memoizedFn = (0, _performance.memoize)(expensiveFunction);

      // First call
      expect(memoizedFn(5)).toBe(10);
      expect(callCount).toBe(1);

      // Second call with same argument
      expect(memoizedFn(5)).toBe(10);
      expect(callCount).toBe(1); // Should not call again

      // Different argument
      expect(memoizedFn(3)).toBe(6);
      expect(callCount).toBe(2);
    });
  });
  describe('getDevicePerformanceTier', () => {
    it('should return performance tier', () => {
      // Mock canvas getContext to avoid jsdom issues
      const originalGetContext = HTMLCanvasElement.prototype.getContext;
      HTMLCanvasElement.prototype.getContext = jest.fn(() => null);
      const tier = (0, _performance.getDevicePerformanceTier)();
      expect(['low', 'medium', 'high']).toContain(tier);

      // Restore original method
      HTMLCanvasElement.prototype.getContext = originalGetContext;
    });
  });
  describe('getOptimizedAnimationSettings', () => {
    it('should return animation settings', () => {
      // Mock canvas getContext to avoid jsdom issues
      const originalGetContext = HTMLCanvasElement.prototype.getContext;
      HTMLCanvasElement.prototype.getContext = jest.fn(() => null);
      const settings = (0, _performance.getOptimizedAnimationSettings)();
      expect(settings).toHaveProperty('maxFloatingElements');
      expect(settings).toHaveProperty('animationQuality');
      expect(settings).toHaveProperty('enableParticles');
      expect(settings).toHaveProperty('enableShadows');
      expect(typeof settings.maxFloatingElements).toBe('number');
      expect(['low', 'medium', 'high']).toContain(settings.animationQuality);
      expect(typeof settings.enableParticles).toBe('boolean');
      expect(typeof settings.enableShadows).toBe('boolean');

      // Restore original method
      HTMLCanvasElement.prototype.getContext = originalGetContext;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,