4c900d238873aacc0bc8d7bee56dfcc6
"use strict";

var _react = require("@testing-library/react");
var _useAudio = require("../../hooks/useAudio");
describe('useAudio Hook', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('should initialize with correct default values', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useAudio.useAudio)());
    expect(result.current.isMuted).toBe(false);
    expect(typeof result.current.playNote).toBe('function');
    expect(typeof result.current.playBackgroundMusic).toBe('function');
    expect(typeof result.current.stopBackgroundMusic).toBe('function');
    expect(typeof result.current.toggleMute).toBe('function');
  });
  it('should toggle mute state correctly', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useAudio.useAudio)());
    (0, _react.act)(() => {
      result.current.toggleMute();
    });
    expect(result.current.isMuted).toBe(true);
    (0, _react.act)(() => {
      result.current.toggleMute();
    });
    expect(result.current.isMuted).toBe(false);
  });
  it('should handle audio context creation', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useAudio.useAudio)());

    // Audio context should be created
    expect(global.AudioContext).toHaveBeenCalled();
  });
  it('should not play sounds when muted', () => {
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useAudio.useAudio)());
    (0, _react.act)(() => {
      result.current.toggleMute();
    });

    // Should not throw when trying to play while muted
    expect(() => {
      (0, _react.act)(() => {
        result.current.playNote(440, 0.5);
      });
    }).not.toThrow();
  });
  it('should handle audio context errors gracefully', () => {
    // Mock AudioContext to throw error
    global.AudioContext = jest.fn(() => {
      throw new Error('AudioContext not supported');
    });
    expect(() => {
      (0, _react.renderHook)(() => (0, _useAudio.useAudio)());
    }).not.toThrow();
  });
  it('should cleanup audio context on unmount', () => {
    const mockClose = jest.fn();
    global.AudioContext = jest.fn(() => ({
      createOscillator: jest.fn(() => ({
        connect: jest.fn(),
        start: jest.fn(),
        stop: jest.fn(),
        frequency: {
          setValueAtTime: jest.fn(),
          exponentialRampToValueAtTime: jest.fn()
        },
        type: 'sine'
      })),
      createGain: jest.fn(() => ({
        connect: jest.fn(),
        gain: {
          setValueAtTime: jest.fn(),
          exponentialRampToValueAtTime: jest.fn()
        }
      })),
      destination: {},
      currentTime: 0,
      state: 'running',
      resume: jest.fn(() => Promise.resolve()),
      suspend: jest.fn(() => Promise.resolve()),
      close: mockClose
    }));
    const {
      unmount
    } = (0, _react.renderHook)(() => (0, _useAudio.useAudio)());
    unmount();
    expect(mockClose).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,