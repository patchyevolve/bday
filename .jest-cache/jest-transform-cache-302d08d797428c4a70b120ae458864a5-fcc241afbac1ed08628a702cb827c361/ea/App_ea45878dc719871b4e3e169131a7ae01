2888d3066daaaf686aa70d3acd4f6ee3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _celebrationStore = _interopRequireDefault(require("./store/celebrationStore"));
var _lucideReact = require("lucide-react");
var _FloatingHeartsBackground = _interopRequireDefault(require("./components/FloatingHeartsBackground"));
var _KukuMessage = _interopRequireDefault(require("./components/KukuMessage"));
var _mediaLoader = require("./utils/mediaLoader");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const BirthdayPianoSurprise = () => {
  const {
    setName,
    setMessage
  } = (0, _celebrationStore.default)();
  const [gameStarted, setGameStarted] = (0, _react.useState)(false);
  const [gameCompleted, setGameCompleted] = (0, _react.useState)(false);
  const [showCelebration, setShowCelebration] = (0, _react.useState)(false);
  // const [currentTile, setCurrentTile] = useState(0); // Unused variable
  const [tilesHit, setTilesHit] = (0, _react.useState)(0);
  const [tilesSpawned, setTilesSpawned] = (0, _react.useState)(0);
  const [score, setScore] = (0, _react.useState)(0);
  const [timeLeft, setTimeLeft] = (0, _react.useState)('');
  const [isUnlocked, setIsUnlocked] = (0, _react.useState)(false);
  const [currentPoem, setCurrentPoem] = (0, _react.useState)('');
  const [fallingTiles, setFallingTiles] = (0, _react.useState)([]);
  const [gameOver, setGameOver] = (0, _react.useState)(false);
  const [lives, setLives] = (0, _react.useState)(3);
  const [endlessMode, setEndlessMode] = (0, _react.useState)(false);
  const [showChoiceMenu, setShowChoiceMenu] = (0, _react.useState)(false);
  const [showSpecialPoem, setShowSpecialPoem] = (0, _react.useState)(false);
  const [showKukuMessage, setShowKukuMessage] = (0, _react.useState)(false);
  const [welcomeMusicStarted, setWelcomeMusicStarted] = (0, _react.useState)(false);
  const [powerUps, setPowerUps] = (0, _react.useState)([]);
  const [activePowerUps, setActivePowerUps] = (0, _react.useState)({
    invincible: {
      active: false,
      timeLeft: 0
    },
    slowMotion: {
      active: false,
      timeLeft: 0
    },
    scoreMultiplier: {
      active: false,
      timeLeft: 0,
      multiplier: 1
    }
  });
  const [combo, setCombo] = (0, _react.useState)(0);
  const [maxCombo, setMaxCombo] = (0, _react.useState)(0);
  const [isMuted, setIsMuted] = (0, _react.useState)(false);

  // Gallery state variables
  const [showPhotoGallery, setShowPhotoGallery] = (0, _react.useState)(false);
  const [showVideoGallery, setShowVideoGallery] = (0, _react.useState)(false);
  const [selectedPhoto, setSelectedPhoto] = (0, _react.useState)(null);
  const [selectedVideo, setSelectedVideo] = (0, _react.useState)(null);
  const [pictures, setPictures] = (0, _react.useState)([]);
  const [videos, setVideos] = (0, _react.useState)([]);
  const [mediaLoading, setMediaLoading] = (0, _react.useState)(true);

  // Generate floating elements for welcome screen
  const floatingElements = (0, _react.useMemo)(() => {
    const elements = [];
    // Hearts
    for (let i = 0; i < 8; i++) {
      elements.push({
        type: 'heart',
        left: Math.random() * 100,
        top: Math.random() * 100,
        animationDelay: Math.random() * 6,
        size: 4 + Math.random() * 2
      });
    }
    // Music notes
    for (let i = 0; i < 6; i++) {
      elements.push({
        type: 'note',
        left: Math.random() * 100,
        top: Math.random() * 100,
        animationDelay: Math.random() * 8,
        size: 3 + Math.random() * 2
      });
    }
    // Sparkles
    for (let i = 0; i < 10; i++) {
      elements.push({
        type: 'sparkle',
        left: Math.random() * 100,
        top: Math.random() * 100,
        animationDelay: Math.random() * 10,
        size: 2 + Math.random() * 1.5
      });
    }
    return elements;
  }, []);
  const audioContextRef = (0, _react.useRef)(null);
  const gameLoopRef = (0, _react.useRef)(null);
  const lastTileSpawnRef = (0, _react.useRef)(0);
  const activeOscillatorsRef = (0, _react.useRef)([]);
  const backgroundMusicRef = (0, _react.useRef)(null);

  // Target date: Setting to a past date to unlock the app
  const targetDate = (0, _react.useMemo)(() => new Date('2025-09-23T00:00:00'), []);

  // Happy Birthday melody (simplified notes) - wrapped in useMemo for performance
  const happyBirthdayNotes = (0, _react.useMemo)(() => [{
    note: 'C',
    frequency: 261.63,
    duration: 500
  }, {
    note: 'C',
    frequency: 261.63,
    duration: 250
  }, {
    note: 'D',
    frequency: 293.66,
    duration: 750
  }, {
    note: 'C',
    frequency: 261.63,
    duration: 750
  }, {
    note: 'F',
    frequency: 349.23,
    duration: 750
  }, {
    note: 'E',
    frequency: 329.63,
    duration: 1500
  }, {
    note: 'C',
    frequency: 261.63,
    duration: 500
  }, {
    note: 'C',
    frequency: 261.63,
    duration: 250
  }, {
    note: 'D',
    frequency: 293.66,
    duration: 750
  }, {
    note: 'C',
    frequency: 261.63,
    duration: 750
  }, {
    note: 'G',
    frequency: 392.00,
    duration: 750
  }, {
    note: 'F',
    frequency: 349.23,
    duration: 1500
  }], []);

  // Power-up types
  const powerUpTypes = (0, _react.useMemo)(() => ({
    heart: {
      emoji: '💖',
      color: 'from-red-400 to-pink-500',
      effect: 'Restore Life'
    },
    star: {
      emoji: '⭐',
      color: 'from-yellow-400 to-orange-500',
      effect: 'Invincible'
    },
    lightning: {
      emoji: '⚡',
      color: 'from-blue-400 to-purple-500',
      effect: 'Slow Motion'
    },
    rainbow: {
      emoji: '🌈',
      color: 'from-purple-400 to-pink-500',
      effect: 'Double Points'
    },
    golden: {
      emoji: '✨',
      color: 'from-yellow-300 to-yellow-600',
      effect: '3x Multiplier'
    }
  }), []);

  // Romantic poems collection
  const poems = (0, _react.useMemo)(() => ["In your eyes, I see the stars,\nIn your smile, my world ignites.\nEvery moment spent with you,\nMakes everything feel right. ✨", "You are my sunshine on cloudy days,\nMy rainbow after every storm.\nWith you, life becomes a beautiful song,\nAnd love takes its perfect form. 🌈", "Like flowers bloom in spring,\nMy love for you grows each day.\nYou're the melody in my heart,\nThe words I long to say. 🌸", "Your laughter is my favorite sound,\nYour happiness, my greatest treasure.\nIn this dance of life we share,\nYou're my rhythm and my measure. 💃", "When I count my blessings,\nI count you twice, maybe thrice.\nYou've made my world so beautiful,\nMy heart's own paradise. 💖", "You're the coffee to my morning,\nThe stars to my night sky.\nWith you, every ordinary moment\nBecomes a reason to fly high. ☕✨", "Time stands still when you're near,\nThe world fades away but you.\nIn your arms I find my home,\nIn your heart, my dreams come true. 🏠💕", "You paint colors in my gray days,\nBring music to my silent nights.\nWith every kiss, every touch,\nYou make everything feel right. 🎨🎵", "Distance means nothing when love means everything,\nMiles apart but hearts as one.\nEvery sunset brings me closer\nTo the day our love has won. 🌅❤️", "In a world of temporary things,\nYou are my constant, my forever.\nThrough seasons change and years go by,\nMy love for you will fade never. 🌿♾️", "You're the answer to my prayers,\nThe wish upon my shooting star.\nNo matter where life takes us,\nYou'll always be my guiding star. ⭐🙏", "Every heartbeat whispers your name,\nEvery breath carries your love.\nYou're my earth, my moon, my sun,\nMy blessing sent from above. 🌍🌙☀️", "In your smile I find my courage,\nIn your voice I hear my song.\nWith you beside me always,\nI know where I belong. 😊🎶", "Love letters written in the stars,\nPromises made with morning dew.\nEvery day I fall deeper,\nMore madly in love with you. 💌⭐", "You're my favorite notification,\nMy sweetest dream come true.\nIn this crazy, busy world,\nMy peace is found in you. 📱💤"], []);

  // Special custom poem
  const specialPoem = (0, _react.useMemo)(() => "In depths of heart, a love resides,\nA flame that burns, a love that guides.\nA love so pure, so strong, so true,\nA love for you, forever new.\n\nWith every beat, my heart does yearn,\nFor your sweet love, a wish to learn.\nA love that grows, with every day,\nA love that shines, come what may.\n\nYour eyes, a star, a guiding light,\nYour smile, a sun, so warm and bright.\nYour touch, a solace, soft and deep,\nYour love, a treasure, I'll forever keep.\n\nSo let us vow, to love and care,\nTo face life's storms, together we'll share.\nA bond unbroken, a love divine,\nForever yours, and ever mine. 💖", []);

  // Check if app should be unlocked
  (0, _react.useEffect)(() => {
    // Force unlock the app
    setIsUnlocked(true);
    const checkUnlockStatus = () => {
      const now = new Date();
      if (now >= targetDate) {
        setIsUnlocked(true);
      } else {
        const timeDiff = targetDate - now;
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor(timeDiff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
        const minutes = Math.floor(timeDiff % (1000 * 60 * 60) / (1000 * 60));
        const seconds = Math.floor(timeDiff % (1000 * 60) / 1000);
        setTimeLeft(`${days}d ${hours}h ${minutes}m ${seconds}s`);
      }
    };
    checkUnlockStatus();
    const interval = setInterval(checkUnlockStatus, 1000);
    return () => clearInterval(interval);
  }, [targetDate]);

  // Select random poem on component mount
  (0, _react.useEffect)(() => {
    if (isUnlocked) {
      const randomPoem = poems[Math.floor(Math.random() * poems.length)];
      setCurrentPoem(randomPoem);
    }
  }, [isUnlocked, poems]);

  // Play gentle welcome music (without dingling sound)
  const playWelcomeMusic = (0, _react.useCallback)(() => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    }
    const audioContext = audioContextRef.current;
    const playGentleChord = (frequencies, delay = 0) => {
      setTimeout(() => {
        frequencies.forEach((freq, index) => {
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
          oscillator.type = 'sine';
          const now = audioContext.currentTime;
          gainNode.gain.setValueAtTime(0, now);
          gainNode.gain.linearRampToValueAtTime(0.05, now + 0.2);
          gainNode.gain.exponentialRampToValueAtTime(0.0001, now + 2.5);
          oscillator.start(now);
          oscillator.stop(now + 2.5);
        });
      }, delay);
    };

    // Play a softer, more harmonious melody
    playGentleChord([261.63, 329.63, 392.00], 0); // C major chord
    playGentleChord([293.66, 369.99, 440.00], 1200); // D major chord  
    playGentleChord([261.63, 329.63, 392.00], 2400); // C major chord
  }, []);

  // Update active power-ups timer
  (0, _react.useEffect)(() => {
    if (gameStarted && !gameOver && !gameCompleted) {
      const interval = setInterval(() => {
        setActivePowerUps(prev => {
          const updated = {
            ...prev
          };
          Object.keys(updated).forEach(key => {
            if (updated[key].active && updated[key].timeLeft > 0) {
              updated[key].timeLeft -= 100;
              if (updated[key].timeLeft <= 0) {
                updated[key].active = false;
                if (key === 'scoreMultiplier') {
                  updated[key].multiplier = 1;
                }
              }
            }
          });
          return updated;
        });
      }, 100);
      return () => clearInterval(interval);
    }
  }, [gameStarted, gameOver, gameCompleted]);

  // Spawn power-ups randomly
  const spawnPowerUp = (0, _react.useCallback)(() => {
    if (Math.random() < 0.15) {
      // 15% chance to spawn power-up
      const types = Object.keys(powerUpTypes);
      const randomType = types[Math.floor(Math.random() * types.length)];
      const newPowerUp = {
        id: Date.now() + Math.random(),
        type: randomType,
        column: Math.floor(Math.random() * 4),
        y: -80,
        speed: 3
      };
      setPowerUps(prev => [...prev, newPowerUp]);
    }
  }, [powerUpTypes]);

  // Handle power-up collection
  const collectPowerUp = (0, _react.useCallback)((powerUpId, type) => {
    setPowerUps(prev => {
      const powerUp = prev.find(p => p.id === powerUpId);
      if (!powerUp) return prev;

      // Add visual collection effect
      const collectionElement = document.createElement('div');
      collectionElement.className = 'absolute pointer-events-none z-50';
      collectionElement.style.left = `${powerUp.column * 25 + 12.5}%`;
      collectionElement.style.top = `${powerUp.y + 30}px`;
      collectionElement.innerHTML = `
        <div class="text-3xl animate-bounce" style="animation-duration: 0.8s;">
          ${powerUpTypes[type].emoji}
        </div>
        <div class="text-yellow-300 text-xl animate-ping" style="animation-duration: 1s;">
          ✨✨✨
        </div>
      `;
      document.querySelector('.game-area').appendChild(collectionElement);

      // Remove collection effect after animation
      setTimeout(() => {
        if (collectionElement.parentNode) {
          collectionElement.parentNode.removeChild(collectionElement);
        }
      }, 1500);
      return prev.filter(p => p.id !== powerUpId);
    });
    switch (type) {
      case 'heart':
        setLives(prev => Math.min(prev + 1, 5)); // Max 5 lives
        break;
      case 'star':
        setActivePowerUps(prev => ({
          ...prev,
          invincible: {
            active: true,
            timeLeft: 5000
          }
        }));
        break;
      case 'lightning':
        setActivePowerUps(prev => ({
          ...prev,
          slowMotion: {
            active: true,
            timeLeft: 8000
          }
        }));
        break;
      case 'rainbow':
        setActivePowerUps(prev => ({
          ...prev,
          scoreMultiplier: {
            active: true,
            timeLeft: 10000,
            multiplier: 2
          }
        }));
        break;
      case 'golden':
        setActivePowerUps(prev => ({
          ...prev,
          scoreMultiplier: {
            active: true,
            timeLeft: 8000,
            multiplier: 3
          }
        }));
        break;
      default:
        break;
    }

    // Play collection sound
    try {
      playNote(523.25, 200); // High C
    } catch (error) {
      console.log('Audio playback failed:', error);
    }
  }, [powerUpTypes]);
  const playNote = (frequency, duration) => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    }
    const audioContext = audioContextRef.current;
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
    oscillator.type = 'sine';
    const now = audioContext.currentTime;

    // ADSR envelope for smoother sound with lower volume for harmony
    gainNode.gain.setValueAtTime(0, now);
    gainNode.gain.linearRampToValueAtTime(0.15, now + 0.01); // Lower attack volume
    gainNode.gain.exponentialRampToValueAtTime(0.05, now + 0.1); // Lower decay
    gainNode.gain.setValueAtTime(0.05, now + duration / 1000 - 0.1); // Lower sustain
    gainNode.gain.exponentialRampToValueAtTime(0.00001, now + duration / 1000); // Release

    oscillator.start(now);
    oscillator.stop(now + duration / 1000);

    // Add to active oscillators array
    activeOscillatorsRef.current.push(oscillator);

    // Remove from active array when note ends
    oscillator.onended = () => {
      activeOscillatorsRef.current = activeOscillatorsRef.current.filter(osc => osc !== oscillator);
    };

    // Clean up old oscillators (keep max 6 simultaneous notes for performance)
    if (activeOscillatorsRef.current.length > 6) {
      const oldestOsc = activeOscillatorsRef.current.shift();
      try {
        oldestOsc.stop();
      } catch (e) {
        // Already stopped
      }
    }
  };

  // Play background music with Happy Birthday melody
  const playBackgroundMusic = (0, _react.useCallback)(() => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    }

    // Stop any existing background music
    if (backgroundMusicRef.current) {
      clearTimeout(backgroundMusicRef.current);
    }
    const playMelodyNote = (noteIndex = 0) => {
      if (noteIndex >= happyBirthdayNotes.length) {
        // Restart melody after a pause
        backgroundMusicRef.current = setTimeout(() => playMelodyNote(0), 2000);
        return;
      }
      const note = happyBirthdayNotes[noteIndex];
      const audioContext = audioContextRef.current;
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      oscillator.frequency.setValueAtTime(note.frequency, audioContext.currentTime);
      oscillator.type = 'sine';
      const now = audioContext.currentTime;

      // Softer background music volume
      gainNode.gain.setValueAtTime(0, now);
      gainNode.gain.linearRampToValueAtTime(isMuted ? 0.00001 : 0.08, now + 0.05); // Gentle attack
      gainNode.gain.exponentialRampToValueAtTime(isMuted ? 0.00001 : 0.04, now + 0.2); // Soft decay
      gainNode.gain.setValueAtTime(isMuted ? 0.00001 : 0.04, now + note.duration / 1000 - 0.1); // Sustain
      gainNode.gain.exponentialRampToValueAtTime(0.00001, now + note.duration / 1000); // Release

      oscillator.start(now);
      oscillator.stop(now + note.duration / 1000);

      // Schedule next note
      backgroundMusicRef.current = setTimeout(() => playMelodyNote(noteIndex + 1), note.duration);
    };
    playMelodyNote(0);
  }, [happyBirthdayNotes, isMuted]);

  // Stop background music
  const stopBackgroundMusic = (0, _react.useCallback)(() => {
    if (backgroundMusicRef.current) {
      clearTimeout(backgroundMusicRef.current);
      backgroundMusicRef.current = null;
    }
  }, []);

  // Start background music when celebration screen shows
  (0, _react.useEffect)(() => {
    if (showCelebration && !isMuted) {
      // Small delay to ensure the screen has rendered
      const timer = setTimeout(() => {
        playBackgroundMusic();
      }, 500);
      return () => clearTimeout(timer);
    } else if (!showCelebration) {
      stopBackgroundMusic();
    }
  }, [showCelebration, isMuted, playBackgroundMusic, stopBackgroundMusic]);

  // Load media files only once on component mount
  (0, _react.useEffect)(() => {
    const loadMedia = async () => {
      setMediaLoading(true);
      try {
        const mediaData = await (0, _mediaLoader.loadMediaFiles)();
        console.log('Loaded media data:', mediaData);
        setPictures(mediaData.pictures);
        setVideos(mediaData.videos);
        console.log('Videos set:', mediaData.videos);
      } catch (error) {
        console.error('Error loading media:', error);
        // Fallback to empty arrays
        setPictures([]);
        setVideos([]);
      } finally {
        setMediaLoading(false);
      }
    };
    loadMedia();
  }, []); // Only run once on mount

  // Game loop for falling tiles - optimized with interval instead of requestAnimationFrame
  const gameLoop = (0, _react.useCallback)(() => {
    if (!gameStarted || gameOver || gameCompleted) return;
    const currentTime = Date.now();

    // Spawn new tiles every 2 seconds, but increase frequency as game progresses
    const baseInterval = activePowerUps.slowMotion.active ? 2500 : 1500;
    const spawnInterval = Math.max(baseInterval - tilesSpawned * 100, 800); // Faster spawning over time

    // In endless mode, keep spawning tiles indefinitely
    // In normal mode, spawn tiles until we have enough for the full melody
    const shouldSpawn = endlessMode ? true : tilesSpawned < happyBirthdayNotes.length + 2; // Extra tiles to ensure completion

    if (currentTime - lastTileSpawnRef.current > spawnInterval && shouldSpawn) {
      const noteIndex = endlessMode ? tilesSpawned % happyBirthdayNotes.length : Math.min(tilesSpawned, happyBirthdayNotes.length - 1);
      const newTile = {
        id: Date.now() + Math.random(),
        // Better unique ID
        note: happyBirthdayNotes[noteIndex],
        column: Math.floor(Math.random() * 4),
        // 4 columns
        y: -80,
        // Start above screen
        speed: activePowerUps.slowMotion.active ? 2 + Math.floor(tilesSpawned / 5) : 4 + Math.floor(tilesSpawned / 3),
        // Slower in slow motion
        noteIndex: noteIndex,
        spawned: true
      };
      setFallingTiles(prev => [...prev, newTile]);
      setTilesSpawned(prev => prev + 1);
      lastTileSpawnRef.current = currentTime;

      // Chance to spawn power-up
      spawnPowerUp();
    }

    // Update tile positions
    setFallingTiles(prev => prev.map(tile => ({
      ...tile,
      y: tile.y + tile.speed
    })).filter(tile => {
      // Remove tiles that hit bottom (lose life unless invincible)
      if (tile.y > 450) {
        // Adjusted for game container height
        if (!activePowerUps.invincible.active) {
          setLives(prevLives => {
            const newLives = prevLives - 1;
            if (newLives <= 0) {
              setGameOver(true);
            }
            return newLives;
          });
          setCombo(0); // Reset combo on miss
        }
        return false;
      }
      return true;
    }));

    // Update power-up positions
    setPowerUps(prev => prev.map(powerUp => ({
      ...powerUp,
      y: powerUp.y + powerUp.speed
    })).filter(powerUp => powerUp.y < 500)); // Remove power-ups that fall off screen
  }, [gameStarted, gameOver, gameCompleted, tilesSpawned, happyBirthdayNotes, endlessMode, activePowerUps.slowMotion.active, activePowerUps.invincible.active, spawnPowerUp]);

  // Start game loop when game starts - using setInterval for smoother performance
  (0, _react.useEffect)(() => {
    if (gameStarted && !gameOver && !gameCompleted) {
      gameLoopRef.current = setInterval(gameLoop, 50); // 20 FPS for smoother performance
    }
    return () => {
      if (gameLoopRef.current) {
        clearInterval(gameLoopRef.current);
      }
    };
  }, [gameStarted, gameOver, gameCompleted, gameLoop]);
  const handleTileClick = (0, _react.useCallback)(tileId => {
    // Play the note immediately for better feedback
    try {
      playNote(261.63, 300); // Quick feedback sound
    } catch (error) {
      console.log('Audio playback failed:', error);
    }
    setFallingTiles(prev => {
      const tileIndex = prev.findIndex(tile => tile.id === tileId);
      if (tileIndex === -1) return prev;
      const tile = prev[tileIndex];

      // Play the actual note
      setTimeout(() => {
        try {
          playNote(tile.note.frequency, tile.note.duration);
        } catch (error) {
          console.log('Audio playback failed:', error);
        }
      }, 50);

      // Add visual feedback - create a burst effect
      const burstElement = document.createElement('div');
      burstElement.className = 'absolute pointer-events-none z-50';
      burstElement.style.left = `${tile.column * 25 + 12.5}%`;
      burstElement.style.top = `${tile.y + 30}px`;
      burstElement.innerHTML = `
        <div class="text-2xl animate-bounce" style="animation-duration: 0.6s;">
          ${tile.note.note}
        </div>
        <div class="text-yellow-300 text-lg animate-ping" style="animation-duration: 0.8s;">
          ✨
        </div>
      `;
      document.querySelector('.game-area').appendChild(burstElement);

      // Remove burst effect after animation
      setTimeout(() => {
        if (burstElement.parentNode) {
          burstElement.parentNode.removeChild(burstElement);
        }
      }, 1000);

      // Remove the clicked tile immediately
      return prev.filter(t => t.id !== tileId);
    });

    // Update score with multiplier and combo
    const baseScore = 10;
    const multiplier = activePowerUps.scoreMultiplier.active ? activePowerUps.scoreMultiplier.multiplier : 1;
    const comboBonus = Math.floor(combo / 5); // Bonus every 5 combo
    const finalScore = baseScore * multiplier + comboBonus;
    setScore(prevScore => prevScore + finalScore);
    setCombo(prev => {
      const newCombo = prev + 1;
      setMaxCombo(current => Math.max(current, newCombo));
      return newCombo;
    });
    setTilesHit(prevHit => {
      const newHit = prevHit + 1;

      // Check if game is completed - need to hit all tiles
      if (newHit >= happyBirthdayNotes.length) {
        if (endlessMode) {
          // In endless mode, continue spawning tiles
          setTilesSpawned(0);
          setTilesHit(0);
          return 0; // Reset hit count for endless mode
        } else {
          // Show choice menu after game completion
          setTimeout(() => {
            setGameCompleted(true);
            setShowChoiceMenu(true);
            setName("Beautiful Wifey");
            setMessage("Happy Birthday! You've unlocked a special surprise.");
          }, 500);
        }
      }
      return newHit;
    });
  }, [happyBirthdayNotes.length, endlessMode, activePowerUps.scoreMultiplier.active, activePowerUps.scoreMultiplier.multiplier, combo, setName, setMessage]);

  // Handler for opening Kuku message
  const openKukuMessage = (0, _react.useCallback)(() => {
    console.log('Opening Kuku message, current state:', showKukuMessage);
    setShowKukuMessage(true);
    console.log('Kuku message state set to true');
  }, [showKukuMessage]);
  const resetGame = () => {
    setGameStarted(false);
    setGameCompleted(false);
    setShowCelebration(false);
    setScore(0);
    setFallingTiles([]);
    setGameOver(false);
    setLives(3);
    setTilesHit(0);
    setTilesSpawned(0);
    setEndlessMode(false);
    setShowChoiceMenu(false);
    setShowSpecialPoem(false);
    setShowKukuMessage(false);
    setPowerUps([]);
    setActivePowerUps({
      invincible: {
        active: false,
        timeLeft: 0
      },
      slowMotion: {
        active: false,
        timeLeft: 0
      },
      scoreMultiplier: {
        active: false,
        timeLeft: 0,
        multiplier: 1
      }
    });
    setCombo(0);
    setMaxCombo(0);
    lastTileSpawnRef.current = 0;

    // Cancel any running game loop
    if (gameLoopRef.current) {
      clearInterval(gameLoopRef.current);
    }

    // Generate new poem
    const randomPoem = poems[Math.floor(Math.random() * poems.length)];
    setCurrentPoem(randomPoem);
  };
  if (!isUnlocked) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "min-h-screen dynamic-bg flex items-center justify-center px-4 relative overflow-hidden",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
        heartCount: 8,
        opacity: 0.15,
        animationDuration: 10,
        pulseDuration: 12,
        size: "w-4 h-4",
        color: "text-pink-300"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "glass-effect-dark rounded-3xl p-4 sm:p-6 md:p-8 text-center max-w-xs sm:max-w-md w-full relative z-10",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Lock, {
          className: "w-12 h-12 sm:w-16 sm:h-16 text-white mx-auto mb-4"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
          className: "text-2xl sm:text-3xl font-bold text-white mb-4",
          children: "\uD83C\uDF81 Special Surprise"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-white/90 mb-6 text-sm sm:text-base",
          children: "This special birthday surprise is locked until September 23rd!"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "glass-effect rounded-2xl p-3 sm:p-4 mb-6",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Clock, {
            className: "w-6 h-6 sm:w-8 sm:h-8 text-white mx-auto mb-2"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            className: "countdown-display",
            children: timeLeft
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            className: "text-white/80 text-xs sm:text-sm",
            children: "until unlock"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex justify-center space-x-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
            className: "w-5 h-5 sm:w-6 sm:h-6 text-red-300 animate-pulse"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
            className: "w-5 h-5 sm:w-6 sm:h-6 text-pink-300 animate-pulse",
            style: {
              animationDelay: '0.5s'
            }
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
            className: "w-5 h-5 sm:w-6 sm:h-6 text-red-300 animate-pulse",
            style: {
              animationDelay: '1s'
            }
          })]
        })]
      })]
    });
  }
  if (showCelebration) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "min-h-screen dynamic-bg flex items-center justify-center relative overflow-hidden py-8",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "absolute inset-0 bg-black/10"
        }), floatingElements.map((element, i) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "absolute pointer-events-none",
          style: {
            left: `${element.left}%`,
            top: `${element.top}%`,
            animation: `welcomeFloat 12s ease-in-out infinite`,
            animationDelay: `${element.animationDelay}s`
          },
          children: [element.type === 'heart' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
            className: `text-pink-300 animate-pulse floating-heart`,
            style: {
              width: `${element.size * 4}px`,
              height: `${element.size * 4}px`,
              animationDuration: '3s'
            }
          }), element.type === 'note' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Music, {
            className: `text-blue-200 animate-bounce floating-music`,
            style: {
              width: `${element.size * 4}px`,
              height: `${element.size * 4}px`,
              animationDuration: '2.5s'
            }
          }), element.type === 'sparkle' && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `bg-yellow-300 rounded-full animate-ping floating-sparkle`,
            style: {
              width: `${element.size * 2}px`,
              height: `${element.size * 2}px`,
              animationDuration: '4s'
            }
          })]
        }, i)), [...Array(10)].map((_, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
          className: `absolute w-8 h-8 text-pink-400 animate-bounce floating-heart`,
          style: {
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 3}s`,
            animationDuration: `${2 + Math.random() * 2}s`
          }
        }, `celebration-${i}`)), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "relative z-10 text-center max-w-xs sm:max-w-md lg:max-w-lg mx-4 w-full mt-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 mb-6 sm:mb-8",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
              className: "text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-4 animate-pulse neon-title",
              children: "\uD83C\uDF89 HAPPY BIRTHDAY! \uD83C\uDF89"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-base sm:text-lg md:text-xl text-white/80 mb-6 sm:mb-8 soft-subtitle",
              children: "To My Beautiful Wifey"
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                onClick: () => {
                  setShowPhotoGallery(true);
                },
                className: "group relative overflow-hidden rounded-2xl h-32 sm:h-40 transition-all duration-300 hover:scale-105",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 grid grid-cols-2 gap-1 p-2",
                  children: pictures.slice(0, 4).map((picture, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "relative overflow-hidden rounded-lg",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                      src: picture.url,
                      alt: `Preview ${index + 1}`,
                      className: "w-full h-full object-cover filter blur-sm group-hover:blur-none transition-all duration-300"
                    })
                  }, picture.id))
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "absolute inset-0 bg-black/40 group-hover:bg-black/20 transition-all duration-300 flex flex-col items-center justify-center backdrop-blur-sm",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-4xl mb-2 group-hover:scale-110 transition-transform duration-300",
                    children: "\uD83D\uDCF8"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white font-bold text-lg drop-shadow-lg",
                    children: "Photo Gallery"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white/90 text-sm drop-shadow-md",
                    children: "View memories"
                  })]
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                onClick: () => {
                  setShowVideoGallery(true);
                },
                className: "group relative overflow-hidden rounded-2xl h-32 sm:h-40 transition-all duration-300 hover:scale-105",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 p-2",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "relative w-full h-full overflow-hidden rounded-lg",
                    children: videos.length > 0 ? /*#__PURE__*/(0, _jsxRuntime.jsx)("video", {
                      src: videos[0]?.url,
                      className: "w-full h-full object-cover filter blur-sm group-hover:blur-none transition-all duration-300",
                      muted: true,
                      loop: true,
                      autoPlay: true,
                      playsInline: true,
                      preload: "metadata",
                      onError: e => {
                        console.log('Video preview error:', e);
                        e.target.style.display = 'none';
                      }
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                      className: "w-full h-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center",
                      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                        className: "text-4xl",
                        children: "\uD83C\uDFA5"
                      })
                    })
                  })
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "absolute inset-0 bg-black/40 group-hover:bg-black/20 transition-all duration-300 flex flex-col items-center justify-center backdrop-blur-sm",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-4xl mb-2 group-hover:scale-110 transition-transform duration-300",
                    children: "\uD83C\uDFA5"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white font-bold text-lg drop-shadow-lg",
                    children: "Video Gallery"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white/90 text-sm drop-shadow-md",
                    children: "Watch moments"
                  })]
                })]
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "mb-6",
              children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                onClick: e => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('Kuku button clicked!');
                  openKukuMessage();
                },
                className: "btn-solid-3 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-3xl h-24 sm:h-23 text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 rounded-2xl shadow-2xl group-hover:shadow-pink-500/50 transition-all duration-300",
                  style: {
                    boxShadow: '0 0 30px rgba(238, 20, 129, 0.4), 0 0 60px rgba(147, 51, 234, 0.2)'
                  }
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "relative z-10 flex flex-col items-center justify-center h-full",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-3xl sm:text-4xl mb-1 group-hover:scale-110 transition-transform duration-300",
                    children: "\uD83D\uDC96"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white font-bold text-lg sm:text-xl drop-shadow-lg group-hover:drop-shadow-2xl transition-all duration-300",
                    children: "For My Beautiful Kuku"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white/90 text-sm drop-shadow-md",
                    children: "Special message"
                  })]
                })]
              })
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 mb-6 sm:mb-8",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h3", {
              className: "text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4 flex items-center justify-center flex-wrap",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
                className: "w-5 h-5 sm:w-6 sm:h-6 mr-1 sm:mr-2 text-red-300"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                className: "text-center",
                children: "A Poem Just For You"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
                className: "w-5 h-5 sm:w-6 sm:h-6 ml-1 sm:ml-2 text-red-300"
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-white/90 whitespace-pre-line text-sm sm:text-base md:text-lg leading-relaxed",
              children: currentPoem
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              onClick: () => {
                stopBackgroundMusic();
                resetGame();
              },
              className: "btn-solid-1 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
              children: "\uD83C\uDFB5 Play Again"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              onClick: () => {
                const randomPoem = poems[Math.floor(Math.random() * poems.length)];
                setCurrentPoem(randomPoem);
              },
              className: "btn-solid-2 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
              children: "\uD83D\uDC9D New Poem"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              onClick: () => setShowSpecialPoem(true),
              className: "btn-solid-3 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
              children: "\u2728 Special Poem"
            })]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_KukuMessage.default, {
          isVisible: showKukuMessage,
          onClose: () => setShowKukuMessage(false)
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: async () => {
            console.log('Mute button clicked, current state:', isMuted);
            const newMutedState = !isMuted;
            setIsMuted(newMutedState);

            // Handle audio context resume if needed
            if (!newMutedState && audioContextRef.current && audioContextRef.current.state === 'suspended') {
              try {
                await audioContextRef.current.resume();
              } catch (error) {
                console.log('Failed to resume audio context:', error);
              }
            }

            // Stop current background music if muting
            if (newMutedState) {
              stopBackgroundMusic();
            } else {
              // Restart background music if unmuting
              setTimeout(() => {
                playBackgroundMusic();
              }, 100); // Small delay to ensure state is updated
            }
          },
          className: "fixed bottom-6 left-6 z-50 bg-black/50 hover:bg-black/70 backdrop-blur-sm rounded-full p-4 transition-all duration-200 hover:scale-110 group shadow-lg",
          title: isMuted ? "Unmute music" : "Mute music",
          children: isMuted ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("svg", {
            className: "w-6 h-6 text-white/80 group-hover:text-white",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"
            })]
          }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
            className: "w-6 h-6 text-white/80 group-hover:text-white",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"
            })
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `fixed inset-0 z-30 transition-transform duration-500 ease-in-out ${showSpecialPoem ? 'translate-x-0' : 'translate-x-full'}`,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "absolute inset-0 bg-black/20 backdrop-blur-sm",
            onClick: () => setShowSpecialPoem(false)
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "absolute right-0 top-0 h-full w-full max-w-2xl dynamic-bg shadow-2xl overflow-y-auto",
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "p-8",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex justify-between items-center mb-6",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
                  className: "text-3xl font-bold text-white",
                  children: "\u2728 Special Poem \u2728"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                  onClick: () => setShowSpecialPoem(false),
                  className: "glass-effect hover:glass-effect-dark text-white rounded-full p-2 transition-all duration-300 hover:scale-110",
                  children: "\u2715"
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "glass-effect-dark rounded-3xl p-8",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "text-center mb-6",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-6xl mb-4",
                    children: "\uD83D\uDC96"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
                    className: "text-2xl font-bold text-white mb-2",
                    children: "From My Heart to Yours"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "w-24 h-1 bg-gradient-to-r from-pink-300 to-red-300 mx-auto rounded-full"
                  })]
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-white/95 text-lg leading-relaxed whitespace-pre-line font-serif text-center",
                  children: specialPoem
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "text-center mt-8",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "w-24 h-1 bg-gradient-to-r from-pink-300 to-red-300 mx-auto rounded-full mb-4"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                    className: "text-white/80 italic text-sm",
                    children: "Written with all my love \uD83D\uDC95"
                  })]
                })]
              })]
            })
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "fixed bottom-4 right-4 z-20",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "glass-effect rounded-2xl px-4 py-2 animate-pulse",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-white/90 text-sm font-medium italic",
              children: "I love you my darling kuku \uD83D\uDC95"
            })
          })
        })]
      }), showPhotoGallery && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "fixed inset-0 z-[9999] bg-black/80 backdrop-blur-md",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: () => setShowPhotoGallery(false),
          className: "absolute top-6 right-6 z-[10000] text-white/80 hover:text-white bg-black/50 hover:bg-black/70 rounded-full p-4 transition-all duration-200 hover:scale-110",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
            className: "w-8 h-8",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M6 18L18 6M6 6l12 12"
            })
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "absolute top-6 left-6 z-[10000]",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("h3", {
            className: "text-3xl font-bold text-white flex items-center gap-3",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-4xl",
              children: "\uD83D\uDCF8"
            }), "Photo Gallery"]
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "w-full h-full p-6 pt-24 overflow-y-auto",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "columns-2 sm:columns-3 md:columns-4 lg:columns-5 xl:columns-6 gap-4 space-y-4",
            children: pictures.map((picture, index) => {
              // Random heights for masonry effect
              const heights = ['h-48', 'h-64', 'h-56', 'h-72', 'h-60', 'h-80'];
              const randomHeight = heights[index % heights.length];
              return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: `relative ${randomHeight} rounded-2xl overflow-hidden group cursor-pointer transform hover:scale-105 transition-all duration-300 shadow-xl hover:shadow-2xl break-inside-avoid mb-4`,
                onClick: () => setSelectedPhoto(picture),
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                  src: picture.url,
                  alt: picture.alt || `Memory ${index + 1}`,
                  className: "w-full h-full object-cover"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "absolute bottom-3 left-3 right-3",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                      className: "text-white text-sm font-semibold drop-shadow-lg",
                      children: picture.alt || `Memory ${index + 1}`
                    })
                  })
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 ring-2 ring-transparent group-hover:ring-purple-400/60 rounded-2xl transition-all duration-300"
                })]
              }, picture.id);
            })
          })
        })]
      }), showVideoGallery && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "fixed inset-0 z-[9999] bg-black/80 backdrop-blur-md",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: () => setShowVideoGallery(false),
          className: "absolute top-6 right-6 z-[10000] text-white/80 hover:text-white bg-black/50 hover:bg-black/70 rounded-full p-4 transition-all duration-200 hover:scale-110",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
            className: "w-8 h-8",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M6 18L18 6M6 6l12 12"
            })
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "absolute top-6 left-6 z-[10000]",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("h3", {
            className: "text-3xl font-bold text-white flex items-center gap-3",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-4xl",
              children: "\uD83C\uDFA5"
            }), "Video Gallery"]
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "w-full h-full p-6 pt-24 overflow-y-auto",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "columns-1 sm:columns-2 lg:columns-3 xl:columns-4 gap-6 space-y-6",
            children: [console.log('Rendering videos:', videos), videos.length === 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "text-white text-center py-8",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                children: "No videos found. Loading..."
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-sm text-white/70 mt-2",
                children: "Check console for loading errors"
              })]
            }), videos.map((video, index) => {
              // Different aspect ratios for variety
              const aspectRatios = ['aspect-video', 'aspect-square', 'aspect-[4/5]', 'aspect-[3/4]'];
              const randomAspect = aspectRatios[index % aspectRatios.length];
              return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: `relative ${randomAspect} rounded-2xl overflow-hidden group cursor-pointer transform hover:scale-105 transition-all duration-300 shadow-xl hover:shadow-2xl break-inside-avoid mb-6`,
                onClick: () => setSelectedVideo(video),
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("video", {
                  src: video.url,
                  className: "w-full h-full object-cover",
                  muted: true,
                  loop: true,
                  preload: "metadata",
                  playsInline: true,
                  onMouseEnter: e => {
                    e.target.currentTime = 0;
                    e.target.play().catch(err => console.log('Video play failed:', err));
                  },
                  onMouseLeave: e => {
                    e.target.pause();
                    e.target.currentTime = 0;
                  },
                  onError: e => {
                    console.log('Video error:', e, video.url);
                    e.target.parentElement.style.display = 'none';
                  },
                  onLoadedMetadata: e => {
                    e.target.currentTime = 0.1;
                  },
                  onCanPlay: e => {
                    console.log('Video can play:', video.url);
                  }
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "absolute bottom-3 left-3 right-3",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                      className: "text-white text-sm font-semibold drop-shadow-lg",
                      children: video.alt || `Video ${index + 1}`
                    })
                  })
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 flex items-center justify-center",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "bg-black/50 group-hover:bg-black/70 rounded-full p-6 transition-all duration-300",
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
                      className: "w-12 h-12 text-white transform group-hover:scale-110 transition-transform",
                      fill: "none",
                      stroke: "currentColor",
                      viewBox: "0 0 24 24",
                      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        strokeWidth: 2,
                        d: "M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                      })
                    })
                  })
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "absolute inset-0 ring-2 ring-transparent group-hover:ring-blue-400/60 rounded-2xl transition-all duration-300"
                })]
              }, video.id);
            })]
          })
        })]
      }), selectedPhoto && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "fixed inset-0 z-[10001] bg-black/95 backdrop-blur-lg flex items-center justify-center p-4",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "relative max-w-[95vw] max-h-[95vh] w-full h-full",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => setSelectedPhoto(null),
            className: "absolute top-4 right-4 text-white/80 hover:text-white bg-black/60 hover:bg-black/80 rounded-full p-4 transition-all duration-200 hover:scale-110 z-10",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
              className: "w-8 h-8",
              fill: "none",
              stroke: "currentColor",
              viewBox: "0 0 24 24",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 2,
                d: "M6 18L18 6M6 6l12 12"
              })
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
            src: selectedPhoto.url,
            alt: selectedPhoto.alt,
            className: "w-full h-full object-contain rounded-2xl shadow-2xl"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "absolute bottom-6 left-6 right-6 bg-black/70 backdrop-blur-sm rounded-2xl p-6",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-white text-xl font-semibold",
              children: selectedPhoto.alt || 'Memory'
            })
          })]
        })
      }), selectedVideo && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "fixed inset-0 z-[10001] bg-black/95 backdrop-blur-lg flex items-center justify-center p-4",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "relative max-w-[95vw] max-h-[95vh] w-full h-full",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => setSelectedVideo(null),
            className: "absolute top-4 right-4 text-white/80 hover:text-white bg-black/60 hover:bg-black/80 rounded-full p-4 transition-all duration-200 hover:scale-110 z-10",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
              className: "w-8 h-8",
              fill: "none",
              stroke: "currentColor",
              viewBox: "0 0 24 24",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 2,
                d: "M6 18L18 6M6 6l12 12"
              })
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("video", {
            src: selectedVideo.url,
            controls: true,
            autoPlay: true,
            className: "w-full h-full object-contain rounded-2xl shadow-2xl"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "absolute bottom-6 left-6 right-6 bg-black/70 backdrop-blur-sm rounded-2xl p-6",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-white text-xl font-semibold",
              children: selectedVideo.alt || 'Video'
            })
          })]
        })
      })]
    });
  }
  if (!gameStarted) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "min-h-screen dynamic-bg flex items-center justify-center relative overflow-hidden",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingHeartsBackground.default, {
        heartCount: 15,
        opacity: 0.25,
        animationDuration: 12,
        pulseDuration: 15,
        size: "w-6 h-6",
        color: "text-pink-200"
      }), floatingElements.map((element, i) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "absolute pointer-events-none",
        style: {
          left: `${element.left}%`,
          top: `${element.top}%`,
          animation: `welcomeFloat 12s ease-in-out infinite`,
          animationDelay: `${element.animationDelay}s`
        },
        children: [element.type === 'heart' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
          className: `text-pink-300 animate-pulse floating-heart`,
          style: {
            width: `${element.size * 4}px`,
            height: `${element.size * 4}px`,
            animationDuration: '3s'
          }
        }), element.type === 'note' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Music, {
          className: `text-blue-200 animate-bounce floating-music`,
          style: {
            width: `${element.size * 4}px`,
            height: `${element.size * 4}px`,
            animationDuration: '2.5s'
          }
        }), element.type === 'sparkle' && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `bg-yellow-300 rounded-full animate-ping floating-sparkle`,
          style: {
            width: `${element.size * 2}px`,
            height: `${element.size * 2}px`,
            animationDuration: '4s'
          }
        })]
      }, i)), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "magical-card glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 text-center max-w-xs sm:max-w-md lg:max-w-lg mx-4 relative z-10 w-full",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
          className: "text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 sm:mb-6 shimmer-title px-2",
          children: "\uD83C\uDF89 HAPPY BIRTHDAY! \uD83C\uDF89"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-base sm:text-lg md:text-xl text-white/80 mb-6 sm:mb-8 soft-subtitle",
          children: "To My Beautiful Wifey"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "mb-4 sm:mb-6",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "flex justify-center space-x-1 mb-3 sm:mb-4",
            children: ['C', 'D', 'E', 'F', 'G'].map((note, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "piano-key w-6 h-12 sm:w-8 sm:h-16 bg-white rounded-b-lg shadow-lg flex items-end justify-center pb-1 sm:pb-2 text-xs font-bold text-gray-700 animate-pulse cursor-pointer",
              style: {
                animationDelay: `${i * 0.2}s`,
                animationDuration: '2s'
              },
              children: note
            }, note))
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Music, {
          className: "w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 text-white mx-auto mb-3 sm:mb-4 animate-bounce"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
          className: "text-xl sm:text-2xl font-bold text-white mb-4 sm:mb-6",
          children: "\uD83C\uDFB5 Falling Piano Tiles"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "space-y-2 sm:space-y-3",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              setGameStarted(true);
              if (!welcomeMusicStarted) {
                playWelcomeMusic();
                setWelcomeMusicStarted(true);
              }
            },
            className: "w-full btn-solid-1 btn-bounce text-white px-8 sm:px-10 py-4 sm:py-5 rounded-full text-xl sm:text-2xl font-bold hover:scale-105 transform transition-all duration-300 shadow-lg",
            children: "\uD83C\uDFB5 Start Playing"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              if (!welcomeMusicStarted) {
                playWelcomeMusic();
                setWelcomeMusicStarted(true);
              }
            },
            className: "btn-solid-2 btn-bounce text-white px-6 sm:px-8 py-3 sm:py-4 rounded-full text-sm sm:text-base font-semibold hover:scale-105 transition-all duration-300",
            style: {
              animationDelay: '0.2s'
            },
            children: "\uD83C\uDFB6 Play Welcome Music"
          })]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "absolute bottom-3 sm:bottom-6 right-3 sm:right-6 z-20",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "glass-effect rounded-xl sm:rounded-2xl px-2 sm:px-4 py-1 sm:py-2",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            className: "text-white/90 text-xs sm:text-sm font-medium italic typewriter",
            children: "Made with love just for you \uD83C\uDFB5"
          })
        })
      })]
    });
  }

  // Choice Menu after completing all tiles
  if (showChoiceMenu && gameCompleted) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "min-h-screen dynamic-bg flex items-center justify-center px-4 relative overflow-hidden",
      children: [floatingElements.map((element, i) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "absolute pointer-events-none",
        style: {
          left: `${element.left}%`,
          top: `${element.top}%`,
          animation: `welcomeFloat 12s ease-in-out infinite`,
          animationDelay: `${element.animationDelay}s`
        },
        children: [element.type === 'heart' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
          className: `text-pink-300 animate-pulse floating-heart`,
          style: {
            width: `${element.size * 4}px`,
            height: `${element.size * 4}px`,
            animationDuration: '3s'
          }
        }), element.type === 'note' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Music, {
          className: `text-blue-200 animate-bounce floating-music`,
          style: {
            width: `${element.size * 4}px`,
            height: `${element.size * 4}px`,
            animationDuration: '2.5s'
          }
        }), element.type === 'sparkle' && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `bg-yellow-300 rounded-full animate-ping floating-sparkle`,
          style: {
            width: `${element.size * 2}px`,
            height: `${element.size * 2}px`,
            animationDuration: '4s'
          }
        })]
      }, i)), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 text-center max-w-xs sm:max-w-md w-full relative z-10",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-4xl sm:text-5xl md:text-6xl mb-3 sm:mb-4",
          children: "\uD83C\uDF89"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
          className: "text-2xl sm:text-3xl font-bold text-white mb-3 sm:mb-4",
          children: "Congratulations!"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-white/90 mb-4 sm:mb-6 text-sm sm:text-base",
          children: "You successfully completed \"Happy Birthday\"!"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "glass-effect rounded-xl sm:rounded-2xl p-3 sm:p-4 mb-4 sm:mb-6",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-white text-base sm:text-lg",
            children: ["Final Score: ", score]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-white/80 text-xs sm:text-sm",
            children: ["Max Combo: ", maxCombo, " \uD83D\uDD25"]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            className: "text-white/80 text-xs sm:text-sm",
            children: "Perfect Performance! \uD83C\uDF1F"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "space-y-2 sm:space-y-3",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              setShowChoiceMenu(false);
              resetGame();
            },
            className: "w-full btn-solid-1 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-base sm:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
            children: "\uD83C\uDFB5 Play Again"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              setEndlessMode(true);
              setShowChoiceMenu(false);
              setGameCompleted(false);
              setTilesHit(0);
              setTilesSpawned(0);
            },
            className: "w-full btn-solid-1 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-base sm:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
            children: "\uD83C\uDFAE Endless Mode"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              setShowChoiceMenu(false);
              setShowCelebration(true);
              playBackgroundMusic();
            },
            className: "w-full btn-solid-2 text-white px-6 py-3 rounded-full text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
            children: "\uD83D\uDC9D See Your Surprise"
          })]
        })]
      })]
    });
  }
  if (gameOver) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "min-h-screen dynamic-bg flex items-center justify-center relative overflow-hidden",
      children: [floatingElements.map((element, i) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "absolute pointer-events-none",
        style: {
          left: `${element.left}%`,
          top: `${element.top}%`,
          animation: `welcomeFloat 12s ease-in-out infinite`,
          animationDelay: `${element.animationDelay}s`
        },
        children: [element.type === 'heart' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
          className: `text-pink-300 animate-pulse floating-heart`,
          style: {
            width: `${element.size * 4}px`,
            height: `${element.size * 4}px`,
            animationDuration: '3s'
          }
        }), element.type === 'note' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Music, {
          className: `text-blue-200 animate-bounce floating-music`,
          style: {
            width: `${element.size * 4}px`,
            height: `${element.size * 4}px`,
            animationDuration: '2.5s'
          }
        }), element.type === 'sparkle' && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `bg-yellow-300 rounded-full animate-ping floating-sparkle`,
          style: {
            width: `${element.size * 2}px`,
            height: `${element.size * 2}px`,
            animationDuration: '4s'
          }
        })]
      }, i)), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "glass-effect-dark rounded-3xl p-8 text-center max-w-md mx-4 relative z-10",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-6xl mb-4",
          children: "\uD83D\uDC94"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
          className: "text-3xl font-bold text-white mb-4",
          children: "Game Over!"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-white/90 mb-4",
          children: "You missed too many tiles!"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "glass-effect rounded-2xl p-4 mb-6",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-white text-lg",
            children: ["Final Score: ", score]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-white/80 text-sm",
            children: ["Max Combo: ", maxCombo, " \uD83D\uDD25"]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-white/80 text-sm",
            children: ["Tiles Hit: ", Math.floor(score / 10)]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-white/80 text-sm mt-2",
            children: ["Lives Available: ", lives]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "space-y-3",
          children: [lives > 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              // Continue playing by using one life
              setGameOver(false);
              setLives(lives - 1);
              // Reset falling tiles
              setFallingTiles([]);
              // Reset combo
              setCombo(0);
              // Start the game loop again
              if (gameLoopRef.current) {
                clearInterval(gameLoopRef.current);
              }
              gameLoopRef.current = setInterval(gameLoop, 50); // 20 FPS for smoother performance
            },
            className: "w-full btn-solid-2 text-white px-8 py-3 rounded-full text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
            children: "\uD83D\uDC96 Continue (Use 1 Life)"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: resetGame,
            className: "w-full btn-solid-1 text-white px-8 py-3 rounded-full text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg",
            children: "\uD83D\uDD04 Try Again"
          })]
        })]
      })]
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "min-h-screen dynamic-bg flex items-center justify-center p-4 relative overflow-hidden",
    children: [floatingElements.map((element, i) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "absolute pointer-events-none",
      style: {
        left: `${element.left}%`,
        top: `${element.top}%`,
        animation: `welcomeFloat 12s ease-in-out infinite`,
        animationDelay: `${element.animationDelay}s`
      },
      children: [element.type === 'heart' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
        className: `text-pink-300 animate-pulse floating-heart`,
        style: {
          width: `${element.size * 4}px`,
          height: `${element.size * 4}px`,
          animationDuration: '3s'
        }
      }), element.type === 'note' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Music, {
        className: `text-blue-200 animate-bounce floating-music`,
        style: {
          width: `${element.size * 4}px`,
          height: `${element.size * 4}px`,
          animationDuration: '2.5s'
        }
      }), element.type === 'sparkle' && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `bg-yellow-300 rounded-full animate-ping floating-sparkle`,
        style: {
          width: `${element.size * 2}px`,
          height: `${element.size * 2}px`,
          animationDuration: '4s'
        }
      })]
    }, i)), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "game-container glass-effect-dark rounded-3xl p-6 w-96 h-[600px] relative overflow-hidden z-10",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex justify-between items-center text-white mb-2",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "score-display glass-effect rounded-xl px-3 py-1",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-xs font-bold",
            children: ["Score: ", score]
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "glass-effect rounded-xl px-3 py-1",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-xs font-semibold",
            children: ["\u2764\uFE0F ", lives]
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "glass-effect rounded-xl px-3 py-1",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-xs font-semibold",
            children: ["Hit: ", tilesHit, "/", endlessMode ? '∞' : happyBirthdayNotes.length]
          })
        }), endlessMode && /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: resetGame,
          className: "glass-effect rounded-xl px-3 py-1 text-xs font-semibold hover:scale-105 transition-all duration-300",
          children: "\uD83D\uDEAA Exit"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex justify-between items-center text-white mb-2",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `glass-effect rounded-xl px-3 py-1 ${combo > 0 ? 'combo-effect' : ''}`,
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-xs font-semibold",
            children: ["\uD83D\uDD25 Combo: ", combo]
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "glass-effect rounded-xl px-3 py-1",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            className: "text-xs font-semibold",
            children: ["\uD83C\uDFC6 Best: ", maxCombo]
          })
        })]
      }), (activePowerUps.invincible.active || activePowerUps.slowMotion.active || activePowerUps.scoreMultiplier.active) && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex justify-center space-x-2 mb-2",
        children: [activePowerUps.invincible.active && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "glass-effect rounded-full px-2 py-1 text-xs font-bold text-yellow-300 animate-pulse",
          children: ["\u2B50 ", Math.ceil(activePowerUps.invincible.timeLeft / 1000), "s"]
        }), activePowerUps.slowMotion.active && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "glass-effect rounded-full px-2 py-1 text-xs font-bold text-blue-300 animate-pulse",
          children: ["\u26A1 ", Math.ceil(activePowerUps.slowMotion.timeLeft / 1000), "s"]
        }), activePowerUps.scoreMultiplier.active && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "glass-effect rounded-full px-2 py-1 text-xs font-bold text-purple-300 animate-pulse",
          children: ["\uD83C\uDF08 ", activePowerUps.scoreMultiplier.multiplier, "x (", Math.ceil(activePowerUps.scoreMultiplier.timeLeft / 1000), "s)"]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: `game-area relative h-[500px] overflow-hidden rounded-2xl ${activePowerUps.invincible.active ? 'ring-4 ring-yellow-400 ring-opacity-60' : ''} ${activePowerUps.slowMotion.active ? 'ring-4 ring-blue-400 ring-opacity-60' : ''}`,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "h-full grid grid-cols-4 gap-1",
          children: [0, 1, 2, 3].map(column => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "relative bg-white/5 border-l border-r border-white/10",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "absolute inset-0 opacity-20",
              children: [...Array(8)].map((_, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "column-line h-16 border-b border-white/10"
              }, i))
            })
          }, column))
        }), fallingTiles.map(tile => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "absolute z-20",
          style: {
            left: `${tile.column * 25 + 0.5}%`,
            top: `${tile.y}px`,
            width: '23%',
            height: '60px'
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => handleTileClick(tile.id),
            onMouseDown: () => handleTileClick(tile.id),
            onTouchStart: e => {
              e.preventDefault();
              handleTileClick(tile.id);
            },
            className: "game-tile w-full h-full text-white font-bold text-lg rounded-lg cursor-pointer select-none",
            style: {
              touchAction: 'manipulation',
              userSelect: 'none',
              WebkitTapHighlightColor: 'transparent'
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "relative z-10",
              children: [tile.note.note, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-xs opacity-90",
                children: "\uD83C\uDFB5"
              })]
            })
          })
        }, tile.id)), powerUps.map(powerUp => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "absolute z-20",
          style: {
            left: `${powerUp.column * 25 + 0.5}%`,
            top: `${powerUp.y}px`,
            width: '23%',
            height: '60px'
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => collectPowerUp(powerUp.id, powerUp.type),
            onMouseDown: () => collectPowerUp(powerUp.id, powerUp.type),
            onTouchStart: e => {
              e.preventDefault();
              collectPowerUp(powerUp.id, powerUp.type);
            },
            className: "power-up w-full h-full text-white font-bold text-2xl rounded-lg cursor-pointer select-none",
            style: {
              touchAction: 'manipulation',
              userSelect: 'none',
              WebkitTapHighlightColor: 'transparent'
            },
            title: powerUpTypes[powerUp.type].effect,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "relative z-10",
              children: powerUpTypes[powerUp.type].emoji
            })
          })
        }, powerUp.id)), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "danger-zone absolute bottom-0 left-0 right-0 h-16 pointer-events-none",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "absolute bottom-1 left-1/2 transform -translate-x-1/2 text-white/90 text-xs font-bold",
            children: "\u26A0\uFE0F Danger Zone \u26A0\uFE0F"
          })
        })]
      }), gameCompleted && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "absolute inset-0 flex items-center justify-center z-30 bg-black/20 backdrop-blur-sm rounded-3xl",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "bg-gradient-to-r from-green-400 to-emerald-500 text-white px-6 py-3 rounded-2xl text-lg font-bold animate-bounce shadow-2xl text-center",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "mb-2",
            children: " Perfect! "
          })
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "absolute bottom-4 right-4 flex space-x-2",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: resetGame,
          className: "glass-effect text-white px-3 py-2 rounded-full hover:scale-105 transition-all duration-300 text-sm",
          children: "\uD83D\uDD04 Reset"
        })
      })]
    })]
  });
};
var _default = exports.default = BirthdayPianoSurprise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY2VsZWJyYXRpb25TdG9yZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbHVjaWRlUmVhY3QiLCJfRmxvYXRpbmdIZWFydHNCYWNrZ3JvdW5kIiwiX0t1a3VNZXNzYWdlIiwiX21lZGlhTG9hZGVyIiwiX2pzeFJ1bnRpbWUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJCaXJ0aGRheVBpYW5vU3VycHJpc2UiLCJzZXROYW1lIiwic2V0TWVzc2FnZSIsInVzZUNlbGVicmF0aW9uU3RvcmUiLCJnYW1lU3RhcnRlZCIsInNldEdhbWVTdGFydGVkIiwidXNlU3RhdGUiLCJnYW1lQ29tcGxldGVkIiwic2V0R2FtZUNvbXBsZXRlZCIsInNob3dDZWxlYnJhdGlvbiIsInNldFNob3dDZWxlYnJhdGlvbiIsInRpbGVzSGl0Iiwic2V0VGlsZXNIaXQiLCJ0aWxlc1NwYXduZWQiLCJzZXRUaWxlc1NwYXduZWQiLCJzY29yZSIsInNldFNjb3JlIiwidGltZUxlZnQiLCJzZXRUaW1lTGVmdCIsImlzVW5sb2NrZWQiLCJzZXRJc1VubG9ja2VkIiwiY3VycmVudFBvZW0iLCJzZXRDdXJyZW50UG9lbSIsImZhbGxpbmdUaWxlcyIsInNldEZhbGxpbmdUaWxlcyIsImdhbWVPdmVyIiwic2V0R2FtZU92ZXIiLCJsaXZlcyIsInNldExpdmVzIiwiZW5kbGVzc01vZGUiLCJzZXRFbmRsZXNzTW9kZSIsInNob3dDaG9pY2VNZW51Iiwic2V0U2hvd0Nob2ljZU1lbnUiLCJzaG93U3BlY2lhbFBvZW0iLCJzZXRTaG93U3BlY2lhbFBvZW0iLCJzaG93S3VrdU1lc3NhZ2UiLCJzZXRTaG93S3VrdU1lc3NhZ2UiLCJ3ZWxjb21lTXVzaWNTdGFydGVkIiwic2V0V2VsY29tZU11c2ljU3RhcnRlZCIsInBvd2VyVXBzIiwic2V0UG93ZXJVcHMiLCJhY3RpdmVQb3dlclVwcyIsInNldEFjdGl2ZVBvd2VyVXBzIiwiaW52aW5jaWJsZSIsImFjdGl2ZSIsInNsb3dNb3Rpb24iLCJzY29yZU11bHRpcGxpZXIiLCJtdWx0aXBsaWVyIiwiY29tYm8iLCJzZXRDb21ibyIsIm1heENvbWJvIiwic2V0TWF4Q29tYm8iLCJpc011dGVkIiwic2V0SXNNdXRlZCIsInNob3dQaG90b0dhbGxlcnkiLCJzZXRTaG93UGhvdG9HYWxsZXJ5Iiwic2hvd1ZpZGVvR2FsbGVyeSIsInNldFNob3dWaWRlb0dhbGxlcnkiLCJzZWxlY3RlZFBob3RvIiwic2V0U2VsZWN0ZWRQaG90byIsInNlbGVjdGVkVmlkZW8iLCJzZXRTZWxlY3RlZFZpZGVvIiwicGljdHVyZXMiLCJzZXRQaWN0dXJlcyIsInZpZGVvcyIsInNldFZpZGVvcyIsIm1lZGlhTG9hZGluZyIsInNldE1lZGlhTG9hZGluZyIsImZsb2F0aW5nRWxlbWVudHMiLCJ1c2VNZW1vIiwiZWxlbWVudHMiLCJwdXNoIiwidHlwZSIsImxlZnQiLCJNYXRoIiwicmFuZG9tIiwidG9wIiwiYW5pbWF0aW9uRGVsYXkiLCJzaXplIiwiYXVkaW9Db250ZXh0UmVmIiwidXNlUmVmIiwiZ2FtZUxvb3BSZWYiLCJsYXN0VGlsZVNwYXduUmVmIiwiYWN0aXZlT3NjaWxsYXRvcnNSZWYiLCJiYWNrZ3JvdW5kTXVzaWNSZWYiLCJ0YXJnZXREYXRlIiwiRGF0ZSIsImhhcHB5QmlydGhkYXlOb3RlcyIsIm5vdGUiLCJmcmVxdWVuY3kiLCJkdXJhdGlvbiIsInBvd2VyVXBUeXBlcyIsImhlYXJ0IiwiZW1vamkiLCJjb2xvciIsImVmZmVjdCIsInN0YXIiLCJsaWdodG5pbmciLCJyYWluYm93IiwiZ29sZGVuIiwicG9lbXMiLCJzcGVjaWFsUG9lbSIsInVzZUVmZmVjdCIsImNoZWNrVW5sb2NrU3RhdHVzIiwibm93IiwidGltZURpZmYiLCJkYXlzIiwiZmxvb3IiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJyYW5kb21Qb2VtIiwibGVuZ3RoIiwicGxheVdlbGNvbWVNdXNpYyIsInVzZUNhbGxiYWNrIiwiY3VycmVudCIsIndpbmRvdyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImF1ZGlvQ29udGV4dCIsInBsYXlHZW50bGVDaG9yZCIsImZyZXF1ZW5jaWVzIiwiZGVsYXkiLCJzZXRUaW1lb3V0IiwiZm9yRWFjaCIsImZyZXEiLCJpbmRleCIsIm9zY2lsbGF0b3IiLCJjcmVhdGVPc2NpbGxhdG9yIiwiZ2Fpbk5vZGUiLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwic2V0VmFsdWVBdFRpbWUiLCJjdXJyZW50VGltZSIsImdhaW4iLCJsaW5lYXJSYW1wVG9WYWx1ZUF0VGltZSIsImV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUiLCJzdGFydCIsInN0b3AiLCJwcmV2IiwidXBkYXRlZCIsImtleXMiLCJrZXkiLCJzcGF3blBvd2VyVXAiLCJ0eXBlcyIsInJhbmRvbVR5cGUiLCJuZXdQb3dlclVwIiwiaWQiLCJjb2x1bW4iLCJ5Iiwic3BlZWQiLCJjb2xsZWN0UG93ZXJVcCIsInBvd2VyVXBJZCIsInBvd2VyVXAiLCJmaW5kIiwicCIsImNvbGxlY3Rpb25FbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJpbm5lckhUTUwiLCJxdWVyeVNlbGVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmaWx0ZXIiLCJtaW4iLCJwbGF5Tm90ZSIsImVycm9yIiwiY29uc29sZSIsImxvZyIsIm9uZW5kZWQiLCJvc2MiLCJvbGRlc3RPc2MiLCJzaGlmdCIsInBsYXlCYWNrZ3JvdW5kTXVzaWMiLCJjbGVhclRpbWVvdXQiLCJwbGF5TWVsb2R5Tm90ZSIsIm5vdGVJbmRleCIsInN0b3BCYWNrZ3JvdW5kTXVzaWMiLCJ0aW1lciIsImxvYWRNZWRpYSIsIm1lZGlhRGF0YSIsImxvYWRNZWRpYUZpbGVzIiwiZ2FtZUxvb3AiLCJiYXNlSW50ZXJ2YWwiLCJzcGF3bkludGVydmFsIiwibWF4Iiwic2hvdWxkU3Bhd24iLCJuZXdUaWxlIiwic3Bhd25lZCIsIm1hcCIsInRpbGUiLCJwcmV2TGl2ZXMiLCJuZXdMaXZlcyIsImhhbmRsZVRpbGVDbGljayIsInRpbGVJZCIsInRpbGVJbmRleCIsImZpbmRJbmRleCIsImJ1cnN0RWxlbWVudCIsImJhc2VTY29yZSIsImNvbWJvQm9udXMiLCJmaW5hbFNjb3JlIiwicHJldlNjb3JlIiwibmV3Q29tYm8iLCJwcmV2SGl0IiwibmV3SGl0Iiwib3Blbkt1a3VNZXNzYWdlIiwicmVzZXRHYW1lIiwianN4cyIsImNoaWxkcmVuIiwianN4IiwiaGVhcnRDb3VudCIsIm9wYWNpdHkiLCJhbmltYXRpb25EdXJhdGlvbiIsInB1bHNlRHVyYXRpb24iLCJMb2NrIiwiQ2xvY2siLCJIZWFydCIsIkZyYWdtZW50IiwiZWxlbWVudCIsImFuaW1hdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwiTXVzaWMiLCJBcnJheSIsIl8iLCJvbkNsaWNrIiwic2xpY2UiLCJwaWN0dXJlIiwic3JjIiwidXJsIiwiYWx0IiwibXV0ZWQiLCJsb29wIiwiYXV0b1BsYXkiLCJwbGF5c0lubGluZSIsInByZWxvYWQiLCJvbkVycm9yIiwidGFyZ2V0IiwiZGlzcGxheSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiYm94U2hhZG93IiwiaXNWaXNpYmxlIiwib25DbG9zZSIsIm5ld011dGVkU3RhdGUiLCJzdGF0ZSIsInJlc3VtZSIsInRpdGxlIiwiZmlsbCIsInN0cm9rZSIsInZpZXdCb3giLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJzdHJva2VXaWR0aCIsImQiLCJoZWlnaHRzIiwicmFuZG9tSGVpZ2h0IiwidmlkZW8iLCJhc3BlY3RSYXRpb3MiLCJyYW5kb21Bc3BlY3QiLCJvbk1vdXNlRW50ZXIiLCJwbGF5IiwiY2F0Y2giLCJlcnIiLCJvbk1vdXNlTGVhdmUiLCJwYXVzZSIsInBhcmVudEVsZW1lbnQiLCJvbkxvYWRlZE1ldGFkYXRhIiwib25DYW5QbGF5IiwiY29udHJvbHMiLCJjZWlsIiwib25Nb3VzZURvd24iLCJvblRvdWNoU3RhcnQiLCJ0b3VjaEFjdGlvbiIsInVzZXJTZWxlY3QiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VDZWxlYnJhdGlvblN0b3JlIGZyb20gJy4vc3RvcmUvY2VsZWJyYXRpb25TdG9yZSc7XG5pbXBvcnQgeyBIZWFydCwgTXVzaWMsIExvY2ssIENsb2NrIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCBGbG9hdGluZ0hlYXJ0c0JhY2tncm91bmQgZnJvbSAnLi9jb21wb25lbnRzL0Zsb2F0aW5nSGVhcnRzQmFja2dyb3VuZCc7XG5pbXBvcnQgS3VrdU1lc3NhZ2UgZnJvbSAnLi9jb21wb25lbnRzL0t1a3VNZXNzYWdlJztcbmltcG9ydCB7IGxvYWRNZWRpYUZpbGVzIH0gZnJvbSAnLi91dGlscy9tZWRpYUxvYWRlcic7XG5cbmNvbnN0IEJpcnRoZGF5UGlhbm9TdXJwcmlzZSA9ICgpID0+IHtcbiAgY29uc3QgeyBzZXROYW1lLCBzZXRNZXNzYWdlIH0gPSB1c2VDZWxlYnJhdGlvblN0b3JlKCk7XG4gIGNvbnN0IFtnYW1lU3RhcnRlZCwgc2V0R2FtZVN0YXJ0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZ2FtZUNvbXBsZXRlZCwgc2V0R2FtZUNvbXBsZXRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93Q2VsZWJyYXRpb24sIHNldFNob3dDZWxlYnJhdGlvbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIC8vIGNvbnN0IFtjdXJyZW50VGlsZSwgc2V0Q3VycmVudFRpbGVdID0gdXNlU3RhdGUoMCk7IC8vIFVudXNlZCB2YXJpYWJsZVxuICBjb25zdCBbdGlsZXNIaXQsIHNldFRpbGVzSGl0XSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbdGlsZXNTcGF3bmVkLCBzZXRUaWxlc1NwYXduZWRdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtzY29yZSwgc2V0U2NvcmVdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFt0aW1lTGVmdCwgc2V0VGltZUxlZnRdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbaXNVbmxvY2tlZCwgc2V0SXNVbmxvY2tlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtjdXJyZW50UG9lbSwgc2V0Q3VycmVudFBvZW1dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbZmFsbGluZ1RpbGVzLCBzZXRGYWxsaW5nVGlsZXNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbZ2FtZU92ZXIsIHNldEdhbWVPdmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2xpdmVzLCBzZXRMaXZlc10gPSB1c2VTdGF0ZSgzKTtcbiAgY29uc3QgW2VuZGxlc3NNb2RlLCBzZXRFbmRsZXNzTW9kZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93Q2hvaWNlTWVudSwgc2V0U2hvd0Nob2ljZU1lbnVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBcblxuICBjb25zdCBbc2hvd1NwZWNpYWxQb2VtLCBzZXRTaG93U3BlY2lhbFBvZW1dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd0t1a3VNZXNzYWdlLCBzZXRTaG93S3VrdU1lc3NhZ2VdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbd2VsY29tZU11c2ljU3RhcnRlZCwgc2V0V2VsY29tZU11c2ljU3RhcnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwb3dlclVwcywgc2V0UG93ZXJVcHNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbYWN0aXZlUG93ZXJVcHMsIHNldEFjdGl2ZVBvd2VyVXBzXSA9IHVzZVN0YXRlKHtcbiAgICBpbnZpbmNpYmxlOiB7IGFjdGl2ZTogZmFsc2UsIHRpbWVMZWZ0OiAwIH0sXG4gICAgc2xvd01vdGlvbjogeyBhY3RpdmU6IGZhbHNlLCB0aW1lTGVmdDogMCB9LFxuICAgIHNjb3JlTXVsdGlwbGllcjogeyBhY3RpdmU6IGZhbHNlLCB0aW1lTGVmdDogMCwgbXVsdGlwbGllcjogMSB9XG4gIH0pO1xuICBjb25zdCBbY29tYm8sIHNldENvbWJvXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbbWF4Q29tYm8sIHNldE1heENvbWJvXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbaXNNdXRlZCwgc2V0SXNNdXRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gR2FsbGVyeSBzdGF0ZSB2YXJpYWJsZXNcbiAgY29uc3QgW3Nob3dQaG90b0dhbGxlcnksIHNldFNob3dQaG90b0dhbGxlcnldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd1ZpZGVvR2FsbGVyeSwgc2V0U2hvd1ZpZGVvR2FsbGVyeV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzZWxlY3RlZFBob3RvLCBzZXRTZWxlY3RlZFBob3RvXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbc2VsZWN0ZWRWaWRlbywgc2V0U2VsZWN0ZWRWaWRlb10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BpY3R1cmVzLCBzZXRQaWN0dXJlc10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFt2aWRlb3MsIHNldFZpZGVvc10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFttZWRpYUxvYWRpbmcsIHNldE1lZGlhTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICAvLyBHZW5lcmF0ZSBmbG9hdGluZyBlbGVtZW50cyBmb3Igd2VsY29tZSBzY3JlZW5cbiAgY29uc3QgZmxvYXRpbmdFbGVtZW50cyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgLy8gSGVhcnRzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcbiAgICAgIGVsZW1lbnRzLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhcnQnLFxuICAgICAgICBsZWZ0OiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgICB0b3A6IE1hdGgucmFuZG9tKCkgKiAxMDAsXG4gICAgICAgIGFuaW1hdGlvbkRlbGF5OiBNYXRoLnJhbmRvbSgpICogNixcbiAgICAgICAgc2l6ZTogNCArIE1hdGgucmFuZG9tKCkgKiAyXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gTXVzaWMgbm90ZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgZWxlbWVudHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdub3RlJyxcbiAgICAgICAgbGVmdDogTWF0aC5yYW5kb20oKSAqIDEwMCxcbiAgICAgICAgdG9wOiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgICBhbmltYXRpb25EZWxheTogTWF0aC5yYW5kb20oKSAqIDgsXG4gICAgICAgIHNpemU6IDMgKyBNYXRoLnJhbmRvbSgpICogMlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFNwYXJrbGVzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3NwYXJrbGUnLFxuICAgICAgICBsZWZ0OiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgICB0b3A6IE1hdGgucmFuZG9tKCkgKiAxMDAsXG4gICAgICAgIGFuaW1hdGlvbkRlbGF5OiBNYXRoLnJhbmRvbSgpICogMTAsXG4gICAgICAgIHNpemU6IDIgKyBNYXRoLnJhbmRvbSgpICogMS41XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xuICB9LCBbXSk7XG4gIFxuICBjb25zdCBhdWRpb0NvbnRleHRSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IGdhbWVMb29wUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBsYXN0VGlsZVNwYXduUmVmID0gdXNlUmVmKDApO1xuICBjb25zdCBhY3RpdmVPc2NpbGxhdG9yc1JlZiA9IHVzZVJlZihbXSk7XG4gIGNvbnN0IGJhY2tncm91bmRNdXNpY1JlZiA9IHVzZVJlZihudWxsKTtcbiAgXG4gIC8vIFRhcmdldCBkYXRlOiBTZXR0aW5nIHRvIGEgcGFzdCBkYXRlIHRvIHVubG9jayB0aGUgYXBwXG4gIGNvbnN0IHRhcmdldERhdGUgPSB1c2VNZW1vKCgpID0+IG5ldyBEYXRlKCcyMDI1LTA5LTIzVDAwOjAwOjAwJyksIFtdKTtcbiAgXG4gIC8vIEhhcHB5IEJpcnRoZGF5IG1lbG9keSAoc2ltcGxpZmllZCBub3RlcykgLSB3cmFwcGVkIGluIHVzZU1lbW8gZm9yIHBlcmZvcm1hbmNlXG4gIGNvbnN0IGhhcHB5QmlydGhkYXlOb3RlcyA9IHVzZU1lbW8oKCkgPT4gW1xuICAgIHsgbm90ZTogJ0MnLCBmcmVxdWVuY3k6IDI2MS42MywgZHVyYXRpb246IDUwMCB9LFxuICAgIHsgbm90ZTogJ0MnLCBmcmVxdWVuY3k6IDI2MS42MywgZHVyYXRpb246IDI1MCB9LFxuICAgIHsgbm90ZTogJ0QnLCBmcmVxdWVuY3k6IDI5My42NiwgZHVyYXRpb246IDc1MCB9LFxuICAgIHsgbm90ZTogJ0MnLCBmcmVxdWVuY3k6IDI2MS42MywgZHVyYXRpb246IDc1MCB9LFxuICAgIHsgbm90ZTogJ0YnLCBmcmVxdWVuY3k6IDM0OS4yMywgZHVyYXRpb246IDc1MCB9LFxuICAgIHsgbm90ZTogJ0UnLCBmcmVxdWVuY3k6IDMyOS42MywgZHVyYXRpb246IDE1MDAgfSxcbiAgICB7IG5vdGU6ICdDJywgZnJlcXVlbmN5OiAyNjEuNjMsIGR1cmF0aW9uOiA1MDAgfSxcbiAgICB7IG5vdGU6ICdDJywgZnJlcXVlbmN5OiAyNjEuNjMsIGR1cmF0aW9uOiAyNTAgfSxcbiAgICB7IG5vdGU6ICdEJywgZnJlcXVlbmN5OiAyOTMuNjYsIGR1cmF0aW9uOiA3NTAgfSxcbiAgICB7IG5vdGU6ICdDJywgZnJlcXVlbmN5OiAyNjEuNjMsIGR1cmF0aW9uOiA3NTAgfSxcbiAgICB7IG5vdGU6ICdHJywgZnJlcXVlbmN5OiAzOTIuMDAsIGR1cmF0aW9uOiA3NTAgfSxcbiAgICB7IG5vdGU6ICdGJywgZnJlcXVlbmN5OiAzNDkuMjMsIGR1cmF0aW9uOiAxNTAwIH1cbiAgXSwgW10pO1xuXG4gIC8vIFBvd2VyLXVwIHR5cGVzXG4gIGNvbnN0IHBvd2VyVXBUeXBlcyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBoZWFydDogeyBlbW9qaTogJ/CfkpYnLCBjb2xvcjogJ2Zyb20tcmVkLTQwMCB0by1waW5rLTUwMCcsIGVmZmVjdDogJ1Jlc3RvcmUgTGlmZScgfSxcbiAgICBzdGFyOiB7IGVtb2ppOiAn4q2QJywgY29sb3I6ICdmcm9tLXllbGxvdy00MDAgdG8tb3JhbmdlLTUwMCcsIGVmZmVjdDogJ0ludmluY2libGUnIH0sXG4gICAgbGlnaHRuaW5nOiB7IGVtb2ppOiAn4pqhJywgY29sb3I6ICdmcm9tLWJsdWUtNDAwIHRvLXB1cnBsZS01MDAnLCBlZmZlY3Q6ICdTbG93IE1vdGlvbicgfSxcbiAgICByYWluYm93OiB7IGVtb2ppOiAn8J+MiCcsIGNvbG9yOiAnZnJvbS1wdXJwbGUtNDAwIHRvLXBpbmstNTAwJywgZWZmZWN0OiAnRG91YmxlIFBvaW50cycgfSxcbiAgICBnb2xkZW46IHsgZW1vamk6ICfinKgnLCBjb2xvcjogJ2Zyb20teWVsbG93LTMwMCB0by15ZWxsb3ctNjAwJywgZWZmZWN0OiAnM3ggTXVsdGlwbGllcicgfVxuICB9KSwgW10pO1xuICBcblxuICAvLyBSb21hbnRpYyBwb2VtcyBjb2xsZWN0aW9uXG4gIGNvbnN0IHBvZW1zID0gdXNlTWVtbygoKSA9PiBbXG4gICAgXCJJbiB5b3VyIGV5ZXMsIEkgc2VlIHRoZSBzdGFycyxcXG5JbiB5b3VyIHNtaWxlLCBteSB3b3JsZCBpZ25pdGVzLlxcbkV2ZXJ5IG1vbWVudCBzcGVudCB3aXRoIHlvdSxcXG5NYWtlcyBldmVyeXRoaW5nIGZlZWwgcmlnaHQuIOKcqFwiLFxuICAgIFxuICAgIFwiWW91IGFyZSBteSBzdW5zaGluZSBvbiBjbG91ZHkgZGF5cyxcXG5NeSByYWluYm93IGFmdGVyIGV2ZXJ5IHN0b3JtLlxcbldpdGggeW91LCBsaWZlIGJlY29tZXMgYSBiZWF1dGlmdWwgc29uZyxcXG5BbmQgbG92ZSB0YWtlcyBpdHMgcGVyZmVjdCBmb3JtLiDwn4yIXCIsXG4gICAgXG4gICAgXCJMaWtlIGZsb3dlcnMgYmxvb20gaW4gc3ByaW5nLFxcbk15IGxvdmUgZm9yIHlvdSBncm93cyBlYWNoIGRheS5cXG5Zb3UncmUgdGhlIG1lbG9keSBpbiBteSBoZWFydCxcXG5UaGUgd29yZHMgSSBsb25nIHRvIHNheS4g8J+MuFwiLFxuICAgIFxuICAgIFwiWW91ciBsYXVnaHRlciBpcyBteSBmYXZvcml0ZSBzb3VuZCxcXG5Zb3VyIGhhcHBpbmVzcywgbXkgZ3JlYXRlc3QgdHJlYXN1cmUuXFxuSW4gdGhpcyBkYW5jZSBvZiBsaWZlIHdlIHNoYXJlLFxcbllvdSdyZSBteSByaHl0aG0gYW5kIG15IG1lYXN1cmUuIPCfkoNcIixcbiAgICBcbiAgICBcIldoZW4gSSBjb3VudCBteSBibGVzc2luZ3MsXFxuSSBjb3VudCB5b3UgdHdpY2UsIG1heWJlIHRocmljZS5cXG5Zb3UndmUgbWFkZSBteSB3b3JsZCBzbyBiZWF1dGlmdWwsXFxuTXkgaGVhcnQncyBvd24gcGFyYWRpc2UuIPCfkpZcIixcbiAgICBcbiAgICBcIllvdSdyZSB0aGUgY29mZmVlIHRvIG15IG1vcm5pbmcsXFxuVGhlIHN0YXJzIHRvIG15IG5pZ2h0IHNreS5cXG5XaXRoIHlvdSwgZXZlcnkgb3JkaW5hcnkgbW9tZW50XFxuQmVjb21lcyBhIHJlYXNvbiB0byBmbHkgaGlnaC4g4piV4pyoXCIsXG4gICAgXG4gICAgXCJUaW1lIHN0YW5kcyBzdGlsbCB3aGVuIHlvdSdyZSBuZWFyLFxcblRoZSB3b3JsZCBmYWRlcyBhd2F5IGJ1dCB5b3UuXFxuSW4geW91ciBhcm1zIEkgZmluZCBteSBob21lLFxcbkluIHlvdXIgaGVhcnQsIG15IGRyZWFtcyBjb21lIHRydWUuIPCfj6Dwn5KVXCIsXG4gICAgXG4gICAgXCJZb3UgcGFpbnQgY29sb3JzIGluIG15IGdyYXkgZGF5cyxcXG5CcmluZyBtdXNpYyB0byBteSBzaWxlbnQgbmlnaHRzLlxcbldpdGggZXZlcnkga2lzcywgZXZlcnkgdG91Y2gsXFxuWW91IG1ha2UgZXZlcnl0aGluZyBmZWVsIHJpZ2h0LiDwn46o8J+OtVwiLFxuICAgIFxuICAgIFwiRGlzdGFuY2UgbWVhbnMgbm90aGluZyB3aGVuIGxvdmUgbWVhbnMgZXZlcnl0aGluZyxcXG5NaWxlcyBhcGFydCBidXQgaGVhcnRzIGFzIG9uZS5cXG5FdmVyeSBzdW5zZXQgYnJpbmdzIG1lIGNsb3NlclxcblRvIHRoZSBkYXkgb3VyIGxvdmUgaGFzIHdvbi4g8J+MheKdpO+4j1wiLFxuICAgIFxuICAgIFwiSW4gYSB3b3JsZCBvZiB0ZW1wb3JhcnkgdGhpbmdzLFxcbllvdSBhcmUgbXkgY29uc3RhbnQsIG15IGZvcmV2ZXIuXFxuVGhyb3VnaCBzZWFzb25zIGNoYW5nZSBhbmQgeWVhcnMgZ28gYnksXFxuTXkgbG92ZSBmb3IgeW91IHdpbGwgZmFkZSBuZXZlci4g8J+Mv+KZvu+4j1wiLFxuICAgIFxuICAgIFwiWW91J3JlIHRoZSBhbnN3ZXIgdG8gbXkgcHJheWVycyxcXG5UaGUgd2lzaCB1cG9uIG15IHNob290aW5nIHN0YXIuXFxuTm8gbWF0dGVyIHdoZXJlIGxpZmUgdGFrZXMgdXMsXFxuWW91J2xsIGFsd2F5cyBiZSBteSBndWlkaW5nIHN0YXIuIOKtkPCfmY9cIixcbiAgICBcbiAgICBcIkV2ZXJ5IGhlYXJ0YmVhdCB3aGlzcGVycyB5b3VyIG5hbWUsXFxuRXZlcnkgYnJlYXRoIGNhcnJpZXMgeW91ciBsb3ZlLlxcbllvdSdyZSBteSBlYXJ0aCwgbXkgbW9vbiwgbXkgc3VuLFxcbk15IGJsZXNzaW5nIHNlbnQgZnJvbSBhYm92ZS4g8J+MjfCfjJnimIDvuI9cIixcbiAgICBcbiAgICBcIkluIHlvdXIgc21pbGUgSSBmaW5kIG15IGNvdXJhZ2UsXFxuSW4geW91ciB2b2ljZSBJIGhlYXIgbXkgc29uZy5cXG5XaXRoIHlvdSBiZXNpZGUgbWUgYWx3YXlzLFxcbkkga25vdyB3aGVyZSBJIGJlbG9uZy4g8J+YivCfjrZcIixcbiAgICBcbiAgICBcIkxvdmUgbGV0dGVycyB3cml0dGVuIGluIHRoZSBzdGFycyxcXG5Qcm9taXNlcyBtYWRlIHdpdGggbW9ybmluZyBkZXcuXFxuRXZlcnkgZGF5IEkgZmFsbCBkZWVwZXIsXFxuTW9yZSBtYWRseSBpbiBsb3ZlIHdpdGggeW91LiDwn5KM4q2QXCIsXG4gICAgXG4gICAgXCJZb3UncmUgbXkgZmF2b3JpdGUgbm90aWZpY2F0aW9uLFxcbk15IHN3ZWV0ZXN0IGRyZWFtIGNvbWUgdHJ1ZS5cXG5JbiB0aGlzIGNyYXp5LCBidXN5IHdvcmxkLFxcbk15IHBlYWNlIGlzIGZvdW5kIGluIHlvdS4g8J+TsfCfkqRcIlxuICBdLCBbXSk7XG5cbiAgLy8gU3BlY2lhbCBjdXN0b20gcG9lbVxuICBjb25zdCBzcGVjaWFsUG9lbSA9IHVzZU1lbW8oKCkgPT4gXG4gICAgXCJJbiBkZXB0aHMgb2YgaGVhcnQsIGEgbG92ZSByZXNpZGVzLFxcbkEgZmxhbWUgdGhhdCBidXJucywgYSBsb3ZlIHRoYXQgZ3VpZGVzLlxcbkEgbG92ZSBzbyBwdXJlLCBzbyBzdHJvbmcsIHNvIHRydWUsXFxuQSBsb3ZlIGZvciB5b3UsIGZvcmV2ZXIgbmV3LlxcblxcbldpdGggZXZlcnkgYmVhdCwgbXkgaGVhcnQgZG9lcyB5ZWFybixcXG5Gb3IgeW91ciBzd2VldCBsb3ZlLCBhIHdpc2ggdG8gbGVhcm4uXFxuQSBsb3ZlIHRoYXQgZ3Jvd3MsIHdpdGggZXZlcnkgZGF5LFxcbkEgbG92ZSB0aGF0IHNoaW5lcywgY29tZSB3aGF0IG1heS5cXG5cXG5Zb3VyIGV5ZXMsIGEgc3RhciwgYSBndWlkaW5nIGxpZ2h0LFxcbllvdXIgc21pbGUsIGEgc3VuLCBzbyB3YXJtIGFuZCBicmlnaHQuXFxuWW91ciB0b3VjaCwgYSBzb2xhY2UsIHNvZnQgYW5kIGRlZXAsXFxuWW91ciBsb3ZlLCBhIHRyZWFzdXJlLCBJJ2xsIGZvcmV2ZXIga2VlcC5cXG5cXG5TbyBsZXQgdXMgdm93LCB0byBsb3ZlIGFuZCBjYXJlLFxcblRvIGZhY2UgbGlmZSdzIHN0b3JtcywgdG9nZXRoZXIgd2UnbGwgc2hhcmUuXFxuQSBib25kIHVuYnJva2VuLCBhIGxvdmUgZGl2aW5lLFxcbkZvcmV2ZXIgeW91cnMsIGFuZCBldmVyIG1pbmUuIPCfkpZcIlxuICAsIFtdKTtcbiAgXG4gIC8vIENoZWNrIGlmIGFwcCBzaG91bGQgYmUgdW5sb2NrZWRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBGb3JjZSB1bmxvY2sgdGhlIGFwcFxuICAgIHNldElzVW5sb2NrZWQodHJ1ZSk7XG4gICAgXG4gICAgY29uc3QgY2hlY2tVbmxvY2tTdGF0dXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgaWYgKG5vdyA+PSB0YXJnZXREYXRlKSB7XG4gICAgICAgIHNldElzVW5sb2NrZWQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0aW1lRGlmZiA9IHRhcmdldERhdGUgLSBub3c7XG4gICAgICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKHRpbWVEaWZmIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgICAgICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKCh0aW1lRGlmZiAlICgxMDAwICogNjAgKiA2MCAqIDI0KSkgLyAoMTAwMCAqIDYwICogNjApKTtcbiAgICAgICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHRpbWVEaWZmICUgKDEwMDAgKiA2MCAqIDYwKSkgLyAoMTAwMCAqIDYwKSk7XG4gICAgICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKCh0aW1lRGlmZiAlICgxMDAwICogNjApKSAvIDEwMDApO1xuICAgICAgICBcbiAgICAgICAgc2V0VGltZUxlZnQoYCR7ZGF5c31kICR7aG91cnN9aCAke21pbnV0ZXN9bSAke3NlY29uZHN9c2ApO1xuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgY2hlY2tVbmxvY2tTdGF0dXMoKTtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGNoZWNrVW5sb2NrU3RhdHVzLCAxMDAwKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0sIFt0YXJnZXREYXRlXSk7XG4gIFxuICAvLyBTZWxlY3QgcmFuZG9tIHBvZW0gb24gY29tcG9uZW50IG1vdW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzVW5sb2NrZWQpIHtcbiAgICAgIGNvbnN0IHJhbmRvbVBvZW0gPSBwb2Vtc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb2Vtcy5sZW5ndGgpXTtcbiAgICAgIHNldEN1cnJlbnRQb2VtKHJhbmRvbVBvZW0pO1xuICAgIH1cbiAgfSwgW2lzVW5sb2NrZWQsIHBvZW1zXSk7XG5cblxuICAvLyBQbGF5IGdlbnRsZSB3ZWxjb21lIG11c2ljICh3aXRob3V0IGRpbmdsaW5nIHNvdW5kKVxuICBjb25zdCBwbGF5V2VsY29tZU11c2ljID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghYXVkaW9Db250ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgIGF1ZGlvQ29udGV4dFJlZi5jdXJyZW50ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgcGxheUdlbnRsZUNob3JkID0gKGZyZXF1ZW5jaWVzLCBkZWxheSA9IDApID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBmcmVxdWVuY2llcy5mb3JFYWNoKChmcmVxLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9zY2lsbGF0b3IgPSBhdWRpb0NvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgICAgICAgIGNvbnN0IGdhaW5Ob2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgICBcbiAgICAgICAgICBvc2NpbGxhdG9yLmNvbm5lY3QoZ2Fpbk5vZGUpO1xuICAgICAgICAgIGdhaW5Ob2RlLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgICBcbiAgICAgICAgICBvc2NpbGxhdG9yLmZyZXF1ZW5jeS5zZXRWYWx1ZUF0VGltZShmcmVxLCBhdWRpb0NvbnRleHQuY3VycmVudFRpbWUpO1xuICAgICAgICAgIG9zY2lsbGF0b3IudHlwZSA9ICdzaW5lJztcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBub3cgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgICAgICAgZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLCBub3cpO1xuICAgICAgICAgIGdhaW5Ob2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMC4wNSwgbm93ICsgMC4yKTtcbiAgICAgICAgICBnYWluTm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUoMC4wMDAxLCBub3cgKyAyLjUpO1xuICAgICAgICAgIFxuICAgICAgICAgIG9zY2lsbGF0b3Iuc3RhcnQobm93KTtcbiAgICAgICAgICBvc2NpbGxhdG9yLnN0b3Aobm93ICsgMi41KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfTtcblxuICAgIC8vIFBsYXkgYSBzb2Z0ZXIsIG1vcmUgaGFybW9uaW91cyBtZWxvZHlcbiAgICBwbGF5R2VudGxlQ2hvcmQoWzI2MS42MywgMzI5LjYzLCAzOTIuMDBdLCAwKTsgICAgLy8gQyBtYWpvciBjaG9yZFxuICAgIHBsYXlHZW50bGVDaG9yZChbMjkzLjY2LCAzNjkuOTksIDQ0MC4wMF0sIDEyMDApOyAvLyBEIG1ham9yIGNob3JkICBcbiAgICBwbGF5R2VudGxlQ2hvcmQoWzI2MS42MywgMzI5LjYzLCAzOTIuMDBdLCAyNDAwKTsgLy8gQyBtYWpvciBjaG9yZFxuICB9LCBbXSk7XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBwb3dlci11cHMgdGltZXJcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZ2FtZVN0YXJ0ZWQgJiYgIWdhbWVPdmVyICYmICFnYW1lQ29tcGxldGVkKSB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgc2V0QWN0aXZlUG93ZXJVcHMocHJldiA9PiB7XG4gICAgICAgICAgY29uc3QgdXBkYXRlZCA9IHsgLi4ucHJldiB9O1xuICAgICAgICAgIE9iamVjdC5rZXlzKHVwZGF0ZWQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVkW2tleV0uYWN0aXZlICYmIHVwZGF0ZWRba2V5XS50aW1lTGVmdCA+IDApIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFtrZXldLnRpbWVMZWZ0IC09IDEwMDtcbiAgICAgICAgICAgICAgaWYgKHVwZGF0ZWRba2V5XS50aW1lTGVmdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlZFtrZXldLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdzY29yZU11bHRpcGxpZXInKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVkW2tleV0ubXVsdGlwbGllciA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB9XG4gIH0sIFtnYW1lU3RhcnRlZCwgZ2FtZU92ZXIsIGdhbWVDb21wbGV0ZWRdKTtcblxuICAvLyBTcGF3biBwb3dlci11cHMgcmFuZG9tbHlcbiAgY29uc3Qgc3Bhd25Qb3dlclVwID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4xNSkgeyAvLyAxNSUgY2hhbmNlIHRvIHNwYXduIHBvd2VyLXVwXG4gICAgICBjb25zdCB0eXBlcyA9IE9iamVjdC5rZXlzKHBvd2VyVXBUeXBlcyk7XG4gICAgICBjb25zdCByYW5kb21UeXBlID0gdHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdHlwZXMubGVuZ3RoKV07XG4gICAgICBcbiAgICAgIGNvbnN0IG5ld1Bvd2VyVXAgPSB7XG4gICAgICAgIGlkOiBEYXRlLm5vdygpICsgTWF0aC5yYW5kb20oKSxcbiAgICAgICAgdHlwZTogcmFuZG9tVHlwZSxcbiAgICAgICAgY29sdW1uOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KSxcbiAgICAgICAgeTogLTgwLFxuICAgICAgICBzcGVlZDogM1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgc2V0UG93ZXJVcHMocHJldiA9PiBbLi4ucHJldiwgbmV3UG93ZXJVcF0pO1xuICAgIH1cbiAgfSwgW3Bvd2VyVXBUeXBlc10pO1xuXG4gIC8vIEhhbmRsZSBwb3dlci11cCBjb2xsZWN0aW9uXG4gIGNvbnN0IGNvbGxlY3RQb3dlclVwID0gdXNlQ2FsbGJhY2soKHBvd2VyVXBJZCwgdHlwZSkgPT4ge1xuICAgIHNldFBvd2VyVXBzKHByZXYgPT4ge1xuICAgICAgY29uc3QgcG93ZXJVcCA9IHByZXYuZmluZChwID0+IHAuaWQgPT09IHBvd2VyVXBJZCk7XG4gICAgICBpZiAoIXBvd2VyVXApIHJldHVybiBwcmV2O1xuICAgICAgXG4gICAgICAvLyBBZGQgdmlzdWFsIGNvbGxlY3Rpb24gZWZmZWN0XG4gICAgICBjb25zdCBjb2xsZWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29sbGVjdGlvbkVsZW1lbnQuY2xhc3NOYW1lID0gJ2Fic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmUgei01MCc7XG4gICAgICBjb2xsZWN0aW9uRWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7KHBvd2VyVXAuY29sdW1uICogMjUpICsgMTIuNX0lYDtcbiAgICAgIGNvbGxlY3Rpb25FbGVtZW50LnN0eWxlLnRvcCA9IGAke3Bvd2VyVXAueSArIDMwfXB4YDtcbiAgICAgIGNvbGxlY3Rpb25FbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtM3hsIGFuaW1hdGUtYm91bmNlXCIgc3R5bGU9XCJhbmltYXRpb24tZHVyYXRpb246IDAuOHM7XCI+XG4gICAgICAgICAgJHtwb3dlclVwVHlwZXNbdHlwZV0uZW1vaml9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC15ZWxsb3ctMzAwIHRleHQteGwgYW5pbWF0ZS1waW5nXCIgc3R5bGU9XCJhbmltYXRpb24tZHVyYXRpb246IDFzO1wiPlxuICAgICAgICAgIOKcqOKcqOKcqFxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZS1hcmVhJykuYXBwZW5kQ2hpbGQoY29sbGVjdGlvbkVsZW1lbnQpO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgY29sbGVjdGlvbiBlZmZlY3QgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25FbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjb2xsZWN0aW9uRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbGxlY3Rpb25FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgMTUwMCk7XG4gICAgICBcbiAgICAgIHJldHVybiBwcmV2LmZpbHRlcihwID0+IHAuaWQgIT09IHBvd2VyVXBJZCk7XG4gICAgfSk7XG4gICAgXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdoZWFydCc6XG4gICAgICAgIHNldExpdmVzKHByZXYgPT4gTWF0aC5taW4ocHJldiArIDEsIDUpKTsgLy8gTWF4IDUgbGl2ZXNcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdGFyJzpcbiAgICAgICAgc2V0QWN0aXZlUG93ZXJVcHMocHJldiA9PiAoe1xuICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgaW52aW5jaWJsZTogeyBhY3RpdmU6IHRydWUsIHRpbWVMZWZ0OiA1MDAwIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2xpZ2h0bmluZyc6XG4gICAgICAgIHNldEFjdGl2ZVBvd2VyVXBzKHByZXYgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgIHNsb3dNb3Rpb246IHsgYWN0aXZlOiB0cnVlLCB0aW1lTGVmdDogODAwMCB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyYWluYm93JzpcbiAgICAgICAgc2V0QWN0aXZlUG93ZXJVcHMocHJldiA9PiAoe1xuICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgc2NvcmVNdWx0aXBsaWVyOiB7IGFjdGl2ZTogdHJ1ZSwgdGltZUxlZnQ6IDEwMDAwLCBtdWx0aXBsaWVyOiAyIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2dvbGRlbic6XG4gICAgICAgIHNldEFjdGl2ZVBvd2VyVXBzKHByZXYgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgIHNjb3JlTXVsdGlwbGllcjogeyBhY3RpdmU6IHRydWUsIHRpbWVMZWZ0OiA4MDAwLCBtdWx0aXBsaWVyOiAzIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbiAgICAvLyBQbGF5IGNvbGxlY3Rpb24gc291bmRcbiAgICB0cnkge1xuICAgICAgcGxheU5vdGUoNTIzLjI1LCAyMDApOyAvLyBIaWdoIENcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ0F1ZGlvIHBsYXliYWNrIGZhaWxlZDonLCBlcnJvcik7XG4gICAgfVxuICB9LCBbcG93ZXJVcFR5cGVzXSk7XG4gIFxuICBjb25zdCBwbGF5Tm90ZSA9IChmcmVxdWVuY3ksIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKCFhdWRpb0NvbnRleHRSZWYuY3VycmVudCkge1xuICAgICAgYXVkaW9Db250ZXh0UmVmLmN1cnJlbnQgPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgb3NjaWxsYXRvciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XG4gICAgY29uc3QgZ2Fpbk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIFxuICAgIG9zY2lsbGF0b3IuY29ubmVjdChnYWluTm9kZSk7XG4gICAgZ2Fpbk5vZGUuY29ubmVjdChhdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xuICAgIFxuICAgIG9zY2lsbGF0b3IuZnJlcXVlbmN5LnNldFZhbHVlQXRUaW1lKGZyZXF1ZW5jeSwgYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lKTtcbiAgICBvc2NpbGxhdG9yLnR5cGUgPSAnc2luZSc7XG4gICAgXG4gICAgY29uc3Qgbm93ID0gYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xuICAgIFxuICAgIC8vIEFEU1IgZW52ZWxvcGUgZm9yIHNtb290aGVyIHNvdW5kIHdpdGggbG93ZXIgdm9sdW1lIGZvciBoYXJtb255XG4gICAgZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLCBub3cpO1xuICAgIGdhaW5Ob2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMC4xNSwgbm93ICsgMC4wMSk7IC8vIExvd2VyIGF0dGFjayB2b2x1bWVcbiAgICBnYWluTm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUoMC4wNSwgbm93ICsgMC4xKTsgLy8gTG93ZXIgZGVjYXlcbiAgICBnYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDAuMDUsIG5vdyArIGR1cmF0aW9uIC8gMTAwMCAtIDAuMSk7IC8vIExvd2VyIHN1c3RhaW5cbiAgICBnYWluTm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUoMC4wMDAwMSwgbm93ICsgZHVyYXRpb24gLyAxMDAwKTsgLy8gUmVsZWFzZVxuXG4gICAgb3NjaWxsYXRvci5zdGFydChub3cpO1xuICAgIG9zY2lsbGF0b3Iuc3RvcChub3cgKyBkdXJhdGlvbiAvIDEwMDApO1xuICAgIFxuICAgIC8vIEFkZCB0byBhY3RpdmUgb3NjaWxsYXRvcnMgYXJyYXlcbiAgICBhY3RpdmVPc2NpbGxhdG9yc1JlZi5jdXJyZW50LnB1c2gob3NjaWxsYXRvcik7XG4gICAgXG4gICAgLy8gUmVtb3ZlIGZyb20gYWN0aXZlIGFycmF5IHdoZW4gbm90ZSBlbmRzXG4gICAgb3NjaWxsYXRvci5vbmVuZGVkID0gKCkgPT4ge1xuICAgICAgYWN0aXZlT3NjaWxsYXRvcnNSZWYuY3VycmVudCA9IGFjdGl2ZU9zY2lsbGF0b3JzUmVmLmN1cnJlbnQuZmlsdGVyKG9zYyA9PiBvc2MgIT09IG9zY2lsbGF0b3IpO1xuICAgIH07XG4gICAgXG4gICAgLy8gQ2xlYW4gdXAgb2xkIG9zY2lsbGF0b3JzIChrZWVwIG1heCA2IHNpbXVsdGFuZW91cyBub3RlcyBmb3IgcGVyZm9ybWFuY2UpXG4gICAgaWYgKGFjdGl2ZU9zY2lsbGF0b3JzUmVmLmN1cnJlbnQubGVuZ3RoID4gNikge1xuICAgICAgY29uc3Qgb2xkZXN0T3NjID0gYWN0aXZlT3NjaWxsYXRvcnNSZWYuY3VycmVudC5zaGlmdCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb2xkZXN0T3NjLnN0b3AoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQWxyZWFkeSBzdG9wcGVkXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFBsYXkgYmFja2dyb3VuZCBtdXNpYyB3aXRoIEhhcHB5IEJpcnRoZGF5IG1lbG9keVxuICBjb25zdCBwbGF5QmFja2dyb3VuZE11c2ljID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghYXVkaW9Db250ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgIGF1ZGlvQ29udGV4dFJlZi5jdXJyZW50ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKCk7XG4gICAgfVxuXG4gICAgLy8gU3RvcCBhbnkgZXhpc3RpbmcgYmFja2dyb3VuZCBtdXNpY1xuICAgIGlmIChiYWNrZ3JvdW5kTXVzaWNSZWYuY3VycmVudCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGJhY2tncm91bmRNdXNpY1JlZi5jdXJyZW50KTtcbiAgICB9XG5cbiAgICBjb25zdCBwbGF5TWVsb2R5Tm90ZSA9IChub3RlSW5kZXggPSAwKSA9PiB7XG4gICAgICBpZiAobm90ZUluZGV4ID49IGhhcHB5QmlydGhkYXlOb3Rlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gUmVzdGFydCBtZWxvZHkgYWZ0ZXIgYSBwYXVzZVxuICAgICAgICBiYWNrZ3JvdW5kTXVzaWNSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4gcGxheU1lbG9keU5vdGUoMCksIDIwMDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vdGUgPSBoYXBweUJpcnRoZGF5Tm90ZXNbbm90ZUluZGV4XTtcbiAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IGF1ZGlvQ29udGV4dFJlZi5jdXJyZW50O1xuICAgICAgY29uc3Qgb3NjaWxsYXRvciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XG4gICAgICBjb25zdCBnYWluTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG5cbiAgICAgIG9zY2lsbGF0b3IuY29ubmVjdChnYWluTm9kZSk7XG4gICAgICBnYWluTm9kZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG5cbiAgICAgIG9zY2lsbGF0b3IuZnJlcXVlbmN5LnNldFZhbHVlQXRUaW1lKG5vdGUuZnJlcXVlbmN5LCBhdWRpb0NvbnRleHQuY3VycmVudFRpbWUpO1xuICAgICAgb3NjaWxsYXRvci50eXBlID0gJ3NpbmUnO1xuXG4gICAgICBjb25zdCBub3cgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgICBcbiAgICAgIC8vIFNvZnRlciBiYWNrZ3JvdW5kIG11c2ljIHZvbHVtZVxuICAgICAgZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLCBub3cpO1xuICAgICAgZ2Fpbk5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZShpc011dGVkID8gMC4wMDAwMSA6IDAuMDgsIG5vdyArIDAuMDUpOyAvLyBHZW50bGUgYXR0YWNrXG4gICAgICBnYWluTm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUoaXNNdXRlZCA/IDAuMDAwMDEgOiAwLjA0LCBub3cgKyAwLjIpOyAvLyBTb2Z0IGRlY2F5XG4gICAgICBnYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKGlzTXV0ZWQgPyAwLjAwMDAxIDogMC4wNCwgbm93ICsgbm90ZS5kdXJhdGlvbiAvIDEwMDAgLSAwLjEpOyAvLyBTdXN0YWluXG4gICAgICBnYWluTm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUoMC4wMDAwMSwgbm93ICsgbm90ZS5kdXJhdGlvbiAvIDEwMDApOyAvLyBSZWxlYXNlXG5cbiAgICAgIG9zY2lsbGF0b3Iuc3RhcnQobm93KTtcbiAgICAgIG9zY2lsbGF0b3Iuc3RvcChub3cgKyBub3RlLmR1cmF0aW9uIC8gMTAwMCk7XG5cbiAgICAgIC8vIFNjaGVkdWxlIG5leHQgbm90ZVxuICAgICAgYmFja2dyb3VuZE11c2ljUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHBsYXlNZWxvZHlOb3RlKG5vdGVJbmRleCArIDEpLCBub3RlLmR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgcGxheU1lbG9keU5vdGUoMCk7XG4gIH0sIFtoYXBweUJpcnRoZGF5Tm90ZXMsIGlzTXV0ZWRdKTtcblxuICAvLyBTdG9wIGJhY2tncm91bmQgbXVzaWNcbiAgY29uc3Qgc3RvcEJhY2tncm91bmRNdXNpYyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoYmFja2dyb3VuZE11c2ljUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFyVGltZW91dChiYWNrZ3JvdW5kTXVzaWNSZWYuY3VycmVudCk7XG4gICAgICBiYWNrZ3JvdW5kTXVzaWNSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgLy8gU3RhcnQgYmFja2dyb3VuZCBtdXNpYyB3aGVuIGNlbGVicmF0aW9uIHNjcmVlbiBzaG93c1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzaG93Q2VsZWJyYXRpb24gJiYgIWlzTXV0ZWQpIHtcbiAgICAgIC8vIFNtYWxsIGRlbGF5IHRvIGVuc3VyZSB0aGUgc2NyZWVuIGhhcyByZW5kZXJlZFxuICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcGxheUJhY2tncm91bmRNdXNpYygpO1xuICAgICAgfSwgNTAwKTtcbiAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIH0gZWxzZSBpZiAoIXNob3dDZWxlYnJhdGlvbikge1xuICAgICAgc3RvcEJhY2tncm91bmRNdXNpYygpO1xuICAgIH1cbiAgfSwgW3Nob3dDZWxlYnJhdGlvbiwgaXNNdXRlZCwgcGxheUJhY2tncm91bmRNdXNpYywgc3RvcEJhY2tncm91bmRNdXNpY10pO1xuXG4gIC8vIExvYWQgbWVkaWEgZmlsZXMgb25seSBvbmNlIG9uIGNvbXBvbmVudCBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRNZWRpYSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHNldE1lZGlhTG9hZGluZyh0cnVlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lZGlhRGF0YSA9IGF3YWl0IGxvYWRNZWRpYUZpbGVzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkZWQgbWVkaWEgZGF0YTonLCBtZWRpYURhdGEpO1xuICAgICAgICBzZXRQaWN0dXJlcyhtZWRpYURhdGEucGljdHVyZXMpO1xuICAgICAgICBzZXRWaWRlb3MobWVkaWFEYXRhLnZpZGVvcyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdWaWRlb3Mgc2V0OicsIG1lZGlhRGF0YS52aWRlb3MpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBtZWRpYTonLCBlcnJvcik7XG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIGVtcHR5IGFycmF5c1xuICAgICAgICBzZXRQaWN0dXJlcyhbXSk7XG4gICAgICAgIHNldFZpZGVvcyhbXSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRNZWRpYUxvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsb2FkTWVkaWEoKTtcbiAgfSwgW10pOyAvLyBPbmx5IHJ1biBvbmNlIG9uIG1vdW50XG5cbiAgLy8gR2FtZSBsb29wIGZvciBmYWxsaW5nIHRpbGVzIC0gb3B0aW1pemVkIHdpdGggaW50ZXJ2YWwgaW5zdGVhZCBvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgY29uc3QgZ2FtZUxvb3AgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFnYW1lU3RhcnRlZCB8fCBnYW1lT3ZlciB8fCBnYW1lQ29tcGxldGVkKSByZXR1cm47XG5cbiAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgXG4gICAgLy8gU3Bhd24gbmV3IHRpbGVzIGV2ZXJ5IDIgc2Vjb25kcywgYnV0IGluY3JlYXNlIGZyZXF1ZW5jeSBhcyBnYW1lIHByb2dyZXNzZXNcbiAgICBjb25zdCBiYXNlSW50ZXJ2YWwgPSBhY3RpdmVQb3dlclVwcy5zbG93TW90aW9uLmFjdGl2ZSA/IDI1MDAgOiAxNTAwO1xuICAgIGNvbnN0IHNwYXduSW50ZXJ2YWwgPSBNYXRoLm1heChiYXNlSW50ZXJ2YWwgLSAodGlsZXNTcGF3bmVkICogMTAwKSwgODAwKTsgLy8gRmFzdGVyIHNwYXduaW5nIG92ZXIgdGltZVxuICAgIFxuICAgIC8vIEluIGVuZGxlc3MgbW9kZSwga2VlcCBzcGF3bmluZyB0aWxlcyBpbmRlZmluaXRlbHlcbiAgICAvLyBJbiBub3JtYWwgbW9kZSwgc3Bhd24gdGlsZXMgdW50aWwgd2UgaGF2ZSBlbm91Z2ggZm9yIHRoZSBmdWxsIG1lbG9keVxuICAgIGNvbnN0IHNob3VsZFNwYXduID0gZW5kbGVzc01vZGUgPyB0cnVlIDogdGlsZXNTcGF3bmVkIDwgaGFwcHlCaXJ0aGRheU5vdGVzLmxlbmd0aCArIDI7IC8vIEV4dHJhIHRpbGVzIHRvIGVuc3VyZSBjb21wbGV0aW9uXG4gICAgXG4gICAgaWYgKGN1cnJlbnRUaW1lIC0gbGFzdFRpbGVTcGF3blJlZi5jdXJyZW50ID4gc3Bhd25JbnRlcnZhbCAmJiBzaG91bGRTcGF3bikge1xuICAgICAgY29uc3Qgbm90ZUluZGV4ID0gZW5kbGVzc01vZGUgPyB0aWxlc1NwYXduZWQgJSBoYXBweUJpcnRoZGF5Tm90ZXMubGVuZ3RoIDogTWF0aC5taW4odGlsZXNTcGF3bmVkLCBoYXBweUJpcnRoZGF5Tm90ZXMubGVuZ3RoIC0gMSk7XG4gICAgICBjb25zdCBuZXdUaWxlID0ge1xuICAgICAgICBpZDogRGF0ZS5ub3coKSArIE1hdGgucmFuZG9tKCksIC8vIEJldHRlciB1bmlxdWUgSURcbiAgICAgICAgbm90ZTogaGFwcHlCaXJ0aGRheU5vdGVzW25vdGVJbmRleF0sXG4gICAgICAgIGNvbHVtbjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCksIC8vIDQgY29sdW1uc1xuICAgICAgICB5OiAtODAsIC8vIFN0YXJ0IGFib3ZlIHNjcmVlblxuICAgICAgICBzcGVlZDogYWN0aXZlUG93ZXJVcHMuc2xvd01vdGlvbi5hY3RpdmUgPyBcbiAgICAgICAgICAoMiArIE1hdGguZmxvb3IodGlsZXNTcGF3bmVkIC8gNSkpIDogXG4gICAgICAgICAgKDQgKyBNYXRoLmZsb29yKHRpbGVzU3Bhd25lZCAvIDMpKSwgLy8gU2xvd2VyIGluIHNsb3cgbW90aW9uXG4gICAgICAgIG5vdGVJbmRleDogbm90ZUluZGV4LFxuICAgICAgICBzcGF3bmVkOiB0cnVlXG4gICAgICB9O1xuICAgICAgXG4gICAgICBzZXRGYWxsaW5nVGlsZXMocHJldiA9PiBbLi4ucHJldiwgbmV3VGlsZV0pO1xuICAgICAgc2V0VGlsZXNTcGF3bmVkKHByZXYgPT4gcHJldiArIDEpO1xuICAgICAgbGFzdFRpbGVTcGF3blJlZi5jdXJyZW50ID0gY3VycmVudFRpbWU7XG4gICAgICBcbiAgICAgIC8vIENoYW5jZSB0byBzcGF3biBwb3dlci11cFxuICAgICAgc3Bhd25Qb3dlclVwKCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRpbGUgcG9zaXRpb25zXG4gICAgc2V0RmFsbGluZ1RpbGVzKHByZXYgPT4gcHJldi5tYXAodGlsZSA9PiAoe1xuICAgICAgLi4udGlsZSxcbiAgICAgIHk6IHRpbGUueSArIHRpbGUuc3BlZWRcbiAgICB9KSkuZmlsdGVyKHRpbGUgPT4ge1xuICAgICAgLy8gUmVtb3ZlIHRpbGVzIHRoYXQgaGl0IGJvdHRvbSAobG9zZSBsaWZlIHVubGVzcyBpbnZpbmNpYmxlKVxuICAgICAgaWYgKHRpbGUueSA+IDQ1MCkgeyAvLyBBZGp1c3RlZCBmb3IgZ2FtZSBjb250YWluZXIgaGVpZ2h0XG4gICAgICAgIGlmICghYWN0aXZlUG93ZXJVcHMuaW52aW5jaWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICBzZXRMaXZlcyhwcmV2TGl2ZXMgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3TGl2ZXMgPSBwcmV2TGl2ZXMgLSAxO1xuICAgICAgICAgICAgaWYgKG5ld0xpdmVzIDw9IDApIHtcbiAgICAgICAgICAgICAgc2V0R2FtZU92ZXIodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3TGl2ZXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2V0Q29tYm8oMCk7IC8vIFJlc2V0IGNvbWJvIG9uIG1pc3NcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KSk7XG5cbiAgICAvLyBVcGRhdGUgcG93ZXItdXAgcG9zaXRpb25zXG4gICAgc2V0UG93ZXJVcHMocHJldiA9PiBwcmV2Lm1hcChwb3dlclVwID0+ICh7XG4gICAgICAuLi5wb3dlclVwLFxuICAgICAgeTogcG93ZXJVcC55ICsgcG93ZXJVcC5zcGVlZFxuICAgIH0pKS5maWx0ZXIocG93ZXJVcCA9PiBwb3dlclVwLnkgPCA1MDApKTsgLy8gUmVtb3ZlIHBvd2VyLXVwcyB0aGF0IGZhbGwgb2ZmIHNjcmVlblxuICB9LCBbZ2FtZVN0YXJ0ZWQsIGdhbWVPdmVyLCBnYW1lQ29tcGxldGVkLCB0aWxlc1NwYXduZWQsIGhhcHB5QmlydGhkYXlOb3RlcywgZW5kbGVzc01vZGUsIGFjdGl2ZVBvd2VyVXBzLnNsb3dNb3Rpb24uYWN0aXZlLCBhY3RpdmVQb3dlclVwcy5pbnZpbmNpYmxlLmFjdGl2ZSwgc3Bhd25Qb3dlclVwXSk7XG4gIFxuXG5cbiAgLy8gU3RhcnQgZ2FtZSBsb29wIHdoZW4gZ2FtZSBzdGFydHMgLSB1c2luZyBzZXRJbnRlcnZhbCBmb3Igc21vb3RoZXIgcGVyZm9ybWFuY2VcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZ2FtZVN0YXJ0ZWQgJiYgIWdhbWVPdmVyICYmICFnYW1lQ29tcGxldGVkKSB7XG4gICAgICBnYW1lTG9vcFJlZi5jdXJyZW50ID0gc2V0SW50ZXJ2YWwoZ2FtZUxvb3AsIDUwKTsgLy8gMjAgRlBTIGZvciBzbW9vdGhlciBwZXJmb3JtYW5jZVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGdhbWVMb29wUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChnYW1lTG9vcFJlZi5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZ2FtZVN0YXJ0ZWQsIGdhbWVPdmVyLCBnYW1lQ29tcGxldGVkLCBnYW1lTG9vcF0pO1xuICBcbiAgY29uc3QgaGFuZGxlVGlsZUNsaWNrID0gdXNlQ2FsbGJhY2soKHRpbGVJZCkgPT4ge1xuICAgIC8vIFBsYXkgdGhlIG5vdGUgaW1tZWRpYXRlbHkgZm9yIGJldHRlciBmZWVkYmFja1xuICAgIHRyeSB7XG4gICAgICBwbGF5Tm90ZSgyNjEuNjMsIDMwMCk7IC8vIFF1aWNrIGZlZWRiYWNrIHNvdW5kXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdBdWRpbyBwbGF5YmFjayBmYWlsZWQ6JywgZXJyb3IpO1xuICAgIH1cbiAgICBcbiAgICBzZXRGYWxsaW5nVGlsZXMocHJldiA9PiB7XG4gICAgICBjb25zdCB0aWxlSW5kZXggPSBwcmV2LmZpbmRJbmRleCh0aWxlID0+IHRpbGUuaWQgPT09IHRpbGVJZCk7XG4gICAgICBpZiAodGlsZUluZGV4ID09PSAtMSkgcmV0dXJuIHByZXY7XG4gICAgICBcbiAgICAgIGNvbnN0IHRpbGUgPSBwcmV2W3RpbGVJbmRleF07XG4gICAgICBcbiAgICAgIC8vIFBsYXkgdGhlIGFjdHVhbCBub3RlXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwbGF5Tm90ZSh0aWxlLm5vdGUuZnJlcXVlbmN5LCB0aWxlLm5vdGUuZHVyYXRpb24pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdBdWRpbyBwbGF5YmFjayBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9LCA1MCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCB2aXN1YWwgZmVlZGJhY2sgLSBjcmVhdGUgYSBidXJzdCBlZmZlY3RcbiAgICAgIGNvbnN0IGJ1cnN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgYnVyc3RFbGVtZW50LmNsYXNzTmFtZSA9ICdhYnNvbHV0ZSBwb2ludGVyLWV2ZW50cy1ub25lIHotNTAnO1xuICAgICAgYnVyc3RFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHsodGlsZS5jb2x1bW4gKiAyNSkgKyAxMi41fSVgO1xuICAgICAgYnVyc3RFbGVtZW50LnN0eWxlLnRvcCA9IGAke3RpbGUueSArIDMwfXB4YDtcbiAgICAgIGJ1cnN0RWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LTJ4bCBhbmltYXRlLWJvdW5jZVwiIHN0eWxlPVwiYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjZzO1wiPlxuICAgICAgICAgICR7dGlsZS5ub3RlLm5vdGV9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC15ZWxsb3ctMzAwIHRleHQtbGcgYW5pbWF0ZS1waW5nXCIgc3R5bGU9XCJhbmltYXRpb24tZHVyYXRpb246IDAuOHM7XCI+XG4gICAgICAgICAg4pyoXG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYW1lLWFyZWEnKS5hcHBlbmRDaGlsZChidXJzdEVsZW1lbnQpO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgYnVyc3QgZWZmZWN0IGFmdGVyIGFuaW1hdGlvblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChidXJzdEVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGJ1cnN0RWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGJ1cnN0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMDApO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgdGhlIGNsaWNrZWQgdGlsZSBpbW1lZGlhdGVseVxuICAgICAgcmV0dXJuIHByZXYuZmlsdGVyKHQgPT4gdC5pZCAhPT0gdGlsZUlkKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBVcGRhdGUgc2NvcmUgd2l0aCBtdWx0aXBsaWVyIGFuZCBjb21ib1xuICAgIGNvbnN0IGJhc2VTY29yZSA9IDEwO1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBhY3RpdmVQb3dlclVwcy5zY29yZU11bHRpcGxpZXIuYWN0aXZlID8gYWN0aXZlUG93ZXJVcHMuc2NvcmVNdWx0aXBsaWVyLm11bHRpcGxpZXIgOiAxO1xuICAgIGNvbnN0IGNvbWJvQm9udXMgPSBNYXRoLmZsb29yKGNvbWJvIC8gNSk7IC8vIEJvbnVzIGV2ZXJ5IDUgY29tYm9cbiAgICBjb25zdCBmaW5hbFNjb3JlID0gYmFzZVNjb3JlICogbXVsdGlwbGllciArIGNvbWJvQm9udXM7XG4gICAgXG4gICAgc2V0U2NvcmUocHJldlNjb3JlID0+IHByZXZTY29yZSArIGZpbmFsU2NvcmUpO1xuICAgIHNldENvbWJvKHByZXYgPT4ge1xuICAgICAgY29uc3QgbmV3Q29tYm8gPSBwcmV2ICsgMTtcbiAgICAgIHNldE1heENvbWJvKGN1cnJlbnQgPT4gTWF0aC5tYXgoY3VycmVudCwgbmV3Q29tYm8pKTtcbiAgICAgIHJldHVybiBuZXdDb21ibztcbiAgICB9KTtcbiAgICBcbiAgICBzZXRUaWxlc0hpdChwcmV2SGl0ID0+IHtcbiAgICAgIGNvbnN0IG5ld0hpdCA9IHByZXZIaXQgKyAxO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBnYW1lIGlzIGNvbXBsZXRlZCAtIG5lZWQgdG8gaGl0IGFsbCB0aWxlc1xuICAgICAgaWYgKG5ld0hpdCA+PSBoYXBweUJpcnRoZGF5Tm90ZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChlbmRsZXNzTW9kZSkge1xuICAgICAgICAgIC8vIEluIGVuZGxlc3MgbW9kZSwgY29udGludWUgc3Bhd25pbmcgdGlsZXNcbiAgICAgICAgICBzZXRUaWxlc1NwYXduZWQoMCk7XG4gICAgICAgICAgc2V0VGlsZXNIaXQoMCk7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIFJlc2V0IGhpdCBjb3VudCBmb3IgZW5kbGVzcyBtb2RlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2hvdyBjaG9pY2UgbWVudSBhZnRlciBnYW1lIGNvbXBsZXRpb25cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldEdhbWVDb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgICAgICBzZXRTaG93Q2hvaWNlTWVudSh0cnVlKTtcbiAgICAgICAgICAgIHNldE5hbWUoXCJCZWF1dGlmdWwgV2lmZXlcIik7XG4gICAgICAgICAgICBzZXRNZXNzYWdlKFwiSGFwcHkgQmlydGhkYXkhIFlvdSd2ZSB1bmxvY2tlZCBhIHNwZWNpYWwgc3VycHJpc2UuXCIpO1xuICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIG5ld0hpdDtcbiAgICB9KTtcbiAgfSwgW2hhcHB5QmlydGhkYXlOb3Rlcy5sZW5ndGgsIGVuZGxlc3NNb2RlLCBhY3RpdmVQb3dlclVwcy5zY29yZU11bHRpcGxpZXIuYWN0aXZlLCBhY3RpdmVQb3dlclVwcy5zY29yZU11bHRpcGxpZXIubXVsdGlwbGllciwgY29tYm8sIHNldE5hbWUsIHNldE1lc3NhZ2VdKTtcbiAgXG4gIC8vIEhhbmRsZXIgZm9yIG9wZW5pbmcgS3VrdSBtZXNzYWdlXG4gIGNvbnN0IG9wZW5LdWt1TWVzc2FnZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnT3BlbmluZyBLdWt1IG1lc3NhZ2UsIGN1cnJlbnQgc3RhdGU6Jywgc2hvd0t1a3VNZXNzYWdlKTtcbiAgICBzZXRTaG93S3VrdU1lc3NhZ2UodHJ1ZSk7XG4gICAgY29uc29sZS5sb2coJ0t1a3UgbWVzc2FnZSBzdGF0ZSBzZXQgdG8gdHJ1ZScpO1xuICB9LCBbc2hvd0t1a3VNZXNzYWdlXSk7XG4gIFxuICBjb25zdCByZXNldEdhbWUgPSAoKSA9PiB7XG4gICAgc2V0R2FtZVN0YXJ0ZWQoZmFsc2UpO1xuICAgIHNldEdhbWVDb21wbGV0ZWQoZmFsc2UpO1xuICAgIHNldFNob3dDZWxlYnJhdGlvbihmYWxzZSk7XG4gICAgc2V0U2NvcmUoMCk7XG4gICAgc2V0RmFsbGluZ1RpbGVzKFtdKTtcbiAgICBzZXRHYW1lT3ZlcihmYWxzZSk7XG4gICAgc2V0TGl2ZXMoMyk7XG4gICAgc2V0VGlsZXNIaXQoMCk7XG4gICAgc2V0VGlsZXNTcGF3bmVkKDApO1xuICAgIHNldEVuZGxlc3NNb2RlKGZhbHNlKTtcbiAgICBzZXRTaG93Q2hvaWNlTWVudShmYWxzZSk7XG4gICAgc2V0U2hvd1NwZWNpYWxQb2VtKGZhbHNlKTtcbiAgICBzZXRTaG93S3VrdU1lc3NhZ2UoZmFsc2UpO1xuICAgIHNldFBvd2VyVXBzKFtdKTtcbiAgICBzZXRBY3RpdmVQb3dlclVwcyh7XG4gICAgICBpbnZpbmNpYmxlOiB7IGFjdGl2ZTogZmFsc2UsIHRpbWVMZWZ0OiAwIH0sXG4gICAgICBzbG93TW90aW9uOiB7IGFjdGl2ZTogZmFsc2UsIHRpbWVMZWZ0OiAwIH0sXG4gICAgICBzY29yZU11bHRpcGxpZXI6IHsgYWN0aXZlOiBmYWxzZSwgdGltZUxlZnQ6IDAsIG11bHRpcGxpZXI6IDEgfVxuICAgIH0pO1xuICAgIHNldENvbWJvKDApO1xuICAgIHNldE1heENvbWJvKDApO1xuICAgIGxhc3RUaWxlU3Bhd25SZWYuY3VycmVudCA9IDA7XG4gICAgXG4gICAgLy8gQ2FuY2VsIGFueSBydW5uaW5nIGdhbWUgbG9vcFxuICAgIGlmIChnYW1lTG9vcFJlZi5jdXJyZW50KSB7XG4gICAgICBjbGVhckludGVydmFsKGdhbWVMb29wUmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBuZXcgcG9lbVxuICAgIGNvbnN0IHJhbmRvbVBvZW0gPSBwb2Vtc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb2Vtcy5sZW5ndGgpXTtcbiAgICBzZXRDdXJyZW50UG9lbShyYW5kb21Qb2VtKTtcbiAgfTtcbiAgXG4gIGlmICghaXNVbmxvY2tlZCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBkeW5hbWljLWJnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHB4LTQgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICAgIHsvKiBGbG9hdGluZyBIZWFydHMgQmFja2dyb3VuZCAqL31cbiAgICAgICAgPEZsb2F0aW5nSGVhcnRzQmFja2dyb3VuZCBcbiAgICAgICAgICBoZWFydENvdW50PXs4fSBcbiAgICAgICAgICBvcGFjaXR5PXswLjE1fSBcbiAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbj17MTB9XG4gICAgICAgICAgcHVsc2VEdXJhdGlvbj17MTJ9XG4gICAgICAgICAgc2l6ZT1cInctNCBoLTRcIlxuICAgICAgICAgIGNvbG9yPVwidGV4dC1waW5rLTMwMFwiXG4gICAgICAgIC8+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdC1kYXJrIHJvdW5kZWQtM3hsIHAtNCBzbTpwLTYgbWQ6cC04IHRleHQtY2VudGVyIG1heC13LXhzIHNtOm1heC13LW1kIHctZnVsbCByZWxhdGl2ZSB6LTEwXCI+XG4gICAgICAgICAgPExvY2sgY2xhc3NOYW1lPVwidy0xMiBoLTEyIHNtOnctMTYgc206aC0xNiB0ZXh0LXdoaXRlIG14LWF1dG8gbWItNFwiIC8+XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtMnhsIHNtOnRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LXdoaXRlIG1iLTRcIj7wn46BIFNwZWNpYWwgU3VycHJpc2U8L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUvOTAgbWItNiB0ZXh0LXNtIHNtOnRleHQtYmFzZVwiPlRoaXMgc3BlY2lhbCBiaXJ0aGRheSBzdXJwcmlzZSBpcyBsb2NrZWQgdW50aWwgU2VwdGVtYmVyIDIzcmQhPC9wPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0IHJvdW5kZWQtMnhsIHAtMyBzbTpwLTQgbWItNlwiPlxuICAgICAgICAgICAgPENsb2NrIGNsYXNzTmFtZT1cInctNiBoLTYgc206dy04IHNtOmgtOCB0ZXh0LXdoaXRlIG14LWF1dG8gbWItMlwiIC8+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjb3VudGRvd24tZGlzcGxheVwiPnt0aW1lTGVmdH08L3A+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlLzgwIHRleHQteHMgc206dGV4dC1zbVwiPnVudGlsIHVubG9jazwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgc3BhY2UteC0yXCI+XG4gICAgICAgICAgICA8SGVhcnQgY2xhc3NOYW1lPVwidy01IGgtNSBzbTp3LTYgc206aC02IHRleHQtcmVkLTMwMCBhbmltYXRlLXB1bHNlXCIgLz5cbiAgICAgICAgICAgIDxIZWFydCBjbGFzc05hbWU9XCJ3LTUgaC01IHNtOnctNiBzbTpoLTYgdGV4dC1waW5rLTMwMCBhbmltYXRlLXB1bHNlXCIgc3R5bGU9e3thbmltYXRpb25EZWxheTogJzAuNXMnfX0gLz5cbiAgICAgICAgICAgIDxIZWFydCBjbGFzc05hbWU9XCJ3LTUgaC01IHNtOnctNiBzbTpoLTYgdGV4dC1yZWQtMzAwIGFuaW1hdGUtcHVsc2VcIiBzdHlsZT17e2FuaW1hdGlvbkRlbGF5OiAnMXMnfX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG4gIFxuICBpZiAoc2hvd0NlbGVicmF0aW9uKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBkeW5hbWljLWJnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiBweS04XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBiZy1ibGFjay8xMFwiPjwvZGl2PlxuICAgICAgICBcbiAgICAgICAgey8qIEZsb2F0aW5nIEVsZW1lbnRzIEJhY2tncm91bmQgKi99XG4gICAgICAgIHtmbG9hdGluZ0VsZW1lbnRzLm1hcCgoZWxlbWVudCwgaSkgPT4gKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbGVmdDogYCR7ZWxlbWVudC5sZWZ0fSVgLFxuICAgICAgICAgICAgICB0b3A6IGAke2VsZW1lbnQudG9wfSVgLFxuICAgICAgICAgICAgICBhbmltYXRpb246IGB3ZWxjb21lRmxvYXQgMTJzIGVhc2UtaW4tb3V0IGluZmluaXRlYCxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2VsZW1lbnQuYW5pbWF0aW9uRGVsYXl9c2BcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2VsZW1lbnQudHlwZSA9PT0gJ2hlYXJ0JyAmJiAoXG4gICAgICAgICAgICAgIDxIZWFydCBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LXBpbmstMzAwIGFuaW1hdGUtcHVsc2UgZmxvYXRpbmctaGVhcnRgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogYCR7ZWxlbWVudC5zaXplICogNH1weGAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICczcydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdub3RlJyAmJiAoXG4gICAgICAgICAgICAgIDxNdXNpYyBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LWJsdWUtMjAwIGFuaW1hdGUtYm91bmNlIGZsb2F0aW5nLW11c2ljYH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMi41cydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdzcGFya2xlJyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgYmcteWVsbG93LTMwMCByb3VuZGVkLWZ1bGwgYW5pbWF0ZS1waW5nIGZsb2F0aW5nLXNwYXJrbGVgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogYCR7ZWxlbWVudC5zaXplICogMn1weGAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke2VsZW1lbnQuc2l6ZSAqIDJ9cHhgLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICc0cydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICAgIFxuICAgICAgICB7LyogQWRkaXRpb25hbCBjZWxlYnJhdGlvbiBoZWFydHMgKi99XG4gICAgICAgIHtbLi4uQXJyYXkoMTApXS5tYXAoKF8sIGkpID0+IChcbiAgICAgICAgICA8SGVhcnRcbiAgICAgICAgICAgIGtleT17YGNlbGVicmF0aW9uLSR7aX1gfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgYWJzb2x1dGUgdy04IGgtOCB0ZXh0LXBpbmstNDAwIGFuaW1hdGUtYm91bmNlIGZsb2F0aW5nLWhlYXJ0YH1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGxlZnQ6IGAke01hdGgucmFuZG9tKCkgKiAxMDB9JWAsXG4gICAgICAgICAgICAgIHRvcDogYCR7TWF0aC5yYW5kb20oKSAqIDEwMH0lYCxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke01hdGgucmFuZG9tKCkgKiAzfXNgLFxuICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7MiArIE1hdGgucmFuZG9tKCkgKiAyfXNgXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSB6LTEwIHRleHQtY2VudGVyIG1heC13LXhzIHNtOm1heC13LW1kIGxnOm1heC13LWxnIG14LTQgdy1mdWxsIG10LTRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdC1kYXJrIHJvdW5kZWQtMnhsIHNtOnJvdW5kZWQtM3hsIHAtNCBzbTpwLTYgbWQ6cC04IG1iLTYgc206bWItOFwiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0yeGwgc206dGV4dC0zeGwgbWQ6dGV4dC00eGwgZm9udC1ib2xkIHRleHQtd2hpdGUgbWItNCBhbmltYXRlLXB1bHNlIG5lb24tdGl0bGVcIj5cbiAgICAgICAgICAgICAg8J+OiSBIQVBQWSBCSVJUSERBWSEg8J+OiVxuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtYmFzZSBzbTp0ZXh0LWxnIG1kOnRleHQteGwgdGV4dC13aGl0ZS84MCBtYi02IHNtOm1iLTggc29mdC1zdWJ0aXRsZVwiPlRvIE15IEJlYXV0aWZ1bCBXaWZleTwvcD5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgey8qIFRyYW5zcGFyZW50IEdhbGxlcnkgQnV0dG9ucyB3aXRoIEJsdXJyZWQgQmFja2dyb3VuZCAqL31cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBzbTpncmlkLWNvbHMtMiBnYXAtNCBtYi02XCI+XG4gICAgICAgICAgICAgIHsvKiBQaG90byBHYWxsZXJ5IEJ1dHRvbiAqL31cbiAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRTaG93UGhvdG9HYWxsZXJ5KHRydWUpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXAgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtMnhsIGgtMzIgc206aC00MCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgaG92ZXI6c2NhbGUtMTA1XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsvKiBCYWNrZ3JvdW5kIEltYWdlcyBDb2xsYWdlICovfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBncmlkIGdyaWQtY29scy0yIGdhcC0xIHAtMlwiPlxuICAgICAgICAgICAgICAgICAge3BpY3R1cmVzLnNsaWNlKDAsIDQpLm1hcCgocGljdHVyZSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3BpY3R1cmUuaWR9IGNsYXNzTmFtZT1cInJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiByb3VuZGVkLWxnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtwaWN0dXJlLnVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17YFByZXZpZXcgJHtpbmRleCArIDF9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgb2JqZWN0LWNvdmVyIGZpbHRlciBibHVyLXNtIGdyb3VwLWhvdmVyOmJsdXItbm9uZSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDBcIlxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgey8qIFRyYW5zcGFyZW50IE92ZXJsYXkgd2l0aCBUZXh0ICovfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBiZy1ibGFjay80MCBncm91cC1ob3ZlcjpiZy1ibGFjay8yMCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgYmFja2Ryb3AtYmx1ci1zbVwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTR4bCBtYi0yIGdyb3VwLWhvdmVyOnNjYWxlLTExMCB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0zMDBcIj7wn5O4PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIGZvbnQtYm9sZCB0ZXh0LWxnIGRyb3Atc2hhZG93LWxnXCI+UGhvdG8gR2FsbGVyeTwvcD5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUvOTAgdGV4dC1zbSBkcm9wLXNoYWRvdy1tZFwiPlZpZXcgbWVtb3JpZXM8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgIHsvKiBWaWRlbyBHYWxsZXJ5IEJ1dHRvbiAqL31cbiAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRTaG93VmlkZW9HYWxsZXJ5KHRydWUpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXAgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtMnhsIGgtMzIgc206aC00MCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgaG92ZXI6c2NhbGUtMTA1XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsvKiBCYWNrZ3JvdW5kIFZpZGVvIFByZXZpZXcgKi99XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIHAtMlwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSB3LWZ1bGwgaC1mdWxsIG92ZXJmbG93LWhpZGRlbiByb3VuZGVkLWxnXCI+XG4gICAgICAgICAgICAgICAgICAgIHt2aWRlb3MubGVuZ3RoID4gMCA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8dmlkZW9cbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17dmlkZW9zWzBdPy51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsIG9iamVjdC1jb3ZlciBmaWx0ZXIgYmx1ci1zbSBncm91cC1ob3ZlcjpibHVyLW5vbmUgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBsb29wXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvUGxheVxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheXNJbmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWQ9XCJtZXRhZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVmlkZW8gcHJldmlldyBlcnJvcjonLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1ibHVlLTUwMCB0by1wdXJwbGUtNjAwIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LTR4bFwiPvCfjqU8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7LyogVHJhbnNwYXJlbnQgT3ZlcmxheSB3aXRoIFRleHQgKi99XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIGJnLWJsYWNrLzQwIGdyb3VwLWhvdmVyOmJnLWJsYWNrLzIwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBiYWNrZHJvcC1ibHVyLXNtXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtNHhsIG1iLTIgZ3JvdXAtaG92ZXI6c2NhbGUtMTEwIHRyYW5zaXRpb24tdHJhbnNmb3JtIGR1cmF0aW9uLTMwMFwiPvCfjqU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUgZm9udC1ib2xkIHRleHQtbGcgZHJvcC1zaGFkb3ctbGdcIj5WaWRlbyBHYWxsZXJ5PC9wPlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS85MCB0ZXh0LXNtIGRyb3Atc2hhZG93LW1kXCI+V2F0Y2ggbW9tZW50czwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgey8qIEt1a3UgTWVzc2FnZSBCdXR0b24gLSBQb3NpdGlvbmVkIHVuZGVyIGdhbGxlcnkgYnV0dG9ucyAqL31cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWItNlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnS3VrdSBidXR0b24gY2xpY2tlZCEnKTtcbiAgICAgICAgICAgICAgICAgIG9wZW5LdWt1TWVzc2FnZSgpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuLXNvbGlkLTMgdGV4dC13aGl0ZSBweC00IHNtOnB4LTYgcHktMiBzbTpweS0zIHJvdW5kZWQtM3hsIGgtMjQgc206aC0yMyB0ZXh0LXNtIHNtOnRleHQtYmFzZSBtZDp0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHsvKiBHbG93IGVmZmVjdCAqL31cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgcm91bmRlZC0yeGwgc2hhZG93LTJ4bCBncm91cC1ob3ZlcjpzaGFkb3ctcGluay01MDAvNTAgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCIgXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCAzMHB4IHJnYmEoMjM4LCAyMCwgMTI5LCAwLjQpLCAwIDAgNjBweCByZ2JhKDE0NywgNTEsIDIzNCwgMC4yKSdcbiAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7LyogQ29udGVudCAqL31cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHotMTAgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgaC1mdWxsXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtM3hsIHNtOnRleHQtNHhsIG1iLTEgZ3JvdXAtaG92ZXI6c2NhbGUtMTEwIHRyYW5zaXRpb24tdHJhbnNmb3JtIGR1cmF0aW9uLTMwMFwiPvCfkpY8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUgZm9udC1ib2xkIHRleHQtbGcgc206dGV4dC14bCBkcm9wLXNoYWRvdy1sZyBncm91cC1ob3Zlcjpkcm9wLXNoYWRvdy0yeGwgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCI+XG4gICAgICAgICAgICAgICAgICAgIEZvciBNeSBCZWF1dGlmdWwgS3VrdVxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS85MCB0ZXh0LXNtIGRyb3Atc2hhZG93LW1kXCI+U3BlY2lhbCBtZXNzYWdlPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgXG5cblxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0LWRhcmsgcm91bmRlZC0yeGwgc206cm91bmRlZC0zeGwgcC00IHNtOnAtNiBtYi02IHNtOm1iLThcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxnIHNtOnRleHQteGwgZm9udC1ib2xkIHRleHQtd2hpdGUgbWItMyBzbTptYi00IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGZsZXgtd3JhcFwiPlxuICAgICAgICAgICAgICA8SGVhcnQgY2xhc3NOYW1lPVwidy01IGgtNSBzbTp3LTYgc206aC02IG1yLTEgc206bXItMiB0ZXh0LXJlZC0zMDBcIiAvPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPkEgUG9lbSBKdXN0IEZvciBZb3U8L3NwYW4+XG4gICAgICAgICAgICAgIDxIZWFydCBjbGFzc05hbWU9XCJ3LTUgaC01IHNtOnctNiBzbTpoLTYgbWwtMSBzbTptbC0yIHRleHQtcmVkLTMwMFwiIC8+XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS85MCB3aGl0ZXNwYWNlLXByZS1saW5lIHRleHQtc20gc206dGV4dC1iYXNlIG1kOnRleHQtbGcgbGVhZGluZy1yZWxheGVkXCI+XG4gICAgICAgICAgICAgIHtjdXJyZW50UG9lbX1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgc206ZmxleC1yb3cgZ2FwLTMgc206Z2FwLTQganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0b3BCYWNrZ3JvdW5kTXVzaWMoKTtcbiAgICAgICAgICAgICAgICByZXNldEdhbWUoKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuLXNvbGlkLTEgdGV4dC13aGl0ZSBweC00IHNtOnB4LTYgcHktMiBzbTpweS0zIHJvdW5kZWQtZnVsbCB0ZXh0LXNtIHNtOnRleHQtYmFzZSBtZDp0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+OtSBQbGF5IEFnYWluXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmRvbVBvZW0gPSBwb2Vtc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb2Vtcy5sZW5ndGgpXTtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50UG9lbShyYW5kb21Qb2VtKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuLXNvbGlkLTIgdGV4dC13aGl0ZSBweC00IHNtOnB4LTYgcHktMiBzbTpweS0zIHJvdW5kZWQtZnVsbCB0ZXh0LXNtIHNtOnRleHQtYmFzZSBtZDp0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+SnSBOZXcgUG9lbVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dTcGVjaWFsUG9lbSh0cnVlKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuLXNvbGlkLTMgdGV4dC13aGl0ZSBweC00IHNtOnB4LTYgcHktMiBzbTpweS0zIHJvdW5kZWQtZnVsbCB0ZXh0LXNtIHNtOnRleHQtYmFzZSBtZDp0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg4pyoIFNwZWNpYWwgUG9lbVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogS3VrdSBNZXNzYWdlIE1vZGFsICovfVxuICAgICAgICA8S3VrdU1lc3NhZ2UgXG4gICAgICAgICAgICAgICAgICBpc1Zpc2libGU9e3Nob3dLdWt1TWVzc2FnZX0gXG4gICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRTaG93S3VrdU1lc3NhZ2UoZmFsc2UpfSBcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICBcbiAgICAgICAgey8qIE11dGUgQnV0dG9uIC0gRml4ZWQgUG9zaXRpb24gQm90dG9tIExlZnQgKi99XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTXV0ZSBidXR0b24gY2xpY2tlZCwgY3VycmVudCBzdGF0ZTonLCBpc011dGVkKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld011dGVkU3RhdGUgPSAhaXNNdXRlZDtcbiAgICAgICAgICAgIHNldElzTXV0ZWQobmV3TXV0ZWRTdGF0ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhhbmRsZSBhdWRpbyBjb250ZXh0IHJlc3VtZSBpZiBuZWVkZWRcbiAgICAgICAgICAgIGlmICghbmV3TXV0ZWRTdGF0ZSAmJiBhdWRpb0NvbnRleHRSZWYuY3VycmVudCAmJiBhdWRpb0NvbnRleHRSZWYuY3VycmVudC5zdGF0ZSA9PT0gJ3N1c3BlbmRlZCcpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhdWRpb0NvbnRleHRSZWYuY3VycmVudC5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIHJlc3VtZSBhdWRpbyBjb250ZXh0OicsIGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTdG9wIGN1cnJlbnQgYmFja2dyb3VuZCBtdXNpYyBpZiBtdXRpbmdcbiAgICAgICAgICAgIGlmIChuZXdNdXRlZFN0YXRlKSB7XG4gICAgICAgICAgICAgIHN0b3BCYWNrZ3JvdW5kTXVzaWMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFJlc3RhcnQgYmFja2dyb3VuZCBtdXNpYyBpZiB1bm11dGluZ1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBwbGF5QmFja2dyb3VuZE11c2ljKCk7XG4gICAgICAgICAgICAgIH0sIDEwMCk7IC8vIFNtYWxsIGRlbGF5IHRvIGVuc3VyZSBzdGF0ZSBpcyB1cGRhdGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJmaXhlZCBib3R0b20tNiBsZWZ0LTYgei01MCBiZy1ibGFjay81MCBob3ZlcjpiZy1ibGFjay83MCBiYWNrZHJvcC1ibHVyLXNtIHJvdW5kZWQtZnVsbCBwLTQgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGhvdmVyOnNjYWxlLTExMCBncm91cCBzaGFkb3ctbGdcIlxuICAgICAgICAgIHRpdGxlPXtpc011dGVkID8gXCJVbm11dGUgbXVzaWNcIiA6IFwiTXV0ZSBtdXNpY1wifVxuICAgICAgICA+XG4gICAgICAgICAge2lzTXV0ZWQgPyAoXG4gICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cInctNiBoLTYgdGV4dC13aGl0ZS84MCBncm91cC1ob3Zlcjp0ZXh0LXdoaXRlXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk01LjU4NiAxNUg0YTEgMSAwIDAxLTEtMXYtNGExIDEgMCAwMTEtMWgxLjU4Nmw0LjcwNy00LjcwN0MxMC45MjMgMy42NjMgMTIgNC4xMDkgMTIgNXYxNGMwIC44OTEtMS4wNzcgMS4zMzctMS43MDcuNzA3TDUuNTg2IDE1elwiIC8+XG4gICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk0xNyAxNGwyLTJtMCAwbDItMm0tMiAybC0yLTJtMiAybDIgMlwiIC8+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJ3LTYgaC02IHRleHQtd2hpdGUvODAgZ3JvdXAtaG92ZXI6dGV4dC13aGl0ZVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICA8cGF0aCBzdHJva2VMaW5lY2FwPVwicm91bmRcIiBzdHJva2VMaW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlV2lkdGg9ezJ9IGQ9XCJNMTUuNTM2IDguNDY0YTUgNSAwIDAxMCA3LjA3Mm0yLjgyOC05LjlhOSA5IDAgMDEwIDEyLjcyOE01LjU4NiAxNUg0YTEgMSAwIDAxLTEtMXYtNGExIDEgMCAwMTEtMWgxLjU4Nmw0LjcwNy00LjcwN0MxMC45MjMgMy42NjMgMTIgNC4xMDkgMTIgNXYxNGMwIC44OTEtMS4wNzcgMS4zMzctMS43MDcuNzA3TDUuNTg2IDE1elwiIC8+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgXG4gICAgICAgIHsvKiBTcGVjaWFsIFBvZW0gU2xpZGluZyBQYW5lbCAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BmaXhlZCBpbnNldC0wIHotMzAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZHVyYXRpb24tNTAwIGVhc2UtaW4tb3V0ICR7c2hvd1NwZWNpYWxQb2VtID8gJ3RyYW5zbGF0ZS14LTAnIDogJ3RyYW5zbGF0ZS14LWZ1bGwnfWB9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBiZy1ibGFjay8yMCBiYWNrZHJvcC1ibHVyLXNtXCIgb25DbGljaz17KCkgPT4gc2V0U2hvd1NwZWNpYWxQb2VtKGZhbHNlKX0+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSByaWdodC0wIHRvcC0wIGgtZnVsbCB3LWZ1bGwgbWF4LXctMnhsIGR5bmFtaWMtYmcgc2hhZG93LTJ4bCBvdmVyZmxvdy15LWF1dG9cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC04XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyIG1iLTZcIj5cbiAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0zeGwgZm9udC1ib2xkIHRleHQtd2hpdGVcIj7inKggU3BlY2lhbCBQb2VtIOKcqDwvaDI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd1NwZWNpYWxQb2VtKGZhbHNlKX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdCBob3ZlcjpnbGFzcy1lZmZlY3QtZGFyayB0ZXh0LXdoaXRlIHJvdW5kZWQtZnVsbCBwLTIgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwIGhvdmVyOnNjYWxlLTExMFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAg4pyVXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnbGFzcy1lZmZlY3QtZGFyayByb3VuZGVkLTN4bCBwLThcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIG1iLTZcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC02eGwgbWItNFwiPvCfkpY8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCBmb250LWJvbGQgdGV4dC13aGl0ZSBtYi0yXCI+RnJvbSBNeSBIZWFydCB0byBZb3VyczwvaDM+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMjQgaC0xIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1waW5rLTMwMCB0by1yZWQtMzAwIG14LWF1dG8gcm91bmRlZC1mdWxsXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlLzk1IHRleHQtbGcgbGVhZGluZy1yZWxheGVkIHdoaXRlc3BhY2UtcHJlLWxpbmUgZm9udC1zZXJpZiB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAge3NwZWNpYWxQb2VtfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgbXQtOFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTI0IGgtMSBiZy1ncmFkaWVudC10by1yIGZyb20tcGluay0zMDAgdG8tcmVkLTMwMCBteC1hdXRvIHJvdW5kZWQtZnVsbCBtYi00XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlLzgwIGl0YWxpYyB0ZXh0LXNtXCI+V3JpdHRlbiB3aXRoIGFsbCBteSBsb3ZlIPCfkpU8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBMb3ZlIG1lc3NhZ2UgaW4gYm90dG9tIHJpZ2h0ICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpeGVkIGJvdHRvbS00IHJpZ2h0LTQgei0yMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0IHJvdW5kZWQtMnhsIHB4LTQgcHktMiBhbmltYXRlLXB1bHNlXCI+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlLzkwIHRleHQtc20gZm9udC1tZWRpdW0gaXRhbGljXCI+XG4gICAgICAgICAgICAgIEkgbG92ZSB5b3UgbXkgZGFybGluZyBrdWt1IPCfkpVcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIFBob3RvIEdhbGxlcnkgTW9kYWwgLSBSZW5kZXJlZCBhdCByb290IGxldmVsIGZvciBwcm9wZXIgZmxvYXRpbmcgb3ZlcmxheSAqL31cbiAgICAgIHtzaG93UGhvdG9HYWxsZXJ5ICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIHotWzk5OTldIGJnLWJsYWNrLzgwIGJhY2tkcm9wLWJsdXItbWRcIj5cbiAgICAgICAgICB7LyogQ2xvc2UgQnV0dG9uICovfVxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dQaG90b0dhbGxlcnkoZmFsc2UpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTYgcmlnaHQtNiB6LVsxMDAwMF0gdGV4dC13aGl0ZS84MCBob3Zlcjp0ZXh0LXdoaXRlIGJnLWJsYWNrLzUwIGhvdmVyOmJnLWJsYWNrLzcwIHJvdW5kZWQtZnVsbCBwLTQgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGhvdmVyOnNjYWxlLTExMFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJ3LTggaC04XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCIgLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBHYWxsZXJ5IFRpdGxlICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTYgbGVmdC02IHotWzEwMDAwXVwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LXdoaXRlIGZsZXggaXRlbXMtY2VudGVyIGdhcC0zXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtNHhsXCI+8J+TuDwvc3Bhbj5cbiAgICAgICAgICAgICAgUGhvdG8gR2FsbGVyeVxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogRnVsbCBTY3JlZW4gR2FsbGVyeSBHcmlkICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBwLTYgcHQtMjQgb3ZlcmZsb3cteS1hdXRvXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtbnMtMiBzbTpjb2x1bW5zLTMgbWQ6Y29sdW1ucy00IGxnOmNvbHVtbnMtNSB4bDpjb2x1bW5zLTYgZ2FwLTQgc3BhY2UteS00XCI+XG4gICAgICAgICAgICAgIHtwaWN0dXJlcy5tYXAoKHBpY3R1cmUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUmFuZG9tIGhlaWdodHMgZm9yIG1hc29ucnkgZWZmZWN0XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFsnaC00OCcsICdoLTY0JywgJ2gtNTYnLCAnaC03MicsICdoLTYwJywgJ2gtODAnXTtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5kb21IZWlnaHQgPSBoZWlnaHRzW2luZGV4ICUgaGVpZ2h0cy5sZW5ndGhdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGtleT17cGljdHVyZS5pZH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgcmVsYXRpdmUgJHtyYW5kb21IZWlnaHR9IHJvdW5kZWQtMnhsIG92ZXJmbG93LWhpZGRlbiBncm91cCBjdXJzb3ItcG9pbnRlciB0cmFuc2Zvcm0gaG92ZXI6c2NhbGUtMTA1IHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBzaGFkb3cteGwgaG92ZXI6c2hhZG93LTJ4bCBicmVhay1pbnNpZGUtYXZvaWQgbWItNGB9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNlbGVjdGVkUGhvdG8ocGljdHVyZSl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9e3BpY3R1cmUudXJsfVxuICAgICAgICAgICAgICAgICAgICAgIGFsdD17cGljdHVyZS5hbHQgfHwgYE1lbW9yeSAke2luZGV4ICsgMX1gfVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgb2JqZWN0LWNvdmVyXCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIGJnLWdyYWRpZW50LXRvLXQgZnJvbS1ibGFjay83MCB2aWEtdHJhbnNwYXJlbnQgdG8tdHJhbnNwYXJlbnQgb3BhY2l0eS0wIGdyb3VwLWhvdmVyOm9wYWNpdHktMTAwIHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi0zMDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGJvdHRvbS0zIGxlZnQtMyByaWdodC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIHRleHQtc20gZm9udC1zZW1pYm9sZCBkcm9wLXNoYWRvdy1sZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7cGljdHVyZS5hbHQgfHwgYE1lbW9yeSAke2luZGV4ICsgMX1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIHJpbmctMiByaW5nLXRyYW5zcGFyZW50IGdyb3VwLWhvdmVyOnJpbmctcHVycGxlLTQwMC82MCByb3VuZGVkLTJ4bCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDBcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgey8qIFZpZGVvIEdhbGxlcnkgTW9kYWwgLSBSZW5kZXJlZCBhdCByb290IGxldmVsIGZvciBwcm9wZXIgZmxvYXRpbmcgb3ZlcmxheSAqL31cbiAgICAgIHtzaG93VmlkZW9HYWxsZXJ5ICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIHotWzk5OTldIGJnLWJsYWNrLzgwIGJhY2tkcm9wLWJsdXItbWRcIj5cbiAgICAgICAgICB7LyogQ2xvc2UgQnV0dG9uICovfVxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dWaWRlb0dhbGxlcnkoZmFsc2UpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTYgcmlnaHQtNiB6LVsxMDAwMF0gdGV4dC13aGl0ZS84MCBob3Zlcjp0ZXh0LXdoaXRlIGJnLWJsYWNrLzUwIGhvdmVyOmJnLWJsYWNrLzcwIHJvdW5kZWQtZnVsbCBwLTQgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGhvdmVyOnNjYWxlLTExMFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJ3LTggaC04XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCIgLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBHYWxsZXJ5IFRpdGxlICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTYgbGVmdC02IHotWzEwMDAwXVwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LXdoaXRlIGZsZXggaXRlbXMtY2VudGVyIGdhcC0zXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtNHhsXCI+8J+OpTwvc3Bhbj5cbiAgICAgICAgICAgICAgVmlkZW8gR2FsbGVyeVxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogRnVsbCBTY3JlZW4gVmlkZW8gR3JpZCAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgcC02IHB0LTI0IG92ZXJmbG93LXktYXV0b1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW5zLTEgc206Y29sdW1ucy0yIGxnOmNvbHVtbnMtMyB4bDpjb2x1bW5zLTQgZ2FwLTYgc3BhY2UteS02XCI+XG4gICAgICAgICAgICAgIHtjb25zb2xlLmxvZygnUmVuZGVyaW5nIHZpZGVvczonLCB2aWRlb3MpfVxuICAgICAgICAgICAgICB7dmlkZW9zLmxlbmd0aCA9PT0gMCAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIHRleHQtY2VudGVyIHB5LThcIj5cbiAgICAgICAgICAgICAgICAgIDxwPk5vIHZpZGVvcyBmb3VuZC4gTG9hZGluZy4uLjwvcD5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC13aGl0ZS83MCBtdC0yXCI+Q2hlY2sgY29uc29sZSBmb3IgbG9hZGluZyBlcnJvcnM8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHt2aWRlb3MubWFwKCh2aWRlbywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBEaWZmZXJlbnQgYXNwZWN0IHJhdGlvcyBmb3IgdmFyaWV0eVxuICAgICAgICAgICAgICAgIGNvbnN0IGFzcGVjdFJhdGlvcyA9IFsnYXNwZWN0LXZpZGVvJywgJ2FzcGVjdC1zcXVhcmUnLCAnYXNwZWN0LVs0LzVdJywgJ2FzcGVjdC1bMy80XSddO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmRvbUFzcGVjdCA9IGFzcGVjdFJhdGlvc1tpbmRleCAlIGFzcGVjdFJhdGlvcy5sZW5ndGhdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGtleT17dmlkZW8uaWR9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHJlbGF0aXZlICR7cmFuZG9tQXNwZWN0fSByb3VuZGVkLTJ4bCBvdmVyZmxvdy1oaWRkZW4gZ3JvdXAgY3Vyc29yLXBvaW50ZXIgdHJhbnNmb3JtIGhvdmVyOnNjYWxlLTEwNSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LXhsIGhvdmVyOnNoYWRvdy0yeGwgYnJlYWstaW5zaWRlLWF2b2lkIG1iLTZgfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZFZpZGVvKHZpZGVvKX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHZpZGVvXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPXt2aWRlby51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBvYmplY3QtY292ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWQ9XCJtZXRhZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgcGxheXNJbmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5wbGF5KCkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdWaWRlbyBwbGF5IGZhaWxlZDonLCBlcnIpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1ZpZGVvIGVycm9yOicsIGUsIHZpZGVvLnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkxvYWRlZE1ldGFkYXRhPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY3VycmVudFRpbWUgPSAwLjE7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNhblBsYXk9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVmlkZW8gY2FuIHBsYXk6JywgdmlkZW8udXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgYmctZ3JhZGllbnQtdG8tdCBmcm9tLWJsYWNrLzcwIHZpYS10cmFuc3BhcmVudCB0by10cmFuc3BhcmVudCBvcGFjaXR5LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0xMDAgdHJhbnNpdGlvbi1vcGFjaXR5IGR1cmF0aW9uLTMwMFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgYm90dG9tLTMgbGVmdC0zIHJpZ2h0LTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUgdGV4dC1zbSBmb250LXNlbWlib2xkIGRyb3Atc2hhZG93LWxnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt2aWRlby5hbHQgfHwgYFZpZGVvICR7aW5kZXggKyAxfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWJsYWNrLzUwIGdyb3VwLWhvdmVyOmJnLWJsYWNrLzcwIHJvdW5kZWQtZnVsbCBwLTYgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cInctMTIgaC0xMiB0ZXh0LXdoaXRlIHRyYW5zZm9ybSBncm91cC1ob3ZlcjpzY2FsZS0xMTAgdHJhbnNpdGlvbi10cmFuc2Zvcm1cIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZVdpZHRoPXsyfSBkPVwiTTE0Ljc1MiAxMS4xNjhsLTMuMTk3LTIuMTMyQTEgMSAwIDAwMTAgOS44N3Y0LjI2M2ExIDEgMCAwMDEuNTU1LjgzMmwzLjE5Ny0yLjEzMmExIDEgMCAwMDAtMS42NjR6XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIHJpbmctMiByaW5nLXRyYW5zcGFyZW50IGdyb3VwLWhvdmVyOnJpbmctYmx1ZS00MDAvNjAgcm91bmRlZC0yeGwgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG5cbiAgICAgIHsvKiBQaG90byBWaWV3ZXIgTW9kYWwgLSBSZW5kZXJlZCBhdCByb290IGxldmVsIGZvciBwcm9wZXIgZmxvYXRpbmcgb3ZlcmxheSAqL31cbiAgICAgIHtzZWxlY3RlZFBob3RvICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIHotWzEwMDAxXSBiZy1ibGFjay85NSBiYWNrZHJvcC1ibHVyLWxnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgbWF4LXctWzk1dnddIG1heC1oLVs5NXZoXSB3LWZ1bGwgaC1mdWxsXCI+XG4gICAgICAgICAgICB7LyogQ2xvc2UgYnV0dG9uICovfVxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZFBob3RvKG51bGwpfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHRleHQtd2hpdGUvODAgaG92ZXI6dGV4dC13aGl0ZSBiZy1ibGFjay82MCBob3ZlcjpiZy1ibGFjay84MCByb3VuZGVkLWZ1bGwgcC00IHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBob3ZlcjpzY2FsZS0xMTAgei0xMFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmcgY2xhc3NOYW1lPVwidy04IGgtOFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCIgLz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgey8qIEltYWdlICovfVxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9e3NlbGVjdGVkUGhvdG8udXJsfVxuICAgICAgICAgICAgICBhbHQ9e3NlbGVjdGVkUGhvdG8uYWx0fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsIG9iamVjdC1jb250YWluIHJvdW5kZWQtMnhsIHNoYWRvdy0yeGxcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgey8qIEltYWdlIGluZm8gKi99XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGJvdHRvbS02IGxlZnQtNiByaWdodC02IGJnLWJsYWNrLzcwIGJhY2tkcm9wLWJsdXItc20gcm91bmRlZC0yeGwgcC02XCI+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUgdGV4dC14bCBmb250LXNlbWlib2xkXCI+e3NlbGVjdGVkUGhvdG8uYWx0IHx8ICdNZW1vcnknfTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG5cbiAgICAgIHsvKiBWaWRlbyBQbGF5ZXIgTW9kYWwgLSBSZW5kZXJlZCBhdCByb290IGxldmVsIGZvciBwcm9wZXIgZmxvYXRpbmcgb3ZlcmxheSAqL31cbiAgICAgIHtzZWxlY3RlZFZpZGVvICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIHotWzEwMDAxXSBiZy1ibGFjay85NSBiYWNrZHJvcC1ibHVyLWxnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgbWF4LXctWzk1dnddIG1heC1oLVs5NXZoXSB3LWZ1bGwgaC1mdWxsXCI+XG4gICAgICAgICAgICB7LyogQ2xvc2UgYnV0dG9uICovfVxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZFZpZGVvKG51bGwpfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHRleHQtd2hpdGUvODAgaG92ZXI6dGV4dC13aGl0ZSBiZy1ibGFjay82MCBob3ZlcjpiZy1ibGFjay84MCByb3VuZGVkLWZ1bGwgcC00IHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBob3ZlcjpzY2FsZS0xMTAgei0xMFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmcgY2xhc3NOYW1lPVwidy04IGgtOFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD17Mn0gZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCIgLz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgey8qIFZpZGVvICovfVxuICAgICAgICAgICAgPHZpZGVvXG4gICAgICAgICAgICAgIHNyYz17c2VsZWN0ZWRWaWRlby51cmx9XG4gICAgICAgICAgICAgIGNvbnRyb2xzXG4gICAgICAgICAgICAgIGF1dG9QbGF5XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgb2JqZWN0LWNvbnRhaW4gcm91bmRlZC0yeGwgc2hhZG93LTJ4bFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB7LyogVmlkZW8gaW5mbyAqL31cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgYm90dG9tLTYgbGVmdC02IHJpZ2h0LTYgYmctYmxhY2svNzAgYmFja2Ryb3AtYmx1ci1zbSByb3VuZGVkLTJ4bCBwLTZcIj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSB0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj57c2VsZWN0ZWRWaWRlby5hbHQgfHwgJ1ZpZGVvJ308L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuICBcbiAgaWYgKCFnYW1lU3RhcnRlZCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBkeW5hbWljLWJnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICB7LyogRmxvYXRpbmcgSGVhcnRzIEJhY2tncm91bmQgKi99XG4gICAgICAgIDxGbG9hdGluZ0hlYXJ0c0JhY2tncm91bmQgXG4gICAgICAgICAgaGVhcnRDb3VudD17MTV9IFxuICAgICAgICAgIG9wYWNpdHk9ezAuMjV9IFxuICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uPXsxMn1cbiAgICAgICAgICBwdWxzZUR1cmF0aW9uPXsxNX1cbiAgICAgICAgICBzaXplPVwidy02IGgtNlwiXG4gICAgICAgICAgY29sb3I9XCJ0ZXh0LXBpbmstMjAwXCJcbiAgICAgICAgLz5cbiAgICAgICAgXG4gICAgICAgIHsvKiBGbG9hdGluZyBFbGVtZW50cyBCYWNrZ3JvdW5kICovfVxuICAgICAgICB7ZmxvYXRpbmdFbGVtZW50cy5tYXAoKGVsZW1lbnQsIGkpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSBwb2ludGVyLWV2ZW50cy1ub25lXCJcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGxlZnQ6IGAke2VsZW1lbnQubGVmdH0lYCxcbiAgICAgICAgICAgICAgdG9wOiBgJHtlbGVtZW50LnRvcH0lYCxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uOiBgd2VsY29tZUZsb2F0IDEycyBlYXNlLWluLW91dCBpbmZpbml0ZWAsXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBgJHtlbGVtZW50LmFuaW1hdGlvbkRlbGF5fXNgXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdoZWFydCcgJiYgKFxuICAgICAgICAgICAgICA8SGVhcnQgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGV4dC1waW5rLTMwMCBhbmltYXRlLXB1bHNlIGZsb2F0aW5nLWhlYXJ0YH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnM3MnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7ZWxlbWVudC50eXBlID09PSAnbm90ZScgJiYgKFxuICAgICAgICAgICAgICA8TXVzaWMgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGV4dC1ibHVlLTIwMCBhbmltYXRlLWJvdW5jZSBmbG9hdGluZy1tdXNpY2B9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7ZWxlbWVudC5zaXplICogNH1weGAsXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogJzIuNXMnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7ZWxlbWVudC50eXBlID09PSAnc3BhcmtsZScgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGJnLXllbGxvdy0zMDAgcm91bmRlZC1mdWxsIGFuaW1hdGUtcGluZyBmbG9hdGluZy1zcGFya2xlYH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDJ9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiAyfXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNHMnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFnaWNhbC1jYXJkIGdsYXNzLWVmZmVjdC1kYXJrIHJvdW5kZWQtMnhsIHNtOnJvdW5kZWQtM3hsIHAtNCBzbTpwLTYgbWQ6cC04IHRleHQtY2VudGVyIG1heC13LXhzIHNtOm1heC13LW1kIGxnOm1heC13LWxnIG14LTQgcmVsYXRpdmUgei0xMCB3LWZ1bGxcIj5cbiAgICAgICAgICB7LyogSGFwcHkgQmlydGhkYXkgVGl0bGUgKi99XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtMnhsIHNtOnRleHQtM3hsIG1kOnRleHQtNHhsIGxnOnRleHQtNXhsIGZvbnQtYm9sZCB0ZXh0LXdoaXRlIG1iLTQgc206bWItNiBzaGltbWVyLXRpdGxlIHB4LTJcIj5cbiAgICAgICAgICAgIPCfjokgSEFQUFkgQklSVEhEQVkhIPCfjolcbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtYmFzZSBzbTp0ZXh0LWxnIG1kOnRleHQteGwgdGV4dC13aGl0ZS84MCBtYi02IHNtOm1iLTggc29mdC1zdWJ0aXRsZVwiPlRvIE15IEJlYXV0aWZ1bCBXaWZleTwvcD5cbiAgICAgICAgICBcblxuICAgICAgICAgIHsvKiBQaWFubyBLZXlzIFByZXZpZXcgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi00IHNtOm1iLTZcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBzcGFjZS14LTEgbWItMyBzbTptYi00XCI+XG4gICAgICAgICAgICAgIHtbJ0MnLCAnRCcsICdFJywgJ0YnLCAnRyddLm1hcCgobm90ZSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGtleT17bm90ZX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInBpYW5vLWtleSB3LTYgaC0xMiBzbTp3LTggc206aC0xNiBiZy13aGl0ZSByb3VuZGVkLWItbGcgc2hhZG93LWxnIGZsZXggaXRlbXMtZW5kIGp1c3RpZnktY2VudGVyIHBiLTEgc206cGItMiB0ZXh0LXhzIGZvbnQtYm9sZCB0ZXh0LWdyYXktNzAwIGFuaW1hdGUtcHVsc2UgY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2kgKiAwLjJ9c2AsXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMnMnXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtub3RlfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPE11c2ljIGNsYXNzTmFtZT1cInctMTIgaC0xMiBzbTp3LTE0IHNtOmgtMTQgbWQ6dy0xNiBtZDpoLTE2IHRleHQtd2hpdGUgbXgtYXV0byBtYi0zIHNtOm1iLTQgYW5pbWF0ZS1ib3VuY2VcIiAvPlxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LXhsIHNtOnRleHQtMnhsIGZvbnQtYm9sZCB0ZXh0LXdoaXRlIG1iLTQgc206bWItNlwiPvCfjrUgRmFsbGluZyBQaWFubyBUaWxlczwvaDI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTIgc206c3BhY2UteS0zXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRHYW1lU3RhcnRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXdlbGNvbWVNdXNpY1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIHBsYXlXZWxjb21lTXVzaWMoKTtcbiAgICAgICAgICAgICAgICAgIHNldFdlbGNvbWVNdXNpY1N0YXJ0ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgYnRuLXNvbGlkLTEgYnRuLWJvdW5jZSB0ZXh0LXdoaXRlIHB4LTggc206cHgtMTAgcHktNCBzbTpweS01IHJvdW5kZWQtZnVsbCB0ZXh0LXhsIHNtOnRleHQtMnhsIGZvbnQtYm9sZCBob3ZlcjpzY2FsZS0xMDUgdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBzaGFkb3ctbGdcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDwn461IFN0YXJ0IFBsYXlpbmdcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXdlbGNvbWVNdXNpY1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIHBsYXlXZWxjb21lTXVzaWMoKTtcbiAgICAgICAgICAgICAgICAgIHNldFdlbGNvbWVNdXNpY1N0YXJ0ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4tc29saWQtMiBidG4tYm91bmNlIHRleHQtd2hpdGUgcHgtNiBzbTpweC04IHB5LTMgc206cHktNCByb3VuZGVkLWZ1bGwgdGV4dC1zbSBzbTp0ZXh0LWJhc2UgZm9udC1zZW1pYm9sZCBob3ZlcjpzY2FsZS0xMDUgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCJcbiAgICAgICAgICAgICAgc3R5bGU9e3thbmltYXRpb25EZWxheTogJzAuMnMnfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+OtiBQbGF5IFdlbGNvbWUgTXVzaWNcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogTG92ZSBtZXNzYWdlIGluIGNvcm5lciAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBib3R0b20tMyBzbTpib3R0b20tNiByaWdodC0zIHNtOnJpZ2h0LTYgei0yMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0IHJvdW5kZWQteGwgc206cm91bmRlZC0yeGwgcHgtMiBzbTpweC00IHB5LTEgc206cHktMlwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS85MCB0ZXh0LXhzIHNtOnRleHQtc20gZm9udC1tZWRpdW0gaXRhbGljIHR5cGV3cml0ZXJcIj5cbiAgICAgICAgICAgICAgTWFkZSB3aXRoIGxvdmUganVzdCBmb3IgeW91IPCfjrVcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgLy8gQ2hvaWNlIE1lbnUgYWZ0ZXIgY29tcGxldGluZyBhbGwgdGlsZXNcbiAgaWYgKHNob3dDaG9pY2VNZW51ICYmIGdhbWVDb21wbGV0ZWQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gZHluYW1pYy1iZyBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBweC00IHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICBcbiAgICAgICAgey8qIEZsb2F0aW5nIEVsZW1lbnRzIEJhY2tncm91bmQgKi99XG4gICAgICAgIHtmbG9hdGluZ0VsZW1lbnRzLm1hcCgoZWxlbWVudCwgaSkgPT4gKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbGVmdDogYCR7ZWxlbWVudC5sZWZ0fSVgLFxuICAgICAgICAgICAgICB0b3A6IGAke2VsZW1lbnQudG9wfSVgLFxuICAgICAgICAgICAgICBhbmltYXRpb246IGB3ZWxjb21lRmxvYXQgMTJzIGVhc2UtaW4tb3V0IGluZmluaXRlYCxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2VsZW1lbnQuYW5pbWF0aW9uRGVsYXl9c2BcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2VsZW1lbnQudHlwZSA9PT0gJ2hlYXJ0JyAmJiAoXG4gICAgICAgICAgICAgIDxIZWFydCBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LXBpbmstMzAwIGFuaW1hdGUtcHVsc2UgZmxvYXRpbmctaGVhcnRgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogYCR7ZWxlbWVudC5zaXplICogNH1weGAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICczcydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdub3RlJyAmJiAoXG4gICAgICAgICAgICAgIDxNdXNpYyBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LWJsdWUtMjAwIGFuaW1hdGUtYm91bmNlIGZsb2F0aW5nLW11c2ljYH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMi41cydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdzcGFya2xlJyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgYmcteWVsbG93LTMwMCByb3VuZGVkLWZ1bGwgYW5pbWF0ZS1waW5nIGZsb2F0aW5nLXNwYXJrbGVgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogYCR7ZWxlbWVudC5zaXplICogMn1weGAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke2VsZW1lbnQuc2l6ZSAqIDJ9cHhgLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICc0cydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdC1kYXJrIHJvdW5kZWQtMnhsIHNtOnJvdW5kZWQtM3hsIHAtNCBzbTpwLTYgbWQ6cC04IHRleHQtY2VudGVyIG1heC13LXhzIHNtOm1heC13LW1kIHctZnVsbCByZWxhdGl2ZSB6LTEwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTR4bCBzbTp0ZXh0LTV4bCBtZDp0ZXh0LTZ4bCBtYi0zIHNtOm1iLTRcIj7wn46JPC9kaXY+XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtMnhsIHNtOnRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LXdoaXRlIG1iLTMgc206bWItNFwiPkNvbmdyYXR1bGF0aW9ucyE8L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUvOTAgbWItNCBzbTptYi02IHRleHQtc20gc206dGV4dC1iYXNlXCI+WW91IHN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgXCJIYXBweSBCaXJ0aGRheVwiITwvcD5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdCByb3VuZGVkLXhsIHNtOnJvdW5kZWQtMnhsIHAtMyBzbTpwLTQgbWItNCBzbTptYi02XCI+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIHRleHQtYmFzZSBzbTp0ZXh0LWxnXCI+RmluYWwgU2NvcmU6IHtzY29yZX08L3A+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlLzgwIHRleHQteHMgc206dGV4dC1zbVwiPk1heCBDb21ibzoge21heENvbWJvfSDwn5SlPC9wPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS84MCB0ZXh0LXhzIHNtOnRleHQtc21cIj5QZXJmZWN0IFBlcmZvcm1hbmNlISDwn4yfPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yIHNtOnNwYWNlLXktM1wiPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0U2hvd0Nob2ljZU1lbnUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJlc2V0R2FtZSgpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgYnRuLXNvbGlkLTEgdGV4dC13aGl0ZSBweC00IHNtOnB4LTYgcHktMiBzbTpweS0zIHJvdW5kZWQtZnVsbCB0ZXh0LWJhc2Ugc206dGV4dC1sZyBmb250LXNlbWlib2xkIGhvdmVyOnNjYWxlLTEwNSB0cmFuc2Zvcm0gdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwIHNoYWRvdy1sZ1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIPCfjrUgUGxheSBBZ2FpblxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEVuZGxlc3NNb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIHNldFNob3dDaG9pY2VNZW51KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZXRHYW1lQ29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZXRUaWxlc0hpdCgwKTtcbiAgICAgICAgICAgICAgICBzZXRUaWxlc1NwYXduZWQoMCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBidG4tc29saWQtMSB0ZXh0LXdoaXRlIHB4LTQgc206cHgtNiBweS0yIHNtOnB5LTMgcm91bmRlZC1mdWxsIHRleHQtYmFzZSBzbTp0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+OriBFbmRsZXNzIE1vZGVcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRTaG93Q2hvaWNlTWVudShmYWxzZSk7XG4gICAgICAgICAgICAgICAgc2V0U2hvd0NlbGVicmF0aW9uKHRydWUpO1xuICAgICAgICAgICAgICAgIHBsYXlCYWNrZ3JvdW5kTXVzaWMoKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGJ0bi1zb2xpZC0yIHRleHQtd2hpdGUgcHgtNiBweS0zIHJvdW5kZWQtZnVsbCB0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+SnSBTZWUgWW91ciBTdXJwcmlzZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGlmIChnYW1lT3Zlcikge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBkeW5hbWljLWJnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICB7LyogRmxvYXRpbmcgSGVhcnRzIEJhY2tncm91bmQgKi99XG4gICAgICAgIHsvKiBGbG9hdGluZyBFbGVtZW50cyBCYWNrZ3JvdW5kICovfVxuICAgICAgICB7ZmxvYXRpbmdFbGVtZW50cy5tYXAoKGVsZW1lbnQsIGkpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSBwb2ludGVyLWV2ZW50cy1ub25lXCJcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGxlZnQ6IGAke2VsZW1lbnQubGVmdH0lYCxcbiAgICAgICAgICAgICAgdG9wOiBgJHtlbGVtZW50LnRvcH0lYCxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uOiBgd2VsY29tZUZsb2F0IDEycyBlYXNlLWluLW91dCBpbmZpbml0ZWAsXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBgJHtlbGVtZW50LmFuaW1hdGlvbkRlbGF5fXNgXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdoZWFydCcgJiYgKFxuICAgICAgICAgICAgICA8SGVhcnQgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGV4dC1waW5rLTMwMCBhbmltYXRlLXB1bHNlIGZsb2F0aW5nLWhlYXJ0YH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnM3MnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7ZWxlbWVudC50eXBlID09PSAnbm90ZScgJiYgKFxuICAgICAgICAgICAgICA8TXVzaWMgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGV4dC1ibHVlLTIwMCBhbmltYXRlLWJvdW5jZSBmbG9hdGluZy1tdXNpY2B9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7ZWxlbWVudC5zaXplICogNH1weGAsXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogJzIuNXMnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7ZWxlbWVudC50eXBlID09PSAnc3BhcmtsZScgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGJnLXllbGxvdy0zMDAgcm91bmRlZC1mdWxsIGFuaW1hdGUtcGluZyBmbG9hdGluZy1zcGFya2xlYH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDJ9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiAyfXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNHMnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnbGFzcy1lZmZlY3QtZGFyayByb3VuZGVkLTN4bCBwLTggdGV4dC1jZW50ZXIgbWF4LXctbWQgbXgtNCByZWxhdGl2ZSB6LTEwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTZ4bCBtYi00XCI+8J+SlDwvZGl2PlxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBmb250LWJvbGQgdGV4dC13aGl0ZSBtYi00XCI+R2FtZSBPdmVyITwvaDE+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS85MCBtYi00XCI+WW91IG1pc3NlZCB0b28gbWFueSB0aWxlcyE8L3A+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnbGFzcy1lZmZlY3Qgcm91bmRlZC0yeGwgcC00IG1iLTZcIj5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUgdGV4dC1sZ1wiPkZpbmFsIFNjb3JlOiB7c2NvcmV9PC9wPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS84MCB0ZXh0LXNtXCI+TWF4IENvbWJvOiB7bWF4Q29tYm99IPCflKU8L3A+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlLzgwIHRleHQtc21cIj5UaWxlcyBIaXQ6IHtNYXRoLmZsb29yKHNjb3JlIC8gMTApfTwvcD5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGUvODAgdGV4dC1zbSBtdC0yXCI+TGl2ZXMgQXZhaWxhYmxlOiB7bGl2ZXN9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0zXCI+XG4gICAgICAgICAgICB7bGl2ZXMgPiAwICYmIChcbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIHBsYXlpbmcgYnkgdXNpbmcgb25lIGxpZmVcbiAgICAgICAgICAgICAgICAgIHNldEdhbWVPdmVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIHNldExpdmVzKGxpdmVzIC0gMSk7XG4gICAgICAgICAgICAgICAgICAvLyBSZXNldCBmYWxsaW5nIHRpbGVzXG4gICAgICAgICAgICAgICAgICBzZXRGYWxsaW5nVGlsZXMoW10pO1xuICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgY29tYm9cbiAgICAgICAgICAgICAgICAgIHNldENvbWJvKDApO1xuICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgdGhlIGdhbWUgbG9vcCBhZ2FpblxuICAgICAgICAgICAgICAgICAgaWYgKGdhbWVMb29wUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChnYW1lTG9vcFJlZi5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGdhbWVMb29wUmVmLmN1cnJlbnQgPSBzZXRJbnRlcnZhbChnYW1lTG9vcCwgNTApOyAvLyAyMCBGUFMgZm9yIHNtb290aGVyIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgYnRuLXNvbGlkLTIgdGV4dC13aGl0ZSBweC04IHB5LTMgcm91bmRlZC1mdWxsIHRleHQtbGcgZm9udC1zZW1pYm9sZCBob3ZlcjpzY2FsZS0xMDUgdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBzaGFkb3ctbGdcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAg8J+SliBDb250aW51ZSAoVXNlIDEgTGlmZSlcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Jlc2V0R2FtZX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGJ0bi1zb2xpZC0xIHRleHQtd2hpdGUgcHgtOCBweS0zIHJvdW5kZWQtZnVsbCB0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6c2NhbGUtMTA1IHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgc2hhZG93LWxnXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+UhCBUcnkgQWdhaW5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbiAgXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gZHluYW1pYy1iZyBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLTQgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICB7LyogRmxvYXRpbmcgRWxlbWVudHMgQmFja2dyb3VuZCAqL31cbiAgICAgIHtmbG9hdGluZ0VsZW1lbnRzLm1hcCgoZWxlbWVudCwgaSkgPT4gKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbGVmdDogYCR7ZWxlbWVudC5sZWZ0fSVgLFxuICAgICAgICAgICAgICB0b3A6IGAke2VsZW1lbnQudG9wfSVgLFxuICAgICAgICAgICAgICBhbmltYXRpb246IGB3ZWxjb21lRmxvYXQgMTJzIGVhc2UtaW4tb3V0IGluZmluaXRlYCxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2VsZW1lbnQuYW5pbWF0aW9uRGVsYXl9c2BcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2VsZW1lbnQudHlwZSA9PT0gJ2hlYXJ0JyAmJiAoXG4gICAgICAgICAgICAgIDxIZWFydCBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LXBpbmstMzAwIGFuaW1hdGUtcHVsc2UgZmxvYXRpbmctaGVhcnRgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogYCR7ZWxlbWVudC5zaXplICogNH1weGAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICczcydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdub3RlJyAmJiAoXG4gICAgICAgICAgICAgIDxNdXNpYyBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LWJsdWUtMjAwIGFuaW1hdGUtYm91bmNlIGZsb2F0aW5nLW11c2ljYH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2VsZW1lbnQuc2l6ZSAqIDR9cHhgLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbGVtZW50LnNpemUgKiA0fXB4YCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMi41cydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtlbGVtZW50LnR5cGUgPT09ICdzcGFya2xlJyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgYmcteWVsbG93LTMwMCByb3VuZGVkLWZ1bGwgYW5pbWF0ZS1waW5nIGZsb2F0aW5nLXNwYXJrbGVgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogYCR7ZWxlbWVudC5zaXplICogMn1weGAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke2VsZW1lbnQuc2l6ZSAqIDJ9cHhgLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICc0cydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICBcbiAgICAgIHsvKiBHYW1lIENvbnRhaW5lciAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2FtZS1jb250YWluZXIgZ2xhc3MtZWZmZWN0LWRhcmsgcm91bmRlZC0zeGwgcC02IHctOTYgaC1bNjAwcHhdIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiB6LTEwXCI+XG4gICAgICAgIHsvKiBHYW1lIFVJIEhlYWRlciAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgdGV4dC13aGl0ZSBtYi0yXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY29yZS1kaXNwbGF5IGdsYXNzLWVmZmVjdCByb3VuZGVkLXhsIHB4LTMgcHktMVwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyBmb250LWJvbGRcIj5TY29yZToge3Njb3JlfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdCByb3VuZGVkLXhsIHB4LTMgcHktMVwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyBmb250LXNlbWlib2xkXCI+4p2k77iPIHtsaXZlc308L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnbGFzcy1lZmZlY3Qgcm91bmRlZC14bCBweC0zIHB5LTFcIj5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgZm9udC1zZW1pYm9sZFwiPkhpdDoge3RpbGVzSGl0fS97ZW5kbGVzc01vZGUgPyAn4oieJyA6IGhhcHB5QmlydGhkYXlOb3Rlcy5sZW5ndGh9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHtlbmRsZXNzTW9kZSAmJiAoXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Jlc2V0R2FtZX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0IHJvdW5kZWQteGwgcHgtMyBweS0xIHRleHQteHMgZm9udC1zZW1pYm9sZCBob3ZlcjpzY2FsZS0xMDUgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg8J+aqiBFeGl0XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogQ29tYm8gYW5kIFBvd2VyLXVwIFN0YXR1cyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgdGV4dC13aGl0ZSBtYi0yXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BnbGFzcy1lZmZlY3Qgcm91bmRlZC14bCBweC0zIHB5LTEgJHtjb21ibyA+IDAgPyAnY29tYm8tZWZmZWN0JyA6ICcnfWB9PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyBmb250LXNlbWlib2xkXCI+8J+UpSBDb21ibzoge2NvbWJvfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdCByb3VuZGVkLXhsIHB4LTMgcHktMVwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyBmb250LXNlbWlib2xkXCI+8J+PhiBCZXN0OiB7bWF4Q29tYm99PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogQWN0aXZlIFBvd2VyLXVwcyBEaXNwbGF5ICovfVxuICAgICAgICB7KGFjdGl2ZVBvd2VyVXBzLmludmluY2libGUuYWN0aXZlIHx8IGFjdGl2ZVBvd2VyVXBzLnNsb3dNb3Rpb24uYWN0aXZlIHx8IGFjdGl2ZVBvd2VyVXBzLnNjb3JlTXVsdGlwbGllci5hY3RpdmUpICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgc3BhY2UteC0yIG1iLTJcIj5cbiAgICAgICAgICAgIHthY3RpdmVQb3dlclVwcy5pbnZpbmNpYmxlLmFjdGl2ZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0IHJvdW5kZWQtZnVsbCBweC0yIHB5LTEgdGV4dC14cyBmb250LWJvbGQgdGV4dC15ZWxsb3ctMzAwIGFuaW1hdGUtcHVsc2VcIj5cbiAgICAgICAgICAgICAgICDirZAge01hdGguY2VpbChhY3RpdmVQb3dlclVwcy5pbnZpbmNpYmxlLnRpbWVMZWZ0IC8gMTAwMCl9c1xuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7YWN0aXZlUG93ZXJVcHMuc2xvd01vdGlvbi5hY3RpdmUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsYXNzLWVmZmVjdCByb3VuZGVkLWZ1bGwgcHgtMiBweS0xIHRleHQteHMgZm9udC1ib2xkIHRleHQtYmx1ZS0zMDAgYW5pbWF0ZS1wdWxzZVwiPlxuICAgICAgICAgICAgICAgIOKaoSB7TWF0aC5jZWlsKGFjdGl2ZVBvd2VyVXBzLnNsb3dNb3Rpb24udGltZUxlZnQgLyAxMDAwKX1zXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHthY3RpdmVQb3dlclVwcy5zY29yZU11bHRpcGxpZXIuYWN0aXZlICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnbGFzcy1lZmZlY3Qgcm91bmRlZC1mdWxsIHB4LTIgcHktMSB0ZXh0LXhzIGZvbnQtYm9sZCB0ZXh0LXB1cnBsZS0zMDAgYW5pbWF0ZS1wdWxzZVwiPlxuICAgICAgICAgICAgICAgIPCfjIgge2FjdGl2ZVBvd2VyVXBzLnNjb3JlTXVsdGlwbGllci5tdWx0aXBsaWVyfXggKHtNYXRoLmNlaWwoYWN0aXZlUG93ZXJVcHMuc2NvcmVNdWx0aXBsaWVyLnRpbWVMZWZ0IC8gMTAwMCl9cylcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuXG4gICAgICAgIHsvKiBHYW1lIEFyZWEgd2l0aCA0IGNvbHVtbnMgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgZ2FtZS1hcmVhIHJlbGF0aXZlIGgtWzUwMHB4XSBvdmVyZmxvdy1oaWRkZW4gcm91bmRlZC0yeGwgJHthY3RpdmVQb3dlclVwcy5pbnZpbmNpYmxlLmFjdGl2ZSA/ICdyaW5nLTQgcmluZy15ZWxsb3ctNDAwIHJpbmctb3BhY2l0eS02MCcgOiAnJ30gJHthY3RpdmVQb3dlclVwcy5zbG93TW90aW9uLmFjdGl2ZSA/ICdyaW5nLTQgcmluZy1ibHVlLTQwMCByaW5nLW9wYWNpdHktNjAnIDogJyd9YH0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLWZ1bGwgZ3JpZCBncmlkLWNvbHMtNCBnYXAtMVwiPlxuICAgICAgICAgICAge1swLCAxLCAyLCAzXS5tYXAoY29sdW1uID0+IChcbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2NvbHVtbn0gY2xhc3NOYW1lPVwicmVsYXRpdmUgYmctd2hpdGUvNSBib3JkZXItbCBib3JkZXItciBib3JkZXItd2hpdGUvMTBcIj5cbiAgICAgICAgICAgICAgICB7LyogQ29sdW1uIGJhY2tncm91bmQgbGluZXMgKi99XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktMjBcIj5cbiAgICAgICAgICAgICAgICAgIHtbLi4uQXJyYXkoOCldLm1hcCgoXywgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPVwiY29sdW1uLWxpbmUgaC0xNiBib3JkZXItYiBib3JkZXItd2hpdGUvMTBcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgey8qIEZhbGxpbmcgVGlsZXMgKi99XG4gICAgICAgICAge2ZhbGxpbmdUaWxlcy5tYXAodGlsZSA9PiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGtleT17dGlsZS5pZH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgei0yMFwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgbGVmdDogYCR7KHRpbGUuY29sdW1uICogMjUpICsgMC41fSVgLFxuICAgICAgICAgICAgICAgIHRvcDogYCR7dGlsZS55fXB4YCxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzIzJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnNjBweCdcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVRpbGVDbGljayh0aWxlLmlkKX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KCkgPT4gaGFuZGxlVGlsZUNsaWNrKHRpbGUuaWQpfVxuICAgICAgICAgICAgICAgIG9uVG91Y2hTdGFydD17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIGhhbmRsZVRpbGVDbGljayh0aWxlLmlkKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdhbWUtdGlsZSB3LWZ1bGwgaC1mdWxsIHRleHQtd2hpdGUgZm9udC1ib2xkIHRleHQtbGcgcm91bmRlZC1sZyBjdXJzb3ItcG9pbnRlciBzZWxlY3Qtbm9uZVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHRvdWNoQWN0aW9uOiAnbWFuaXB1bGF0aW9uJyxcbiAgICAgICAgICAgICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgei0xMFwiPlxuICAgICAgICAgICAgICAgICAge3RpbGUubm90ZS5ub3RlfVxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXhzIG9wYWNpdHktOTBcIj7wn461PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSl9XG5cbiAgICAgICAgICB7LyogUG93ZXItdXBzICovfVxuICAgICAgICAgIHtwb3dlclVwcy5tYXAocG93ZXJVcCA9PiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGtleT17cG93ZXJVcC5pZH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgei0yMFwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgbGVmdDogYCR7KHBvd2VyVXAuY29sdW1uICogMjUpICsgMC41fSVgLFxuICAgICAgICAgICAgICAgIHRvcDogYCR7cG93ZXJVcC55fXB4YCxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzIzJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnNjBweCdcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNvbGxlY3RQb3dlclVwKHBvd2VyVXAuaWQsIHBvd2VyVXAudHlwZSl9XG4gICAgICAgICAgICAgICAgb25Nb3VzZURvd249eygpID0+IGNvbGxlY3RQb3dlclVwKHBvd2VyVXAuaWQsIHBvd2VyVXAudHlwZSl9XG4gICAgICAgICAgICAgICAgb25Ub3VjaFN0YXJ0PXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgY29sbGVjdFBvd2VyVXAocG93ZXJVcC5pZCwgcG93ZXJVcC50eXBlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInBvd2VyLXVwIHctZnVsbCBoLWZ1bGwgdGV4dC13aGl0ZSBmb250LWJvbGQgdGV4dC0yeGwgcm91bmRlZC1sZyBjdXJzb3ItcG9pbnRlciBzZWxlY3Qtbm9uZVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHRvdWNoQWN0aW9uOiAnbWFuaXB1bGF0aW9uJyxcbiAgICAgICAgICAgICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICB0aXRsZT17cG93ZXJVcFR5cGVzW3Bvd2VyVXAudHlwZV0uZWZmZWN0fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSB6LTEwXCI+XG4gICAgICAgICAgICAgICAgICB7cG93ZXJVcFR5cGVzW3Bvd2VyVXAudHlwZV0uZW1vaml9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSl9XG5cbiAgICAgICAgICB7LyogQm90dG9tIGRhbmdlciB6b25lIGluZGljYXRvciAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhbmdlci16b25lIGFic29sdXRlIGJvdHRvbS0wIGxlZnQtMCByaWdodC0wIGgtMTYgcG9pbnRlci1ldmVudHMtbm9uZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBib3R0b20tMSBsZWZ0LTEvMiB0cmFuc2Zvcm0gLXRyYW5zbGF0ZS14LTEvMiB0ZXh0LXdoaXRlLzkwIHRleHQteHMgZm9udC1ib2xkXCI+XG4gICAgICAgICAgICAgIOKaoO+4jyBEYW5nZXIgWm9uZSDimqDvuI9cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogR2FtZSBjb21wbGV0ZWQgbWVzc2FnZSAqL31cbiAgICAgICAge2dhbWVDb21wbGV0ZWQgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB6LTMwIGJnLWJsYWNrLzIwIGJhY2tkcm9wLWJsdXItc20gcm91bmRlZC0zeGxcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctZ3JhZGllbnQtdG8tciBmcm9tLWdyZWVuLTQwMCB0by1lbWVyYWxkLTUwMCB0ZXh0LXdoaXRlIHB4LTYgcHktMyByb3VuZGVkLTJ4bCB0ZXh0LWxnIGZvbnQtYm9sZCBhbmltYXRlLWJvdW5jZSBzaGFkb3ctMnhsIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWItMlwiPiBQZXJmZWN0ISA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuXG4gICAgICAgIHsvKiBCb3R0b20gYnV0dG9ucyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBib3R0b20tNCByaWdodC00IGZsZXggc3BhY2UteC0yXCI+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17cmVzZXRHYW1lfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2xhc3MtZWZmZWN0IHRleHQtd2hpdGUgcHgtMyBweS0yIHJvdW5kZWQtZnVsbCBob3ZlcjpzY2FsZS0xMDUgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwIHRleHQtc21cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIPCflIQgUmVzZXRcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgXG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCaXJ0aGRheVBpYW5vU3VycHJpc2U7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxpQkFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUkseUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUgsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQU4sT0FBQTtBQUFxRCxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBRSx1QkFBQU0sQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFULHdCQUFBUyxDQUFBLEVBQUFHLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBYix1QkFBQSxZQUFBQSxDQUFBUyxDQUFBLEVBQUFHLENBQUEsU0FBQUEsQ0FBQSxJQUFBSCxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxTQUFBRCxDQUFBLE1BQUFPLENBQUEsRUFBQUMsQ0FBQSxFQUFB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