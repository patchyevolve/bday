668b3df56d05a066cf142870d5a6b171
"use strict";

// Mock dependencies
_getJestObj().mock('../../utils/mediaLoader');
_getJestObj().mock('../../store/celebrationStore');
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _App = _interopRequireDefault(require("../../App"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('Game Flow Integration Tests', () => {
  beforeEach(() => {
    jest.useFakeTimers();
    jest.clearAllMocks();
  });
  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  describe('Complete Game Flow', () => {
    it('should complete full game cycle: welcome -> game -> celebration -> galleries', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // 1. Welcome Screen
      expect(_react2.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();

      // 2. Start Game
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      await (0, _react2.act)(async () => {
        _react2.fireEvent.click(startButton);
      });

      // 3. Game Screen
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText(/Score:/)).toBeInTheDocument();
        expect(_react2.screen.getByText(/Lives:/)).toBeInTheDocument();
      });

      // 4. Simulate game completion
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(10000);
      });

      // 5. Celebration Screen with Galleries
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Photo Gallery')).toBeInTheDocument();
        expect(_react2.screen.getByText('Video Gallery')).toBeInTheDocument();
      });
    });
    it('should handle game restart correctly', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Complete one game cycle
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      await (0, _react2.act)(async () => {
        _react2.fireEvent.click(startButton);
      });
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(10000);
      });

      // Should be able to restart
      await (0, _react2.waitFor)(() => {
        const restartButton = _react2.screen.queryByText(/Play Again|Restart/);
        if (restartButton) {
          _react2.fireEvent.click(restartButton);
        }
      });
    });
  });
  describe('Gallery Integration', () => {
    it('should open and close photo gallery', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Navigate to celebration
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      await (0, _react2.act)(async () => {
        _react2.fireEvent.click(startButton);
      });
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(10000);
      });

      // Open photo gallery
      await (0, _react2.waitFor)(() => {
        const photoButton = _react2.screen.getByText('Photo Gallery');
        _react2.fireEvent.click(photoButton);
      });

      // Should show gallery modal
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('ðŸ“¸')).toBeInTheDocument();
      });

      // Close gallery
      const closeButton = _react2.screen.getByRole('button', {
        name: /close|Ã—/
      });
      _react2.fireEvent.click(closeButton);

      // Should return to celebration screen
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.queryByText('ðŸ“¸')).not.toBeInTheDocument();
      });
    });
    it('should open and close video gallery', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Navigate to celebration
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      await (0, _react2.act)(async () => {
        _react2.fireEvent.click(startButton);
      });
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(10000);
      });

      // Open video gallery
      await (0, _react2.waitFor)(() => {
        const videoButton = _react2.screen.getByText('Video Gallery');
        _react2.fireEvent.click(videoButton);
      });

      // Should show gallery modal
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('ðŸŽ¥')).toBeInTheDocument();
      });
    });
  });
  describe('Audio Integration', () => {
    it('should handle mute/unmute throughout game flow', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Start game
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      await (0, _react2.act)(async () => {
        _react2.fireEvent.click(startButton);
      });

      // Find and test mute button
      await (0, _react2.waitFor)(() => {
        const muteButton = _react2.screen.getByRole('button', {
          name: /ðŸ”Š|ðŸ”‡/
        });

        // Toggle mute
        _react2.fireEvent.click(muteButton);
        _react2.fireEvent.click(muteButton);
        expect(muteButton).toBeInTheDocument();
      });
    });
  });
  describe('Performance Integration', () => {
    it('should handle rapid user interactions', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');

      // Rapid clicks shouldn't break the app
      await (0, _react2.act)(async () => {
        _react2.fireEvent.click(startButton);
        _react2.fireEvent.click(startButton);
        _react2.fireEvent.click(startButton);
      });

      // Should still work normally
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText(/Score:/)).toBeInTheDocument();
      });
    });
    it('should handle timer cleanup on unmount', () => {
      const {
        unmount
      } = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Start some timers
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      (0, _react2.act)(() => {
        _react2.fireEvent.click(startButton);
      });

      // Unmount should not cause memory leaks
      expect(() => unmount()).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,