e4782c4047f4ffbf94cfa1dd96f112e0
"use strict";

// Mock the media loader
_getJestObj().mock('../../utils/mediaLoader', () => ({
  loadMediaFiles: jest.fn(() => Promise.resolve({
    pictures: [{
      id: 1,
      url: '/media/pictures/test1.jpg',
      alt: 'Memory 1',
      filename: 'test1.jpg'
    }, {
      id: 2,
      url: '/media/pictures/test2.jpg',
      alt: 'Memory 2',
      filename: 'test2.jpg'
    }],
    videos: [{
      id: 1,
      url: '/media/videos/test.mp4',
      alt: 'Video 1',
      filename: 'test.mp4'
    }]
  }))
}));

// Mock the celebration store
_getJestObj().mock('../../store/celebrationStore', () => ({
  __esModule: true,
  default: () => ({
    setName: jest.fn(),
    setMessage: jest.fn()
  })
}));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _App = _interopRequireDefault(require("../../App"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('BirthdayPianoSurprise App', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  describe('Initial Render', () => {
    it('should render welcome screen initially', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
      expect(_react2.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();
      expect(_react2.screen.getByText('To My Beautiful Wifey')).toBeInTheDocument();
    });
    it('should load media files on mount', async () => {
      const {
        loadMediaFiles
      } = require('../../utils/mediaLoader');
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
      await (0, _react2.waitFor)(() => {
        expect(loadMediaFiles).toHaveBeenCalledTimes(1);
      });
    });
    it('should initialize with correct default state', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Should show welcome screen, not game or celebration
      expect(_react2.screen.queryByText('Score:')).not.toBeInTheDocument();
      expect(_react2.screen.queryByText('Lives:')).not.toBeInTheDocument();
    });
  });
  describe('Game Flow', () => {
    it('should start game when start button is clicked', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      _react2.fireEvent.click(startButton);

      // Should show game UI
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText(/Score:/)).toBeInTheDocument();
      });
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText(/Lives:/)).toBeInTheDocument();
      });
    });
    it('should show mute button in game', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      _react2.fireEvent.click(startButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByRole('button', {
          name: /ðŸ”Š|ðŸ”‡/
        })).toBeInTheDocument();
      });
    });
  });
  describe('Media Galleries', () => {
    it('should show photo gallery button after game completion', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Start and complete game (simplified)
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      _react2.fireEvent.click(startButton);

      // Fast forward to trigger celebration
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(5000);
      });
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Photo Gallery')).toBeInTheDocument();
      });
    });
    it('should show video gallery button after game completion', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Start and complete game (simplified)
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      _react2.fireEvent.click(startButton);

      // Fast forward to trigger celebration
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(5000);
      });
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Video Gallery')).toBeInTheDocument();
      });
    });
    it('should open photo gallery modal when clicked', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Navigate to celebration screen
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      _react2.fireEvent.click(startButton);
      (0, _react2.act)(() => {
        jest.advanceTimersByTime(5000);
      });
      const photoGalleryButton = await _react2.screen.findByText('Photo Gallery');
      _react2.fireEvent.click(photoGalleryButton);

      // Should show photo gallery modal
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('ðŸ“¸')).toBeInTheDocument();
      });
    });
  });
  describe('Audio Controls', () => {
    it('should toggle mute state when mute button is clicked', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Start game to show mute button
      const startButton = _react2.screen.getByText('ðŸŽµ Start Playing');
      _react2.fireEvent.click(startButton);
      const muteButton = await _react2.screen.findByRole('button', {
        name: /ðŸ”Š|ðŸ”‡/
      });
      _react2.fireEvent.click(muteButton);

      // Button should change state (implementation detail)
      expect(_react2.screen.getByRole('button', {
        name: /ðŸ”Š|ðŸ”‡/
      })).toBeInTheDocument();
    });
  });
  describe('Responsive Design', () => {
    it('should handle mobile viewport', () => {
      // Mock mobile viewport
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 375
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Should render without errors on mobile
      expect(_react2.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();
    });
    it('should handle desktop viewport', () => {
      // Mock desktop viewport
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 1920
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));

      // Should render without errors on desktop
      expect(_react2.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();
    });
  });
  describe('Error Handling', () => {
    it('should handle media loading errors gracefully', async () => {
      const {
        loadMediaFiles
      } = require('../../utils/mediaLoader');
      loadMediaFiles.mockRejectedValueOnce(new Error('Network error'));
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}));
      await (0, _react2.waitFor)(() => {
        expect(consoleSpy).toHaveBeenCalledWith('Error loading media:', expect.any(Error));
      });
      consoleSpy.mockRestore();
    });
    it('should continue working even with audio context errors', () => {
      // Mock AudioContext to throw error
      global.AudioContext = jest.fn(() => {
        throw new Error('AudioContext not supported');
      });
      expect(() => (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_App.default, {}))).not.toThrow();

      // Should still show welcome screen
      expect(_react2.screen.getByText('ðŸŽ‰ HAPPY BIRTHDAY! ðŸŽ‰')).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,