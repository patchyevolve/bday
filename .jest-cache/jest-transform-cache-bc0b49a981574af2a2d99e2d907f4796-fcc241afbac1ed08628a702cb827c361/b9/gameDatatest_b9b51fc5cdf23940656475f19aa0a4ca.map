{"version":3,"names":["_gameData","require","describe","it","expect","happyBirthdayNotes","toHaveLength","forEach","note","toHaveProperty","toBe","frequency","duration","toBeGreaterThan","toBeLessThan","poems","toBeDefined","Array","isArray","length","poem","specialPoem","targetDate","toBeInstanceOf","Date","getTime","GAME_CONFIG","Object","values","value","INITIAL_LIVES","MAX_LIVES","POWER_UP_SPAWN_CHANCE"],"sources":["gameData.test.js"],"sourcesContent":["import { \r\n  happyBirthdayNotes, \r\n  poems, \r\n  specialPoem, \r\n  targetDate, \r\n  GAME_CONFIG \r\n} from '../../constants/gameData';\r\n\r\ndescribe('Game Data Constants', () => {\r\n  describe('happyBirthdayNotes', () => {\r\n    it('should contain the correct number of notes', () => {\r\n      expect(happyBirthdayNotes).toHaveLength(12);\r\n    });\r\n\r\n    it('should have correct note structure', () => {\r\n      happyBirthdayNotes.forEach(note => {\r\n        expect(note).toHaveProperty('note');\r\n        expect(note).toHaveProperty('frequency');\r\n        expect(note).toHaveProperty('duration');\r\n        \r\n        expect(typeof note.note).toBe('string');\r\n        expect(typeof note.frequency).toBe('number');\r\n        expect(typeof note.duration).toBe('number');\r\n      });\r\n    });\r\n\r\n    it('should have valid frequencies', () => {\r\n      happyBirthdayNotes.forEach(note => {\r\n        expect(note.frequency).toBeGreaterThan(0);\r\n        expect(note.frequency).toBeLessThan(2000); // Reasonable frequency range\r\n      });\r\n    });\r\n\r\n    it('should have valid durations', () => {\r\n      happyBirthdayNotes.forEach(note => {\r\n        expect(note.duration).toBeGreaterThan(0);\r\n        expect(note.duration).toBeLessThan(5000); // Reasonable duration range\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('poems', () => {\r\n    it('should contain poems', () => {\r\n      expect(poems).toBeDefined();\r\n      expect(Array.isArray(poems)).toBe(true);\r\n      expect(poems.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should have valid poem strings', () => {\r\n      poems.forEach(poem => {\r\n        expect(typeof poem).toBe('string');\r\n        expect(poem.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('specialPoem', () => {\r\n    it('should be a valid string', () => {\r\n      expect(typeof specialPoem).toBe('string');\r\n      expect(specialPoem.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('targetDate', () => {\r\n    it('should be a valid Date object', () => {\r\n      expect(targetDate).toBeInstanceOf(Date);\r\n      expect(targetDate.getTime()).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('GAME_CONFIG', () => {\r\n    it('should contain all required configuration properties', () => {\r\n      expect(GAME_CONFIG).toHaveProperty('INITIAL_LIVES');\r\n      expect(GAME_CONFIG).toHaveProperty('MAX_LIVES');\r\n      expect(GAME_CONFIG).toHaveProperty('BASE_TILE_SPEED');\r\n      expect(GAME_CONFIG).toHaveProperty('BASE_SPAWN_INTERVAL');\r\n      expect(GAME_CONFIG).toHaveProperty('MIN_SPAWN_INTERVAL');\r\n      expect(GAME_CONFIG).toHaveProperty('POWER_UP_SPAWN_CHANCE');\r\n      expect(GAME_CONFIG).toHaveProperty('COMBO_BONUS_INTERVAL');\r\n      expect(GAME_CONFIG).toHaveProperty('MAX_SIMULTANEOUS_NOTES');\r\n      expect(GAME_CONFIG).toHaveProperty('GAME_LOOP_INTERVAL');\r\n      expect(GAME_CONFIG).toHaveProperty('DANGER_ZONE_HEIGHT');\r\n    });\r\n\r\n    it('should have valid numeric values', () => {\r\n      Object.values(GAME_CONFIG).forEach(value => {\r\n        expect(typeof value).toBe('number');\r\n        expect(value).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should have reasonable game configuration values', () => {\r\n      expect(GAME_CONFIG.INITIAL_LIVES).toBeGreaterThan(0);\r\n      expect(GAME_CONFIG.MAX_LIVES).toBeGreaterThan(GAME_CONFIG.INITIAL_LIVES);\r\n      expect(GAME_CONFIG.POWER_UP_SPAWN_CHANCE).toBeGreaterThan(0);\r\n      expect(GAME_CONFIG.POWER_UP_SPAWN_CHANCE).toBeLessThan(1);\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}