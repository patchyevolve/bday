{"version":3,"names":["_mediaLoader","require","global","fetch","jest","fn","describe","beforeEach","mockClear","it","result","loadMediaFiles","expect","toHaveProperty","Array","isArray","pictures","toBe","videos","toHaveLength","forEach","picture","index","id","url","toMatch","alt","filename","video","consoleSpy","spyOn","console","mockImplementation","originalConsoleLog","log","Error","mockRestore","extensions","map","pic","split","pop","toLowerCase","toContain","addNewMediaFile","file1","file2","not"],"sources":["mediaLoader.test.js"],"sourcesContent":["import { loadMediaFiles, addNewMediaFile } from '../../utils/mediaLoader';\n\n// Mock fetch for testing\nglobal.fetch = jest.fn();\n\ndescribe('Media Loader', () => {\n  beforeEach(() => {\n    fetch.mockClear();\n  });\n\n  describe('loadMediaFiles', () => {\n    it('should load all media files successfully', async () => {\n      const result = await loadMediaFiles();\n      \n      expect(result).toHaveProperty('pictures');\n      expect(result).toHaveProperty('videos');\n      expect(Array.isArray(result.pictures)).toBe(true);\n      expect(Array.isArray(result.videos)).toBe(true);\n    });\n\n    it('should return correct number of pictures', async () => {\n      const result = await loadMediaFiles();\n      \n      // Should have 40 pictures based on the current implementation\n      expect(result.pictures).toHaveLength(40);\n    });\n\n    it('should return correct number of videos', async () => {\n      const result = await loadMediaFiles();\n      \n      // Should have 1 video based on the current implementation\n      expect(result.videos).toHaveLength(1);\n    });\n\n    it('should have correct picture structure', async () => {\n      const result = await loadMediaFiles();\n      \n      result.pictures.forEach((picture, index) => {\n        expect(picture).toHaveProperty('id');\n        expect(picture).toHaveProperty('url');\n        expect(picture).toHaveProperty('alt');\n        expect(picture).toHaveProperty('filename');\n        \n        expect(picture.id).toBe(index + 1);\n        expect(picture.url).toMatch(/^\\/media\\/pictures\\//);\n        expect(picture.alt).toMatch(/^Memory \\d+$/);\n        expect(typeof picture.filename).toBe('string');\n      });\n    });\n\n    it('should have correct video structure', async () => {\n      const result = await loadMediaFiles();\n      \n      result.videos.forEach(video => {\n        expect(video).toHaveProperty('id');\n        expect(video).toHaveProperty('url');\n        expect(video).toHaveProperty('alt');\n        expect(video).toHaveProperty('filename');\n        \n        expect(video.url).toMatch(/^\\/media\\/videos\\//);\n        expect(typeof video.alt).toBe('string');\n        expect(typeof video.filename).toBe('string');\n      });\n    });\n\n    it('should handle errors gracefully', async () => {\n      // Mock console.error to avoid noise in test output\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      // Force an error by mocking a failing operation\n      const originalConsoleLog = console.log;\n      console.log = jest.fn(() => {\n        throw new Error('Test error');\n      });\n      \n      const result = await loadMediaFiles();\n      \n      // Should still return the expected structure even with errors\n      expect(result).toHaveProperty('pictures');\n      expect(result).toHaveProperty('videos');\n      \n      // Restore original console methods\n      console.log = originalConsoleLog;\n      consoleSpy.mockRestore();\n    });\n\n    it('should include various image formats', async () => {\n      const result = await loadMediaFiles();\n      \n      const extensions = result.pictures.map(pic => \n        pic.filename.split('.').pop().toLowerCase()\n      );\n      \n      // Should include jpg, webp, and JPG formats\n      expect(extensions).toContain('jpg');\n      expect(extensions).toContain('webp');\n    });\n  });\n\n  describe('addNewMediaFile', () => {\n    it('should create new media file object correctly', () => {\n      const result = addNewMediaFile('pictures', 'test.jpg', 'Test Image');\n      \n      expect(result).toHaveProperty('id');\n      expect(result).toHaveProperty('url');\n      expect(result).toHaveProperty('alt');\n      expect(result).toHaveProperty('filename');\n      \n      expect(result.url).toBe('/media/pictures/test.jpg');\n      expect(result.alt).toBe('Test Image');\n      expect(result.filename).toBe('test.jpg');\n      expect(typeof result.id).toBe('number');\n    });\n\n    it('should use filename as alt when alt is not provided', () => {\n      const result = addNewMediaFile('videos', 'test.mp4');\n      \n      expect(result.alt).toBe('test.mp4');\n    });\n\n    it('should generate unique IDs', () => {\n      const file1 = addNewMediaFile('pictures', 'test1.jpg');\n      const file2 = addNewMediaFile('pictures', 'test2.jpg');\n      \n      expect(file1.id).not.toBe(file2.id);\n    });\n\n    it('should handle different media types', () => {\n      const picture = addNewMediaFile('pictures', 'test.jpg');\n      const video = addNewMediaFile('videos', 'test.mp4');\n      \n      expect(picture.url).toBe('/media/pictures/test.jpg');\n      expect(video.url).toBe('/media/videos/test.mp4');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}