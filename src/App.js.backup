import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { Heart, Music, Lock, Clock } from 'lucide-react';
import FloatingHeartsBackground from './components/FloatingHeartsBackground';
import WelcomeScreen from './components/WelcomeScreen';
import { useGameState } from './hooks/useGameState';

const BirthdayPianoSurprise = () => {
  // Initialize all state and refs at the top level
  const [isMobile, setIsMobile] = useState(false);
  const [timeLeft, setTimeLeft] = useState('');
  const [isUnlocked, setIsUnlocked] = useState(false);
  const [currentPoem, setCurrentPoem] = useState('');
  const [fallingTiles, setFallingTiles] = useState([]);
  const [welcomeMusicStarted, setWelcomeMusicStarted] = useState(false);
  const [powerUps, setPowerUps] = useState([]);
  
  // Refs
  const tileRefs = useRef([]);
  const powerUpRefs = useRef({});
  const soundEffectsRef = useRef({});
  const audioContextRef = useRef(null);
  const lastTileSpawnRef = useRef(0);
  const activeOscillatorsRef = useRef([]);
  const gameLoopRef = useRef(null);
  const backgroundMusicRef = useRef(null);
  
  // Memoized values - floating elements for the background
  const floatingElements = useMemo(() => {
    const elements = [];
    // Hearts
    for (let i = 0; i < 8; i++) {
      elements.push({
        type: 'heart',
        left: Math.random() * 100,
        top: Math.random() * 100,
        animationDelay: Math.random() * 6,
        pulseDuration: 8 + Math.random() * 8,
        size: 2 + Math.random() * 1.5
      });
    }
    // Sparkles
    for (let i = 0; i < 12; i++) {
      elements.push({
        type: 'sparkle',
        left: Math.random() * 100,
        top: Math.random() * 100,
        animationDelay: Math.random() * 10,
        size: 2 + Math.random() * 1.5
      });
    }
    // Music notes
    for (let i = 0; i < 6; i++) {
      elements.push({
        type: 'note',
        left: Math.random() * 100,
        top: Math.random() * 100,
        animationDelay: Math.random() * 8,
        size: 3 + Math.random() * 2
      });
    }
    return elements;
  }, []);
  
  // Target date: Locked until her birthday - September 25th, 2025!
  const targetDate = useMemo(() => new Date('2025-09-23T00:00:00'), []);
  
  
  // Game state using our custom hook
  const {
    gameStarted, setGameStarted,
    gameCompleted, setGameCompleted,
    showCelebration, setShowCelebration,
    currentTile, setCurrentTile,
    tilesHit, setTilesHit,
    tilesSpawned, setTilesSpawned,
    score, setScore,
    gameOver, setGameOver,
    lives, setLives,
    endlessMode, setEndlessMode,
    showChoiceMenu, setShowChoiceMenu,
    showSpecialPoem, setShowSpecialPoem,
    combo, setCombo,
    maxCombo, setMaxCombo,
    resetGame,
    difficulty, setDifficulty: setDifficultyLevel,
    activePowerUps, setActivePowerUps
  } = useGameState();
  
  // Set up mobile detection
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    // Initial check
    checkIfMobile();
    
    // Add event listener for window resize
    window.addEventListener('resize', checkIfMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIfMobile);
  }, []);
  

  // Handle difficulty selection
  const handleSelectDifficulty = (selectedDifficulty) => {
    setDifficultyLevel(selectedDifficulty);
  };

  // Handle game start
  const handleStartGame = () => {
    // Reset game state based on selected difficulty
    resetGame();
    setGameStarted(true);
  };

  // Handle welcome music
  const handlePlayWelcomeMusic = () => {
    setWelcomeMusicStarted(true);
    // Add your music playing logic here
  };

  // Render welcome screen if game hasn't started
  if (!gameStarted) {
    return (
      <WelcomeScreen 
        onStartGame={handleStartGame}
        onPlayWelcomeMusic={handlePlayWelcomeMusic}
        onSelectDifficulty={handleSelectDifficulty}
        currentDifficulty={difficulty}
        isMobile={isMobile}
      />
    );
  }

  

  // Power-up types
  const powerUpTypes = useMemo(() => ({
    heart: { emoji: '💖', color: 'from-red-400 to-pink-500', effect: 'Restore Life' },
    star: { emoji: '⭐', color: 'from-yellow-400 to-orange-500', effect: 'Invincible' },
    lightning: { emoji: '⚡', color: 'from-blue-400 to-purple-500', effect: 'Slow Motion' },
    rainbow: { emoji: '🌈', color: 'from-purple-400 to-pink-500', effect: 'Double Points' },
    golden: { emoji: '✨', color: 'from-yellow-300 to-yellow-600', effect: '3x Multiplier' }
  }), []);
  

  // Romantic poems collection
  const poems = useMemo(() => [
    "In your eyes, I see the stars,\nIn your smile, my world ignites.\nEvery moment spent with you,\nMakes everything feel right. ✨",
    
    "You are my sunshine on cloudy days,\nMy rainbow after every storm.\nWith you, life becomes a beautiful song,\nAnd love takes its perfect form. 🌈",
    
    "Like flowers bloom in spring,\nMy love for you grows each day.\nYou're the melody in my heart,\nThe words I long to say. 🌸",
    
    "Your laughter is my favorite sound,\nYour happiness, my greatest treasure.\nIn this dance of life we share,\nYou're my rhythm and my measure. 💃",
    
    "When I count my blessings,\nI count you twice, maybe thrice.\nYou've made my world so beautiful,\nMy heart's own paradise. 💖",
    
    "You're the coffee to my morning,\nThe stars to my night sky.\nWith you, every ordinary moment\nBecomes a reason to fly high. ☕✨",
    
    "Time stands still when you're near,\nThe world fades away but you.\nIn your arms I find my home,\nIn your heart, my dreams come true. 🏠💕",
    
    "You paint colors in my gray days,\nBring music to my silent nights.\nWith every kiss, every touch,\nYou make everything feel right. 🎨🎵",
    
    "Distance means nothing when love means everything,\nMiles apart but hearts as one.\nEvery sunset brings me closer\nTo the day our love has won. 🌅❤️",
    
    "In a world of temporary things,\nYou are my constant, my forever.\nThrough seasons change and years go by,\nMy love for you will fade never. 🌿♾️",
    
    "You're the answer to my prayers,\nThe wish upon my shooting star.\nNo matter where life takes us,\nYou'll always be my guiding star. ⭐🙏",
    
    "Every heartbeat whispers your name,\nEvery breath carries your love.\nYou're my earth, my moon, my sun,\nMy blessing sent from above. 🌍🌙☀️",
    
    "In your smile I find my courage,\nIn your voice I hear my song.\nWith you beside me always,\nI know where I belong. 😊🎶",
    
    "Love letters written in the stars,\nPromises made with morning dew.\nEvery day I fall deeper,\nMore madly in love with you. 💌⭐",
    
    "You're my favorite notification,\nMy sweetest dream come true.\nIn this crazy, busy world,\nMy peace is found in you. 📱💤"
  ], []);

  // Special custom poem
  const specialPoem = useMemo(() => 
    "In depths of heart, a love resides,\nA flame that burns, a love that guides.\nA love so pure, so strong, so true,\nA love for you, forever new.\n\nWith every beat, my heart does yearn,\nFor your sweet love, a wish to learn.\nA love that grows, with every day,\nA love that shines, come what may.\n\nYour eyes, a star, a guiding light,\nYour smile, a sun, so warm and bright.\nYour touch, a solace, soft and deep,\nYour love, a treasure, I'll forever keep.\n\nSo let us vow, to love and care,\nTo face life's storms, together we'll share.\nA bond unbroken, a love divine,\nForever yours, and ever mine. 💖"
  , []);
  
  // Check if app should be unlocked
  useEffect(() => {
    const checkUnlockStatus = () => {
      const now = new Date();
      if (now >= targetDate) {
        setIsUnlocked(true);
      } else {
        const timeDiff = targetDate - now;
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
        
        setTimeLeft(`${days}d ${hours}h ${minutes}m ${seconds}s`);
      }
    };
    
    checkUnlockStatus();
    const interval = setInterval(checkUnlockStatus, 1000);
    return () => clearInterval(interval);
  }, [targetDate]);
  
  // Select random poem on component mount
  useEffect(() => {
    if (isUnlocked) {
      const randomPoem = poems[Math.floor(Math.random() * poems.length)];
      setCurrentPoem(randomPoem);
    }
  }, [isUnlocked, poems]);


  // Play gentle welcome music (without dingling sound)
  const playWelcomeMusic = useCallback(() => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    }

    const audioContext = audioContextRef.current;
    const playGentleChord = (frequencies, delay = 0) => {
      setTimeout(() => {
        frequencies.forEach((freq, index) => {
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          
          oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
          oscillator.type = 'sine';
          
          const now = audioContext.currentTime;
          gainNode.gain.setValueAtTime(0, now);
          gainNode.gain.linearRampToValueAtTime(0.05, now + 0.2);
          gainNode.gain.exponentialRampToValueAtTime(0.001, now + 2.5);
          
          oscillator.start(now);
          oscillator.stop(now + 2.5);
        });
      }, delay);
    };

    // Play a softer, more harmonious melody
    playGentleChord([261.63, 329.63, 392.00], 0);    // C major chord
    playGentleChord([293.66, 369.99, 440.00], 1200); // D major chord  
    playGentleChord([261.63, 329.63, 392.00], 2400); // C major chord
  }, []);

  // Update active power-ups timer
  useEffect(() => {
    if (gameStarted && !gameOver && !gameCompleted) {
      const interval = setInterval(() => {
        setActivePowerUps(prev => {
          const updated = { ...prev };
          Object.keys(updated).forEach(key => {
            if (updated[key].active && updated[key].timeLeft > 0) {
              updated[key].timeLeft -= 100;
              if (updated[key].timeLeft <= 0) {
                updated[key].active = false;
                if (key === 'scoreMultiplier') {
                  updated[key].multiplier = 1;
                }
              }
            }
          });
          return updated;
        });
      }, 100);
      return () => clearInterval(interval);
    }
  }, [gameStarted, gameOver, gameCompleted]);

  // Spawn power-ups randomly
  const spawnPowerUp = useCallback(() => {
    if (Math.random() < 0.15) { // 15% chance to spawn power-up
      const types = Object.keys(powerUpTypes);
      const randomType = types[Math.floor(Math.random() * types.length)];
      
      const newPowerUp = {
        id: Date.now() + Math.random(),
        type: randomType,
        column: Math.floor(Math.random() * 4),
        y: -80,
        speed: 3
      };
      
      setPowerUps(prev => [...prev, newPowerUp]);
    }
  }, [powerUpTypes]);

  // Handle power-up collection
  const collectPowerUp = useCallback((powerUpId, type) => {
    setPowerUps(prev => {
      const powerUp = prev.find(p => p.id === powerUpId);
      if (!powerUp) return prev;
      
      // Add visual collection effect
      const collectionElement = document.createElement('div');
      collectionElement.className = 'absolute pointer-events-none z-50';
      collectionElement.style.left = `${(powerUp.column * 25) + 12.5}%`;
      collectionElement.style.top = `${powerUp.y + 30}px`;
      collectionElement.innerHTML = `
        <div class="text-3xl animate-bounce" style="animation-duration: 0.8s;">
          ${powerUpTypes[type].emoji}
        </div>
        <div class="text-yellow-300 text-xl animate-ping" style="animation-duration: 1s;">
          ✨✨✨
        </div>
      `;
      document.querySelector('.game-area').appendChild(collectionElement);
      
      // Remove collection effect after animation
      setTimeout(() => {
        if (collectionElement.parentNode) {
          collectionElement.parentNode.removeChild(collectionElement);
        }
      }, 1500);
      
      return prev.filter(p => p.id !== powerUpId);
    });
    
    switch (type) {
      case 'heart':
        setLives(prev => Math.min(prev + 1, 5)); // Max 5 lives
        break;
      case 'star':
        setActivePowerUps(prev => ({
          ...prev,
          invincible: { active: true, timeLeft: 5000 }
        }));
        break;
      case 'lightning':
        setActivePowerUps(prev => ({
          ...prev,
          slowMotion: { active: true, timeLeft: 8000 }
        }));
        break;
      case 'rainbow':
        setActivePowerUps(prev => ({
          ...prev,
          scoreMultiplier: { active: true, timeLeft: 10000, multiplier: 2 }
        }));
        break;
      case 'golden':
        setActivePowerUps(prev => ({
          ...prev,
          scoreMultiplier: { active: true, timeLeft: 8000, multiplier: 3 }
        }));
        break;
      default:
        break;
    }
    
    // Play collection sound
    try {
      playNote(523.25, 200); // High C
    } catch (error) {
      console.log('Audio playback failed:', error);
    }
  }, [powerUpTypes]);
  
  const playNote = (frequency, duration) => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    }
    
    const audioContext = audioContextRef.current;
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
    oscillator.type = 'sine';
    
    const now = audioContext.currentTime;
    
    // ADSR envelope for smoother sound with lower volume for harmony
    gainNode.gain.setValueAtTime(0, now);
    gainNode.gain.linearRampToValueAtTime(0.15, now + 0.01); // Lower attack volume
    gainNode.gain.exponentialRampToValueAtTime(0.05, now + 0.1); // Lower decay
    gainNode.gain.setValueAtTime(0.05, now + duration / 1000 - 0.1); // Lower sustain
    gainNode.gain.exponentialRampToValueAtTime(0.0001, now + duration / 1000); // Release

    oscillator.start(now);
    oscillator.stop(now + duration / 1000);
    
    // Add to active oscillators array
    activeOscillatorsRef.current.push(oscillator);
    
    // Remove from active array when note ends
    oscillator.onended = () => {
      activeOscillatorsRef.current = activeOscillatorsRef.current.filter(osc => osc !== oscillator);
    };
    
    // Clean up old oscillators (keep max 6 simultaneous notes for performance)
    if (activeOscillatorsRef.current.length > 6) {
      const oldestOsc = activeOscillatorsRef.current.shift();
      try {
        oldestOsc.stop();
      } catch (e) {
        // Already stopped
      }
    }
  };

  // Play background music with Happy Birthday melody
  const playBackgroundMusic = useCallback(() => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    }

    // Stop any existing background music
    if (backgroundMusicRef.current) {
      clearTimeout(backgroundMusicRef.current);
    }

    const playMelodyNote = (noteIndex = 0) => {
      if (noteIndex >= happyBirthdayNotes.length) {
        // Restart melody after a pause
        backgroundMusicRef.current = setTimeout(() => playMelodyNote(0), 2000);
        return;
      }

      const note = happyBirthdayNotes[noteIndex];
      const audioContext = audioContextRef.current;
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      oscillator.frequency.setValueAtTime(note.frequency, audioContext.currentTime);
      oscillator.type = 'sine';

      const now = audioContext.currentTime;
      
      // Softer background music volume
      gainNode.gain.setValueAtTime(0, now);
      gainNode.gain.linearRampToValueAtTime(0.08, now + 0.05); // Gentle attack
      gainNode.gain.exponentialRampToValueAtTime(0.04, now + 0.2); // Soft decay
      gainNode.gain.setValueAtTime(0.04, now + note.duration / 1000 - 0.1); // Sustain
      gainNode.gain.exponentialRampToValueAtTime(0.0001, now + note.duration / 1000); // Release

      oscillator.start(now);
      oscillator.stop(now + note.duration / 1000);

      // Schedule next note
      backgroundMusicRef.current = setTimeout(() => playMelodyNote(noteIndex + 1), note.duration);
    };

    playMelodyNote(0);
  }, [happyBirthdayNotes]);

  // Stop background music
  const stopBackgroundMusic = useCallback(() => {
    if (backgroundMusicRef.current) {
      clearTimeout(backgroundMusicRef.current);
      backgroundMusicRef.current = null;
    }
  }, []);

  // Game loop for falling tiles - optimized with interval instead of requestAnimationFrame
  const gameLoop = useCallback(() => {
    if (!gameStarted || gameOver || gameCompleted) return;

    const currentTime = Date.now();
    
    // Spawn new tiles every 2 seconds, but increase frequency as game progresses
    const baseInterval = activePowerUps.slowMotion.active ? 2500 : 1500;
    const spawnInterval = Math.max(baseInterval - (tilesSpawned * 100), 800); // Faster spawning over time
    
    // In endless mode, keep spawning tiles indefinitely
    // In normal mode, spawn tiles until we have enough for the full melody
    const shouldSpawn = endlessMode ? true : tilesSpawned < happyBirthdayNotes.length + 2; // Extra tiles to ensure completion
    
    if (currentTime - lastTileSpawnRef.current > spawnInterval && shouldSpawn) {
      const noteIndex = endlessMode ? tilesSpawned % happyBirthdayNotes.length : Math.min(tilesSpawned, happyBirthdayNotes.length - 1);
      const newTile = {
        id: Date.now() + Math.random(), // Better unique ID
        note: happyBirthdayNotes[noteIndex],
        column: Math.floor(Math.random() * 4), // 4 columns
        y: -80, // Start above screen
        speed: activePowerUps.slowMotion.active ? 
          (2 + Math.floor(tilesSpawned / 5)) : 
          (4 + Math.floor(tilesSpawned / 3)), // Slower in slow motion
        noteIndex: noteIndex,
        spawned: true
      };
      
      setFallingTiles(prev => [...prev, newTile]);
      setTilesSpawned(prev => prev + 1);
      lastTileSpawnRef.current = currentTime;
      
      // Chance to spawn power-up
      spawnPowerUp();
    }

    // Update tile positions
    setFallingTiles(prev => prev.map(tile => ({
      ...tile,
      y: tile.y + tile.speed
    })).filter(tile => {
      // Remove tiles that hit bottom (lose life unless invincible)
      if (tile.y > 450) { // Adjusted for game container height
        if (!activePowerUps.invincible.active) {
          setLives(prevLives => {
            const newLives = prevLives - 1;
            if (newLives <= 0) {
              setGameOver(true);
            }
            return newLives;
          });
          setCombo(0); // Reset combo on miss
        }
        return false;
      }
      return true;
    }));

    // Update power-up positions
    setPowerUps(prev => prev.map(powerUp => ({
      ...powerUp,
      y: powerUp.y + powerUp.speed
    })).filter(powerUp => powerUp.y < 500)); // Remove power-ups that fall off screen
  }, [gameStarted, gameOver, gameCompleted, tilesSpawned, happyBirthdayNotes, endlessMode, activePowerUps.slowMotion.active, activePowerUps.invincible.active, spawnPowerUp]);

  // Start game loop when game starts - using setInterval for smoother performance
  useEffect(() => {
    if (gameStarted && !gameOver && !gameCompleted) {
      gameLoopRef.current = setInterval(gameLoop, 50); // 20 FPS for smoother performance
    }
    
    return () => {
      if (gameLoopRef.current) {
        clearInterval(gameLoopRef.current);
      }
    };
  }, [gameStarted, gameOver, gameCompleted, gameLoop]);
  
  const handleTileClick = useCallback((tileId) => {
    // Play the note immediately for better feedback
    try {
      playNote(261.63, 300); // Quick feedback sound
    } catch (error) {
      console.log('Audio playback failed:', error);
    }
    
    setFallingTiles(prev => {
      const tileIndex = prev.findIndex(tile => tile.id === tileId);
      if (tileIndex === -1) return prev;
      
      const tile = prev[tileIndex];
      
      // Play the actual note
      setTimeout(() => {
        try {
          playNote(tile.note.frequency, tile.note.duration);
        } catch (error) {
          console.log('Audio playback failed:', error);
        }
      }, 50);
      
      // Add visual feedback - create a burst effect
      const burstElement = document.createElement('div');
      burstElement.className = 'absolute pointer-events-none z-50';
      burstElement.style.left = `${(tile.column * 25) + 12.5}%`;
      burstElement.style.top = `${tile.y + 30}px`;
      burstElement.innerHTML = `
        <div class="text-2xl animate-bounce" style="animation-duration: 0.6s;">
          ${tile.note.note}
        </div>
        <div class="text-yellow-300 text-lg animate-ping" style="animation-duration: 0.8s;">
          ✨
        </div>
      `;
      document.querySelector('.game-area').appendChild(burstElement);
      
      // Remove burst effect after animation
      setTimeout(() => {
        if (burstElement.parentNode) {
          burstElement.parentNode.removeChild(burstElement);
        }
      }, 1000);
      
      // Remove the clicked tile immediately
      return prev.filter(t => t.id !== tileId);
    });
    
    // Update score with multiplier and combo
    const baseScore = 10;
    const multiplier = activePowerUps.scoreMultiplier.active ? activePowerUps.scoreMultiplier.multiplier : 1;
    const comboBonus = Math.floor(combo / 5); // Bonus every 5 combo
    const finalScore = baseScore * multiplier + comboBonus;
    
    setScore(prevScore => prevScore + finalScore);
    setCombo(prev => {
      const newCombo = prev + 1;
      setMaxCombo(current => Math.max(current, newCombo));
      return newCombo;
    });
    
    setTilesHit(prevHit => {
      const newHit = prevHit + 1;
      
      // Check if game is completed - need to hit all tiles
      if (newHit >= happyBirthdayNotes.length) {
        if (endlessMode) {
          // In endless mode, continue spawning tiles
          setTilesSpawned(0);
          setTilesHit(0);
          return 0; // Reset hit count for endless mode
        } else {
          // Show choice menu instead of automatic celebration
          setTimeout(() => {
            setGameCompleted(true);
            setShowChoiceMenu(true);
          }, 500);
        }
      }
      
      return newHit;
    });
  }, [happyBirthdayNotes.length, endlessMode, activePowerUps.scoreMultiplier.active, activePowerUps.scoreMultiplier.multiplier, combo]);
  
  // Reset game state is now handled by the resetGame function from useGameState
  
  if (!isUnlocked) {
    return (
      <div className="min-h-screen dynamic-bg flex items-center justify-center px-4 relative overflow-hidden">
        {/* Floating Hearts Background */}
        <FloatingHeartsBackground 
          heartCount={8} 
          opacity={0.15} 
          animationDuration={10}
          pulseDuration={12}
          size="w-4 h-4"
          color="text-pink-300"
        />
        
        <div className="glass-effect-dark rounded-3xl p-4 sm:p-6 md:p-8 text-center max-w-xs sm:max-w-md w-full relative z-10">
          <Lock className="w-12 h-12 sm:w-16 sm:h-16 text-white mx-auto mb-4" />
          <h1 className="text-2xl sm:text-3xl font-bold text-white mb-4">🎁 Special Surprise</h1>
          <p className="text-white/90 mb-6 text-sm sm:text-base">This special birthday surprise is locked until September 23rd!</p>
          <div className="glass-effect rounded-2xl p-3 sm:p-4 mb-6">
            <Clock className="w-6 h-6 sm:w-8 sm:h-8 text-white mx-auto mb-2" />
            <p className="countdown-display">{timeLeft}</p>
            <p className="text-white/80 text-xs sm:text-sm">until unlock</p>
          </div>
          <div className="flex justify-center space-x-2">
            <Heart className="w-5 h-5 sm:w-6 sm:h-6 text-red-300 animate-pulse" />
            <Heart className="w-5 h-5 sm:w-6 sm:h-6 text-pink-300 animate-pulse" style={{animationDelay: '0.5s'}} />
            <Heart className="w-5 h-5 sm:w-6 sm:h-6 text-red-300 animate-pulse" style={{animationDelay: '1s'}} />
          </div>
        </div>
      </div>
    );
  }
  
  if (showCelebration) {
    return (
      <div className="min-h-screen dynamic-bg flex items-center justify-center relative overflow-hidden">
        <div className="absolute inset-0 bg-black/10"></div>
        
        {/* Floating Hearts Background */}
        <FloatingHeartsBackground 
          heartCount={20} 
          opacity={0.3} 
          animationDuration={6}
          pulseDuration={8}
          size="w-6 h-6"
          color="text-red-500"
        />
        
        {/* Additional celebration hearts */}
        {[...Array(10)].map((_, i) => (
          <Heart
            key={`celebration-${i}`}
            className={`absolute w-8 h-8 text-pink-400 animate-bounce floating-heart`}
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${2 + Math.random() * 2}s`
            }}
          />
        ))}
        
        <div className="relative z-10 text-center max-w-xs sm:max-w-md lg:max-w-lg mx-4 w-full">
          <div className="glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 mb-6 sm:mb-8">
            <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-4 animate-pulse neon-title">
              🎉 HAPPY BIRTHDAY! 🎉
            </h1>
            <p className="text-base sm:text-lg md:text-xl text-white/80 mb-6 sm:mb-8 soft-subtitle">To My Beautiful Wifey</p>
            
            {/* Placeholder for photos/videos */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 mb-4 sm:mb-6">
              <div className="glass-effect rounded-lg sm:rounded-xl p-4 sm:p-6 md:p-8 flex items-center justify-center">
                <p className="text-white text-xs sm:text-sm">📸 Your Photos Here</p>
              </div>
              <div className="glass-effect rounded-lg sm:rounded-xl p-4 sm:p-6 md:p-8 flex items-center justify-center">
                <p className="text-white text-xs sm:text-sm">🎥 Your Videos Here</p>
              </div>
            </div>
          </div>
          
          <div className="glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 mb-6 sm:mb-8">
            <h3 className="text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4 flex items-center justify-center flex-wrap">
              <Heart className="w-5 h-5 sm:w-6 sm:h-6 mr-1 sm:mr-2 text-red-300" />
              <span className="text-center">A Poem Just For You</span>
              <Heart className="w-5 h-5 sm:w-6 sm:h-6 ml-1 sm:ml-2 text-red-300" />
            </h3>
            <p className="text-white/90 whitespace-pre-line text-sm sm:text-base md:text-lg leading-relaxed">
              {currentPoem}
            </p>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center">
            <button
              onClick={() => {
                stopBackgroundMusic();
                resetGame();
              }}
              className="btn-solid-1 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              🎵 Play Again
            </button>
            <button
              onClick={() => {
                const randomPoem = poems[Math.floor(Math.random() * poems.length)];
                setCurrentPoem(randomPoem);
              }}
              className="btn-solid-2 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              💝 New Poem
            </button>
            <button
              onClick={() => setShowSpecialPoem(true)}
              className="btn-solid-3 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-sm sm:text-base md:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              ✨ Special Poem
            </button>
          </div>
        </div>
        
        {/* Special Poem Sliding Panel */}
        <div className={`fixed inset-0 z-30 transition-transform duration-500 ease-in-out ${showSpecialPoem ? 'translate-x-0' : 'translate-x-full'}`}>
          <div className="absolute inset-0 bg-black/20 backdrop-blur-sm" onClick={() => setShowSpecialPoem(false)}></div>
          <div className="absolute right-0 top-0 h-full w-full max-w-2xl dynamic-bg shadow-2xl overflow-y-auto">
            <div className="p-8">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-3xl font-bold text-white">✨ Special Poem ✨</h2>
                <button
                  onClick={() => setShowSpecialPoem(false)}
                  className="glass-effect hover:glass-effect-dark text-white rounded-full p-2 transition-all duration-300 hover:scale-110"
                >
                  ✕
                </button>
              </div>
              
              <div className="glass-effect-dark rounded-3xl p-8">
                <div className="text-center mb-6">
                  <div className="text-6xl mb-4">💖</div>
                  <h3 className="text-2xl font-bold text-white mb-2">From My Heart to Yours</h3>
                  <div className="w-24 h-1 bg-gradient-to-r from-pink-300 to-red-300 mx-auto rounded-full"></div>
                </div>
                
                <div className="text-white/95 text-lg leading-relaxed whitespace-pre-line font-serif text-center">
                  {specialPoem}
                </div>
                
                <div className="text-center mt-8">
                  <div className="w-24 h-1 bg-gradient-to-r from-pink-300 to-red-300 mx-auto rounded-full mb-4"></div>
                  <p className="text-white/80 italic text-sm">Written with all my love 💕</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Love message in bottom right */}
        <div className="fixed bottom-4 right-4 z-20">
          <div className="glass-effect rounded-2xl px-4 py-2 animate-pulse">
            <p className="text-white/90 text-sm font-medium italic">
              I love you my darling kuku 💕
            </p>
          </div>
        </div>
      </div>
    );
  }
  
  if (!gameStarted) {
    return (
      <div className="min-h-screen dynamic-bg flex items-center justify-center relative overflow-hidden">
        {/* Floating Hearts Background */}
        <FloatingHeartsBackground 
          heartCount={15} 
          opacity={0.25} 
          animationDuration={12}
          pulseDuration={15}
          size="w-6 h-6"
          color="text-pink-200"
        />
        
        {/* Floating Elements Background */}
        {floatingElements.map((element, i) => (
          <div
            key={i}
            className="absolute pointer-events-none"
            style={{
              left: `${element.left}%`,
              top: `${element.top}%`,
              animation: `welcomeFloat 12s ease-in-out infinite`,
              animationDelay: `${element.animationDelay}s`
            }}
          >
            {element.type === 'heart' && (
              <Heart 
                className={`text-pink-300 animate-pulse floating-heart`}
                style={{
                  width: `${element.size * 4}px`,
                  height: `${element.size * 4}px`,
                  animationDuration: '3s'
                }}
              />
            )}
            {element.type === 'note' && (
              <Music 
                className={`text-blue-200 animate-bounce floating-music`}
                style={{
                  width: `${element.size * 4}px`,
                  height: `${element.size * 4}px`,
                  animationDuration: '2.5s'
                }}
              />
            )}
            {element.type === 'sparkle' && (
              <div 
                className={`bg-yellow-300 rounded-full animate-ping floating-sparkle`}
                style={{
                  width: `${element.size * 2}px`,
                  height: `${element.size * 2}px`,
                  animationDuration: '4s'
                }}
              />
            )}
          </div>
        ))}

        <div className="magical-card glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 text-center max-w-xs sm:max-w-md lg:max-w-lg mx-4 relative z-10 w-full">
          {/* Happy Birthday Title */}
          <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 sm:mb-6 shimmer-title px-2">
            🎉 HAPPY BIRTHDAY! 🎉
          </h1>
          <p className="text-base sm:text-lg md:text-xl text-white/80 mb-6 sm:mb-8 soft-subtitle">To My Beautiful Wifey</p>
          

          {/* Piano Keys Preview */}
          <div className="mb-4 sm:mb-6">
            <div className="flex justify-center space-x-1 mb-3 sm:mb-4">
              {['C', 'D', 'E', 'F', 'G'].map((note, i) => (
                <div
                  key={note}
                  className="piano-key w-6 h-12 sm:w-8 sm:h-16 bg-white rounded-b-lg shadow-lg flex items-end justify-center pb-1 sm:pb-2 text-xs font-bold text-gray-700 animate-pulse cursor-pointer"
                  style={{
                    animationDelay: `${i * 0.2}s`,
                    animationDuration: '2s'
                  }}
                >
                  {note}
                </div>
              ))}
            </div>
          </div>

          <Music className="w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 text-white mx-auto mb-3 sm:mb-4 animate-bounce" />
          <h2 className="text-xl sm:text-2xl font-bold text-white mb-4 sm:mb-6">🎵 Falling Piano Tiles</h2>
          
          <div className="space-y-2 sm:space-y-3">
            <button
              onClick={() => {
                setGameStarted(true);
                if (!welcomeMusicStarted) {
                  playWelcomeMusic();
                  setWelcomeMusicStarted(true);
                }
              }}
              className="w-full btn-solid-1 btn-bounce text-white px-8 sm:px-10 py-4 sm:py-5 rounded-full text-xl sm:text-2xl font-bold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              🎵 Start Playing
            </button>
            
            <button
              onClick={() => {
                if (!welcomeMusicStarted) {
                  playWelcomeMusic();
                  setWelcomeMusicStarted(true);
                }
              }}
              className="btn-solid-2 btn-bounce text-white px-6 sm:px-8 py-3 sm:py-4 rounded-full text-sm sm:text-base font-semibold hover:scale-105 transition-all duration-300"
              style={{animationDelay: '0.2s'}}
            >
              🎶 Play Welcome Music
            </button>
          </div>
        </div>

        {/* Love message in corner */}
        <div className="absolute bottom-3 sm:bottom-6 right-3 sm:right-6 z-20">
          <div className="glass-effect rounded-xl sm:rounded-2xl px-2 sm:px-4 py-1 sm:py-2">
            <p className="text-white/90 text-xs sm:text-sm font-medium italic typewriter">
              Made with love just for you 🎵
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Choice Menu after completing all tiles
  if (showChoiceMenu && gameCompleted) {
    return (
      <div className="min-h-screen dynamic-bg flex items-center justify-center px-4 relative overflow-hidden">
        {/* Floating Hearts Background */}
        <FloatingHeartsBackground 
          heartCount={10} 
          opacity={0.2} 
          animationDuration={9}
          pulseDuration={11}
          size="w-5 h-5"
          color="text-pink-300"
        />
        
        <div className="glass-effect-dark rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 text-center max-w-xs sm:max-w-md w-full relative z-10">
          <div className="text-4xl sm:text-5xl md:text-6xl mb-3 sm:mb-4">🎉</div>
          <h1 className="text-2xl sm:text-3xl font-bold text-white mb-3 sm:mb-4">Congratulations!</h1>
          <p className="text-white/90 mb-4 sm:mb-6 text-sm sm:text-base">You successfully completed "Happy Birthday"!</p>
          <div className="glass-effect rounded-xl sm:rounded-2xl p-3 sm:p-4 mb-4 sm:mb-6">
            <p className="text-white text-base sm:text-lg">Final Score: {score}</p>
            <p className="text-white/80 text-xs sm:text-sm">Max Combo: {maxCombo} 🔥</p>
            <p className="text-white/80 text-xs sm:text-sm">Perfect Performance! 🌟</p>
          </div>
          
          <div className="space-y-2 sm:space-y-3">
            <button
              onClick={() => {
                setEndlessMode(true);
                setShowChoiceMenu(false);
                setGameCompleted(false);
                setTilesHit(0);
                setTilesSpawned(0);
              }}
              className="w-full btn-solid-1 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full text-base sm:text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              🎮 Endless Mode
            </button>
            
            <button
              onClick={() => {
                setShowChoiceMenu(false);
                setShowCelebration(true);
                playBackgroundMusic();
              }}
              className="w-full btn-solid-2 text-white px-6 py-3 rounded-full text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              💝 See Your Surprise
            </button>
            
            <button
              onClick={resetGame}
              className="w-full btn-solid-3 text-white px-6 py-3 rounded-full text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
            >
              🚪 Exit to Menu
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (gameOver) {
    return (
      <div className="min-h-screen dynamic-bg flex items-center justify-center relative overflow-hidden">
        {/* Floating Hearts Background */}
        <FloatingHeartsBackground 
          heartCount={6} 
          opacity={0.15} 
          animationDuration={10}
          pulseDuration={12}
          size="w-4 h-4"
          color="text-red-300"
        />
        
        <div className="glass-effect-dark rounded-3xl p-8 text-center max-w-md mx-4 relative z-10">
          <div className="text-6xl mb-4">💔</div>
          <h1 className="text-3xl font-bold text-white mb-4">Game Over!</h1>
          <p className="text-white/90 mb-4">You missed too many tiles!</p>
          <div className="glass-effect rounded-2xl p-4 mb-6">
            <p className="text-white text-lg">Final Score: {score}</p>
            <p className="text-white/80 text-sm">Max Combo: {maxCombo} 🔥</p>
            <p className="text-white/80 text-sm">Tiles Hit: {Math.floor(score / 10)}</p>
          </div>
          <button
            onClick={resetGame}
            className="btn-solid-1 text-white px-8 py-3 rounded-full text-lg font-semibold hover:scale-105 transform transition-all duration-300 shadow-lg"
          >
            🔄 Try Again
          </button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen dynamic-bg relative overflow-hidden flex items-center justify-center">
      {/* Floating Hearts Background Animation */}
      <FloatingHeartsBackground 
        heartCount={12} 
        opacity={0.2} 
        animationDuration={8}
        pulseDuration={10}
        size="w-5 h-5"
        color="text-pink-200"
      />

      {/* Game Container */}
      <div className="game-container glass-effect-dark rounded-3xl p-6 w-96 h-[600px] relative overflow-hidden">
        {/* Game UI Header */}
        <div className="flex justify-between items-center text-white mb-2">
          <div className="score-display glass-effect rounded-xl px-3 py-1">
            <p className="text-xs font-bold">Score: {score}</p>
          </div>
          <div className="glass-effect rounded-xl px-3 py-1">
            <p className="text-xs font-semibold">❤️ {lives}</p>
          </div>
          <div className="glass-effect rounded-xl px-3 py-1">
            <p className="text-xs font-semibold">Hit: {tilesHit}/{endlessMode ? '∞' : happyBirthdayNotes.length}</p>
          </div>
          {endlessMode && (
            <button
              onClick={resetGame}
              className="glass-effect rounded-xl px-3 py-1 text-xs font-semibold hover:scale-105 transition-all duration-300"
            >
              🚪 Exit
            </button>
          )}
        </div>

        {/* Combo and Power-up Status */}
        <div className="flex justify-between items-center text-white mb-2">
          <div className={`glass-effect rounded-xl px-3 py-1 ${combo > 0 ? 'combo-effect' : ''}`}>
            <p className="text-xs font-semibold">🔥 Combo: {combo}</p>
          </div>
          <div className="glass-effect rounded-xl px-3 py-1">
            <p className="text-xs font-semibold">🏆 Best: {maxCombo}</p>
          </div>
        </div>

        {/* Active Power-ups Display */}
        {(activePowerUps.invincible.active || activePowerUps.slowMotion.active || activePowerUps.scoreMultiplier.active) && (
          <div className="flex justify-center space-x-2 mb-2">
            {activePowerUps.invincible.active && (
              <div className="glass-effect rounded-full px-2 py-1 text-xs font-bold text-yellow-300 animate-pulse">
                ⭐ {Math.ceil(activePowerUps.invincible.timeLeft / 1000)}s
              </div>
            )}
            {activePowerUps.slowMotion.active && (
              <div className="glass-effect rounded-full px-2 py-1 text-xs font-bold text-blue-300 animate-pulse">
                ⚡ {Math.ceil(activePowerUps.slowMotion.timeLeft / 1000)}s
              </div>
            )}
            {activePowerUps.scoreMultiplier.active && (
              <div className="glass-effect rounded-full px-2 py-1 text-xs font-bold text-purple-300 animate-pulse">
                🌈 {activePowerUps.scoreMultiplier.multiplier}x ({Math.ceil(activePowerUps.scoreMultiplier.timeLeft / 1000)}s)
              </div>
            )}
          </div>
        )}

        {/* Game Area with 4 columns */}
        <div className={`game-area relative h-[500px] overflow-hidden rounded-2xl ${activePowerUps.invincible.active ? 'ring-4 ring-yellow-400 ring-opacity-60' : ''} ${activePowerUps.slowMotion.active ? 'ring-4 ring-blue-400 ring-opacity-60' : ''}`}>
          <div className="h-full grid grid-cols-4 gap-1">
            {[0, 1, 2, 3].map(column => (
              <div key={column} className="relative bg-white/5 border-l border-r border-white/10">
                {/* Column background lines */}
                <div className="absolute inset-0 opacity-20">
                  {[...Array(8)].map((_, i) => (
                    <div key={i} className="column-line h-16 border-b border-white/10"></div>
                  ))}
                </div>
              </div>
            ))}
          </div>

          {/* Falling Tiles */}
          {fallingTiles.map(tile => (
            <div
              key={tile.id}
              className="absolute z-20"
              style={{
                left: `${(tile.column * 25) + 0.5}%`,
                top: `${tile.y}px`,
                width: '23%',
                height: '60px'
              }}
            >
              <button
                onClick={() => handleTileClick(tile.id)}
                onMouseDown={() => handleTileClick(tile.id)}
                onTouchStart={(e) => {
                  e.preventDefault();
                  handleTileClick(tile.id);
                }}
                className="game-tile w-full h-full text-white font-bold text-lg rounded-lg cursor-pointer select-none"
                style={{
                  touchAction: 'manipulation',
                  userSelect: 'none',
                  WebkitTapHighlightColor: 'transparent'
                }}
              >
                <div className="relative z-10">
                  {tile.note.note}
                  <div className="text-xs opacity-90">🎵</div>
                </div>
              </button>
            </div>
          ))}

          {/* Power-ups */}
          {powerUps.map(powerUp => (
            <div
              key={powerUp.id}
              className="absolute z-20"
              style={{
                left: `${(powerUp.column * 25) + 0.5}%`,
                top: `${powerUp.y}px`,
                width: '23%',
                height: '60px'
              }}
            >
              <button
                onClick={() => collectPowerUp(powerUp.id, powerUp.type)}
                onMouseDown={() => collectPowerUp(powerUp.id, powerUp.type)}
                onTouchStart={(e) => {
                  e.preventDefault();
                  collectPowerUp(powerUp.id, powerUp.type);
                }}
                className="power-up w-full h-full text-white font-bold text-2xl rounded-lg cursor-pointer select-none"
                style={{
                  touchAction: 'manipulation',
                  userSelect: 'none',
                  WebkitTapHighlightColor: 'transparent'
                }}
                title={powerUpTypes[powerUp.type].effect}
              >
                <div className="relative z-10">
                  {powerUpTypes[powerUp.type].emoji}
                </div>
              </button>
            </div>
          ))}

          {/* Bottom danger zone indicator */}
          <div className="danger-zone absolute bottom-0 left-0 right-0 h-16 pointer-events-none">
            <div className="absolute bottom-1 left-1/2 transform -translate-x-1/2 text-white/90 text-xs font-bold">
              ⚠️ Danger Zone ⚠️
            </div>
          </div>
        </div>

        {/* Game completed message */}
        {gameCompleted && (
          <div className="absolute inset-0 flex items-center justify-center z-30 bg-black/20 backdrop-blur-sm rounded-3xl">
            <div className="bg-gradient-to-r from-green-400 to-emerald-500 text-white px-6 py-3 rounded-2xl text-lg font-bold animate-bounce shadow-2xl text-center">
              <div className="mb-2">🎉 Perfect! 🎉</div>
              <button 
                onClick={() => setShowCelebration(true)}
                className="bg-white/20 px-4 py-2 rounded-full text-sm hover:bg-white/30 transition-all"
              >
                See Your Surprise! 💝
              </button>
            </div>
          </div>
        )}

        {/* Reset button */}
        <div className="absolute bottom-4 right-4">
          <button
            onClick={resetGame}
            className="glass-effect text-white px-3 py-2 rounded-full hover:scale-105 transition-all duration-300 text-sm"
          >
            🔄 Reset
          </button>
        </div>
      </div>
    </div>
  );
};

export default BirthdayPianoSurprise;